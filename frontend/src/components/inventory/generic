
export function DispenseModify(){
    const { register, handleSubmit, setValue,reset, errors } = useForm(); 
    const [error, setError] =useState(false)
    const [success, setSuccess] =useState(false)
    const [message,setMessage] = useState("")
    const ProductEntryServ=client.service('productentry')
    const {user} = useContext(UserContext)
    const {state,setState} = useContext(ObjectContext)

    const ProductEntry =state.ProductEntryModule.selectedProductEntry 

        useEffect(() => {
            setValue("name", ProductEntry.name,  {
                shouldValidate: true,
                shouldDirty: true
            })
            setValue("ProductEntryType", ProductEntry.ProductEntryType,  {
                shouldValidate: true,
                shouldDirty: true
            })
            
            return () => {
                
            }
        })

   const handleCancel=async()=>{
    const    newProductEntryModule={
        selectedProductEntry:{},
        show :'create'
      }
   await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))
           }


        const changeState =()=>{
        const    newProductEntryModule={
            selectedProductEntry:{},
            show :'create'
        }
        setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))

        }
    const handleDelete=async()=>{
        let conf=window.confirm("Are you sure you want to delete this data?")
        
        const dleteId=ProductEntry._id
        if (conf){
             
        ProductEntryServ.remove(dleteId)
        .then((res)=>{
                reset();
                toast({
                    message: 'ProductEntry deleted succesfully',
                    type: 'is-success',
                    dismissible: true,
                    pauseOnHover: true,
                  })
                changeState()
            })
            .catch((err)=>{
                toast({
                    message: "Error deleting ProductEntry, probable network issues or "+ err,
                    type: 'is-danger',
                    dismissible: true,
                    pauseOnHover: true,
                  })
            })
        }
    }
        

    const onSubmit = (data,e) =>{
        e.preventDefault();
        
        setSuccess(false)
        data.facility=ProductEntry.facility
          
        ProductEntryServ.patch(ProductEntry._id,data)
        .then((res)=>{
                 toast({
                    message: 'ProductEntry updated succesfully',
                    type: 'is-success',
                    dismissible: true,
                    pauseOnHover: true,
                  })
                  
                changeState()

            })
            .catch((err)=>{
                toast({
                    message: "Error updating ProductEntry, probable network issues or "+ err,
                    type: 'is-danger',
                    dismissible: true,
                    pauseOnHover: true,
                  })
            })

      } 
     
      
    return (
        
        <>
        <div className="card ">
            <div className="card-header">
                <p className="card-header-title">
                    ProductEntry Details-Modify
                </p>
            </div>
            <div className="card-content vscrollable">
           
            <form onSubmit={handleSubmit(onSubmit)}>
                <div className="field">
                    <label className="label is-small"> Name
                    <p className="control has-icons-left has-icons-right">
                        <input className="input  is-small" ref={register({ required: true })}  name="name" type="text" placeholder="Name" />
                        <span className="icon is-small is-left">
                            <i className="fas fa-hospital"></i>
                        </span>                    
                    </p>
                    </label>
                    </div>
                <div className="field">
                <label className="label is-small">ProductEntry Type
                    <p className="control has-icons-left has-icons-right">
                    <input className="input is-small " ref={register({ required: true })} disabled name="ProductEntryType" type="text" placeholder="ProductEntry Type" />
                    <span className="icon is-small is-left">
                        <i className="fas fa-map-signs"></i>
                    </span>
                    
                </p>
                </label>
                </div>
           
           
            </form>
            
            <div className="field  is-grouped mt-2" >
                <p className="control">
                    <button type="submit" className="button is-success is-small" onClick={handleSubmit(onSubmit)}>
                        Save
                    </button>
                </p>
                <p className="control">
                    <button className="button is-warning is-small" onClick={handleCancel}>
                        Cancel
                    </button>
                </p>
                <p className="control">
                    <button className="button is-danger is-small" onClick={()=>handleDelete()} type="delete">
                       Delete
                    </button>
                </p>
            </div>
        </div>
        </div>
        </>
    )
   
   
                
}   

export  function ProductSearch({getSearchfacility,clear}) {
    
    const productServ=client.service('products')
    const [facilities,setFacilities]=useState([])
     const [searchError, setSearchError] =useState(false)
    const [showPanel, setShowPanel] =useState(false)
   const [searchMessage, setSearchMessage] = useState("") 
   const [simpa,setSimpa]=useState("")
   const [chosen,setChosen]=useState(false)
   const [count,setCount]=useState(0)
   const inputEl=useRef(null)
   const [val,setVal]=useState("")
    const [productModal,setProductModal]=useState(false)

   const handleRow= async(obj)=>{
        await setChosen(true)
       getSearchfacility(obj)
       
       await setSimpa(obj.name)
       
        setShowPanel(false)
        await setCount(2)
}
    const handleBlur=async(e)=>{
         if (count===2){
             console.log("stuff was chosen")
         }
       
    }
    const handleSearch=async(value)=>{
        setVal(value)
        if (value===""){
            setShowPanel(false)
            return
        }
        const field='name' 

       
        if (value.length>=3 ){
            productServ.find({query: {     
                 [field]: {
                     $regex:value,
                     $options:'i'
                    
                 },
                 $limit:10,
                 $sort: {
                     createdAt: -1
                   }
                     }}).then((res)=>{
              console.log("product  fetched successfully") 
              console.log(res.data) 
                setFacilities(res.data)
                 setSearchMessage(" product  fetched successfully")
                 setShowPanel(true)
             })
             .catch((err)=>{
                toast({
                    message: 'Error creating ProductEntry ' + err,
                    type: 'is-danger',
                    dismissible: true,
                    pauseOnHover: true,
                  })
             })
         }
        else{
            console.log("less than 3 ")
            console.log(val)
            setShowPanel(false)
            await setFacilities([])
            console.log(facilities)
        }
    }

    const handleAddproduct =()=>{
        setProductModal(true) 
    }
    const handlecloseModal =()=>{
        setProductModal(false)
        handleSearch(val)
    }
    useEffect(() => {
       if (clear){
           console.log("success has changed",clear)
           setSimpa("")
       }
        return () => {
            
        }
    }, [clear] )
    return (
        <div>
            <div className="field">
                <div className="control has-icons-left  ">
                    <div className={`dropdown ${showPanel?"is-active":""}`}>
                        <div className="dropdown-trigger">
                            <DebounceInput className="input is-small " 
                                type="text" placeholder="Search Product"
                                value={simpa}
                                minLength={3}
                                debounceTimeout={400}
                                onBlur={(e)=>handleBlur(e)}
                                onChange={(e)=>handleSearch(e.target.value)}
                                inputRef={inputEl}
                                  />
                            <span className="icon is-small is-left">
                                <i className="fas fa-search"></i>
                            </span>
                        </div>
                        <div className="dropdown-menu" >
                            <div className="dropdown-content">
                          { facilities.length>0?"":<div className="dropdown-item" onClick={handleAddproduct}> <span>Add {val} to product list</span> </div>}

                              {facilities.map((facility, i)=>(
                                    
                                    <div className="dropdown-item" key={facility._id} onClick={()=>handleRow(facility)}>
                                        
                                        <span>{facility.name}</span>
                                        
                                    </div>
                                    
                                    ))}
                                    
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div className={`modal ${productModal?"is-active":""}` }>
                                    <div className="modal-background"></div>
                                    <div className="modal-card">
                                        <header className="modal-card-head">
                                        <p className="modal-card-title">Choose Store</p>
                                        <button className="delete" aria-label="close"  onClick={handlecloseModal}></button>
                                        </header>
                                        <section className="modal-card-body">
                                        </section>
                                    </div>
                                </div>       
        </div>
    )
}

export function DispenseCreate(){
    
     const [error, setError] =useState(false)
     const [success, setSuccess] =useState(false)
     const [message,setMessage] = useState("")
     
     const [facility,setFacility] = useState()
     const ProductEntryServ=client.service('productentry')
     
     const {user} = useContext(UserContext) 
     
     const [currentUser,setCurrentUser] = useState()
     const [type,setType] = useState("Purchase Invoice")
     const [documentNo,setDocumentNo] = useState("")
     const [totalamount,setTotalamount] = useState("")
     const [productId,setProductId] = useState("")
     const [source,setSource] = useState("")
     const [date,setDate] = useState("")
     const [name,setName] = useState("")
     const [destination,setDestination] = useState("")
     const [medication,setMedication] = useState()
     const [instruction,setInstruction] = useState()
     const [productItem,setProductItem] = useState([])
     const {state}=useContext(ObjectContext)
     const ClientServ=client.service('clinicaldocument')
     
     const [productEntry,setProductEntry]=useState({
         productitems:[],
         date,
         documentNo,
         type,
         totalamount,
         source,
 
     })
  
     const productItemI={
         medication,
         destination,
         instruction 
     }
     
     
     const getSearchfacility=(obj)=>{
 
         setProductId(obj._id)
         setName(obj.name)
     }
     
     useEffect(() => {
         setCurrentUser(user)
         return () => {
         
         }
     }, [user])

     const handleChangeType=async (e)=>{
         await setType(e.target.value)
     }
     const handleClickProd=async()=>{
         await setSuccess(false)
         await setProductItem(
             prevProd=>prevProd.concat(productItemI)
         )
         setName("")
         setMedication("")
         setInstruction("")
         setDestination("")
        await setSuccess(true)
     }
 
     const resetform=()=>{
      setType("Purchase Invoice")
     setDocumentNo("")
     setTotalamount("")
     setProductId("")
     setSource("")
     setDate("")
     setName("")
     setMedication("")
     setInstruction("")
     setProductItem([])
     }
     const onSubmit = () =>{
         setMessage("")
         setError(false)
         setSuccess(false)
         let document={}
           if (user.currentEmployee){
           document.facility=user.currentEmployee.facilityDetail._id 
           document.facilityname=user.currentEmployee.facilityDetail.facilityName
           }
          document.documentdetail=productItem
           document.location=state.ClinicModule.selectedClinic.name+" "+state.ClinicModule.selectedClinic.locationType
           document.locationId=state.ClinicModule.selectedClinic._id
           document.client=state.ClientModule.selectedClient._id
           document.createdBy=user._id
           document.createdByname=user.firstname+ " "+user.lastname
           document.status="completed"
         ClientServ.create(document)
         .then((res)=>{
                 setSuccess(true)
                 toast({
                     message: 'Documentation created succesfully',
                     type: 'is-success',
                     dismissible: true,
                     pauseOnHover: true,
                   })
                   setSuccess(false)
             })
             .catch((err)=>{
                 toast({
                     message: 'Error creating Documentation ' + err,
                     type: 'is-danger',
                     dismissible: true,
                     pauseOnHover: true,
                   })
             })
 
       } 
 
 
 
 
 
 
 
     useEffect(() => {
         return () => {
             
         }
     }, [])
 
     return (
         <>
             <div className="card card-overflow">
             <div className="card-header">
                 <p className="card-header-title">
                     Create Prescription
                 </p>
             </div>
             <div className="card-content ">
             
         <label className="label is-small">Add Medication:</label>
          <div className="field is-horizontal">
             <div className="field-body">
                 <div className="field">
                 <p className="control has-icons-left">
                     <input className="input is-small" name="medication" value={medication} type="text" onChange={e=>setMedication(e.target.value)} placeholder="medication"  />
                     <span className="icon is-small is-left">
                     <i className="fas fa-envelope"></i>
                     </span>
                 </p>
        
             </div> 
             
           
             <div className="field">
             <p className="control">
                     <button className="button is-info is-small  is-pulled-right">
                       <span className="is-small" onClick={handleClickProd}> +</span>
                     </button>
                 </p>
             </div>
             </div>
          </div>
          <div className="field is-horizontal">
             <div className="field-body">
          <div className="field">
                 <p className="control has-icons-left">
                     <input className="input is-small"  name="instruction" value={instruction} type="text" onChange={e=>setInstruction(e.target.value)} placeholder="Instructions/Note"  />
                     <span className="icon is-small is-left">
                     <i className="fas fa-envelope"></i>
                     </span>
                 </p>
        
             </div>  
             <div className="field">
                 <p className="control has-icons-left">
                     <input className="input is-small"  name="destination" value={destination} type="text" onChange={e=>setDestination(e.target.value)} placeholder="Destination Pharmacy"  />
                     <span className="icon is-small is-left">
                     <i className="fas fa-envelope"></i>
                     </span>
                 </p>
        
             </div>  
             </div> 
             </div> 
 
        {(productItem.length>0) && <div>
             <label>Medications:</label>
          <table className="table is-striped  is-hoverable is-fullwidth is-scrollable ">
                 <thead>
                     <tr>
                     <th><abbr title="Serial No">S/No</abbr></th>
                     <th><abbr title="Medication">Medication</abbr></th>
                     <th><abbr title="Destination">Destination</abbr></th>
                     <th><abbr title="Actions">Actions</abbr></th>
                     </tr>
                 </thead>
                 <tfoot>
                     
                 </tfoot>
                 <tbody>
                    { productItem.map((ProductEntry, i)=>(
 
                         <tr key={i}>
                         <th>{i+1}</th>
                         <td>{ProductEntry.medication}<br/>
                         <span className="help">{ProductEntry.instruction}</span></td>
                        <td>{ProductEntry.destination}</td>
                         <td><span className="showAction"  >x</span></td>
                         
                         </tr>
 
                     ))}
                 </tbody>
                 </table>
                 <div className="field mt-2">
                 <p className="control">
                     <button className="button is-success is-small" disabled={!productItem.length>0} onClick={onSubmit}>
                         Create
                     </button>
                 </p>
                 </div>
                 </div>
            
             }
             
             
             </div>
             </div>
         </>
     )
    
 }
 
[{"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Payment.js":"1","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\PaymentCreate.js":"2","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js":"3","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js":"4","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js":"5","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js":"6","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js":"7","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js":"8","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js":"9","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClinicModule.js":"10","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js":"11","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js":"12","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js":"13","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js":"14","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js":"15","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js":"16","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js":"17","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\FinanceStore.js":"18","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\ProductEntry.js":"19","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\ProductExit.js":"20","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicStore.js":"21","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Clinic.js":"22","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\ClientBill.js":"23","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillDispenseCreate.js":"24","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\EncounterMain.js":"25","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\helpers\\FacilityPopup.js":"26","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillPrescriptionCreate.js":"27","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Dispensary.js":"28","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js":"29","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js":"30","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js":"31","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicReport.js":"32","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\DeptUnits.js":"33","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClientMgt\\Patient.js":"34","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js":"35","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\FinanceHome.js":"36","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\BillPrescription.js":"37","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\DocumentClass.js":"38","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\Prescription.js":"39","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\DispenseExit.js":"40"},{"size":22006,"mtime":1614691966786,"results":"41","hashOfConfig":"42"},{"size":45233,"mtime":1614692129934,"results":"43","hashOfConfig":"42"},{"size":500,"mtime":1606167681327,"results":"44","hashOfConfig":"42"},{"size":958,"mtime":1611095384833,"results":"45","hashOfConfig":"42"},{"size":638,"mtime":1614054617997,"results":"46","hashOfConfig":"42"},{"size":8388,"mtime":1614165644970,"results":"47","hashOfConfig":"42"},{"size":3070,"mtime":1611089651447,"results":"48","hashOfConfig":"42"},{"size":9542,"mtime":1610481859369,"results":"49","hashOfConfig":"42"},{"size":8619,"mtime":1614055707475,"results":"50","hashOfConfig":"42"},{"size":7976,"mtime":1614692489078,"results":"51","hashOfConfig":"42"},{"size":144,"mtime":1610340849334,"results":"52","hashOfConfig":"42"},{"size":146,"mtime":1610340786924,"results":"53","hashOfConfig":"42"},{"size":148,"mtime":1610340754492,"results":"54","hashOfConfig":"42"},{"size":597,"mtime":1612953434041,"results":"55","hashOfConfig":"42"},{"size":9318,"mtime":1610307391617,"results":"56","hashOfConfig":"42"},{"size":40586,"mtime":1611144169606,"results":"57","hashOfConfig":"42"},{"size":38844,"mtime":1613544987175,"results":"58","hashOfConfig":"42"},{"size":38844,"mtime":1614165763658,"results":"59","hashOfConfig":"42"},{"size":52276,"mtime":1614163882289,"results":"60","hashOfConfig":"42"},{"size":57661,"mtime":1614163882292,"results":"61","hashOfConfig":"42"},{"size":38856,"mtime":1612264335426,"results":"62","hashOfConfig":"42"},{"size":40695,"mtime":1614055518190,"results":"63","hashOfConfig":"42"},{"size":11238,"mtime":1614245676414,"results":"64","hashOfConfig":"42"},{"size":26832,"mtime":1614161732800,"results":"65","hashOfConfig":"42"},{"size":19335,"mtime":1614084118420,"results":"66","hashOfConfig":"42"},{"size":15112,"mtime":1613312865451,"results":"67","hashOfConfig":"42"},{"size":38779,"mtime":1614613902735,"results":"68","hashOfConfig":"42"},{"size":22601,"mtime":1614693018362,"results":"69","hashOfConfig":"42"},{"size":57958,"mtime":1614692889255,"results":"70","hashOfConfig":"42"},{"size":3846,"mtime":1614260288819,"results":"71","hashOfConfig":"42"},{"size":602,"mtime":1610166221216,"results":"72","hashOfConfig":"42"},{"size":8924,"mtime":1612264316226,"results":"73","hashOfConfig":"42"},{"size":153,"mtime":1610341642391,"results":"74","hashOfConfig":"42"},{"size":76012,"mtime":1612920109572,"results":"75","hashOfConfig":"42"},{"size":52276,"mtime":1611792286916,"results":"76","hashOfConfig":"42"},{"size":1292,"mtime":1614692318437,"results":"77","hashOfConfig":"42"},{"size":19896,"mtime":1614245775231,"results":"78","hashOfConfig":"42"},{"size":37609,"mtime":1612483185115,"results":"79","hashOfConfig":"42"},{"size":50631,"mtime":1614074820289,"results":"80","hashOfConfig":"42"},{"size":60143,"mtime":1614693038875,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"vuhkqw",{"filePath":"84","messages":"85","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"110"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"110"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"110"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"156","messages":"157","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Payment.js",["168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\PaymentCreate.js",["192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js",["220","221"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js",["222","223","224","225","226"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js",["227","228","229"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js",["230","231"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js",["232","233","234","235"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClinicModule.js",["236","237","238","239"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js",[],["240","241"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js",["242","243"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js",["244","245","246","247","248","249","250","251"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Inventory() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedInventory,setSelectedInventory]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Inventory  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <InventoryList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.InventoryModule.show ==='create')&&<InventoryCreate />}\r\n                {(state.InventoryModule.show ==='detail')&&<InventoryDetail  />}\r\n                {(state.InventoryModule.show ==='modify')&&<InventoryModify Inventory={selectedInventory} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function InventoryCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeInventory.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        InventoryServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Inventory successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Inventory created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Inventory ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Inventory: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field\">    \r\n                <div class=\"control\">\r\n                    <div class=\"select is-small\">\r\n                        <select>\r\n                            <option>Purchase Invoice </option>\r\n                            <option>Initialization</option>\r\n                            <option>Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> {/* Audit/initialization/Purchase Invoice */}\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"supplier\" type=\"text\" placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"date\" type=\"text\" placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"totalamount\" type=\"text\" placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n         {/* array of inventory items */}\r\n         <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\"> +</span>\r\n                    </button>\r\n                </p>\r\n           <div className=\"field\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } /* add array no */ name=\"productId\" type=\"text\" placeholder=\"Product Id\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"quantity\" type=\"text\" placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                <label className=\"label is-small\">Base Unit</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"costprice\" type=\"text\" placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function InventoryList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedInventory, setSelectedInventory]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n    }\r\n\r\n    const handleRow= async(Inventory)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Inventory)\r\n\r\n        await setSelectedInventory(Inventory)\r\n\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       InventoryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Inventory  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Inventory, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findInventory= await InventoryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findInventory.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findInventory= await InventoryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findInventory.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Inventory  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                InventoryServ.on('created', (obj)=>getFacilities())\r\n                InventoryServ.on('updated', (obj)=>getFacilities())\r\n                InventoryServ.on('patched', (obj)=>getFacilities())\r\n                InventoryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n        \r\n        useEffect(() => {\r\n            getFacilities()\r\n            return () => {\r\n               \r\n            }\r\n        }, [state.StoreModule.selectedStore])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Inventory\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Inventories </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        {/* <th><abbr title=\"Category\">Category</abbr></th> */}\r\n                                        <th>Product</th>\r\n                                        <th><abbr title=\"Quantity\">Quantity</abbr></th>\r\n                                        <th><abbr title=\"Base Unit\">Base Unit</abbr></th>\r\n                                        <th><abbr title=\"Stock Value\">Stock Value</abbr></th>\r\n                                         <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                                        <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                                        <th><abbr title=\"Re-Order Level\">Re-Order Level</abbr></th>\r\n                                        <th><abbr title=\"Expiry\">Expiry</abbr></th> \r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Inventory, i)=>(\r\n\r\n                                            <tr key={Inventory._id} onClick={()=>handleRow(Inventory)}>\r\n                                            <th>{i+1}</th>\r\n                                            {/* <td>{Inventory.productDetail.category}</td> */}\r\n                                            <th>{Inventory.name}</th>\r\n                                            <td>{Inventory.quantity}</td>\r\n                                            <td>{Inventory.baseunit}</td>\r\n                                            <td>{Inventory.stockvalue}</td>\r\n                                            <td>{Inventory.costprice}</td>\r\n                                            <td>{Inventory.sellingprice}</td>\r\n                                            <td>{Inventory.reorder_level}</td> \r\n                                            <td>{Inventory.expiry}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function InventoryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const InventoryServ=client.service('/Inventory')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const {user} = useContext(UserContext) //,setUser\r\n    \r\n   \r\n\r\n   const Inventory =state.InventoryModule.selectedInventory \r\n   console.log(\"selected\",Inventory)\r\n\r\n   \r\n  const getFacilities= async()=>{\r\n     const findProductEntry= await client.service('productentry').find(\r\n        {query: {\r\n            'productitems.productId':Inventory.productId,\r\n            facility:user.currentEmployee.facilityDetail._id,\r\n            storeId:state.StoreModule.selectedStore._id,\r\n            $limit:20,\r\n            $sort: {\r\n                createdAt: -1\r\n            }\r\n            }})\r\n\r\n        console.log(findProductEntry)\r\n       }\r\n    \r\n       useEffect(() => {\r\n        getFacilities()\r\n           return () => {\r\n               \r\n           }\r\n       }, [Inventory])\r\n /* await setFacilities(findProductEntry.data)\r\n        }\r\n        else {\r\n            if (user.stacker){ */\r\n                /* toast({\r\n                    message: 'You do not qualify to view this',\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  }) \r\n                  return */\r\n               /*  const findProductEntry= await ProductEntryServ.find(\r\n                    {query: {\r\n                        \r\n                        $limit:20,\r\n                        $sort: {\r\n                            createdAt: -1\r\n                        }\r\n                        }})\r\n    \r\n            await setFacilities(findProductEntry.data)\r\n\r\n            }\r\n        }  */\r\n  /*   .then((res)=>{\r\n        console.log(res)\r\n            setFacilities(res.data)\r\n            setMessage(\" ProductEntry  fetched successfully\")\r\n            setSuccess(true)\r\n        })\r\n        .catch((err)=>{\r\n            setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n            setError(true)\r\n        }) */\r\n    \r\n    \r\n\r\n\r\n\r\n    const handleEdit= async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Inventory Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Product Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"><strong> {Inventory.name} </strong></span>\r\n                        </td>\r\n                    </tr>\r\n                   {/*  <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Inventory Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"InventoryType\">{Inventory.InventoryType} </span> \r\n                    </td>\r\n                </tr> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Set Price\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\"  /*  onClick={handleSetPrice} */>\r\n                        Audit\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-info is-small\" /* onClick={handleEdit} */>\r\n                        Transaction History\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" /* onClick={handleEdit} */>\r\n                        Reorder Level\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function InventoryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    const [billservice,setBillService] = useState()\r\n    // eslint-disable-next-line \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const billServ=client.service('billing')\r\n\r\n    const Inventory =state.InventoryModule.selectedInventory // set inventory\r\n    const handleSetPrice = async()=>{\r\n    \r\n        const service = await  billServ.get(Inventory.billingId) // get the service\r\n            const contractSel= service.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n            \r\n            setValue(\"price\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"oldprice\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            await setBillService(service)\r\n            console.log(contractSel,service)\r\n    }\r\n \r\n        useEffect(() => {\r\n            handleSetPrice()\r\n     \r\n            return () => {\r\n                \r\n            }\r\n        },[])\r\n\r\n   const handleCancel=async()=>{\r\n   \r\n    const    newInventoryModule={\r\n        selectedInventory:{},\r\n        show :'detail'\r\n      }\r\n        await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n            const    newInventoryModule={\r\n                selectedInventory:{},\r\n                show :'detail'\r\n            }\r\n        setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n\r\n        }\r\n\r\n\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Inventory._id\r\n        if (conf){\r\n             \r\n        InventoryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Inventory successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Inventory deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Inventory, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n       // data.facility=Inventory.facility\r\n          //console.log(data);\r\n          const contractSel= billservice.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n          contractSel[0].price=data.price \r\n          billServ.patch(billservice._id,billservice)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Inventory successfully\")\r\n                 toast({\r\n                    message: 'Price updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Price, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            }) \r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Set Price for {Inventory.name} per {Inventory.baseunit}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> New Selling Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"price\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Old Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"oldprice\" type=\"text\" placeholder=\"Inventory Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n           \r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='name' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\FinanceStore.js",["252","253","254","255","256","257","258","259"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\ProductEntry.js",["260","261","262","263","264","265","266"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function ProductEntry() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ProductEntryList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ProductEntryModule.show ==='create')&&<ProductEntryCreate />}\r\n                {(state.ProductEntryModule.show ==='detail')&&<ProductEntryDetail  />}\r\n                {(state.ProductEntryModule.show ==='modify')&&<ProductEntryModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductEntryCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Purchase Invoice\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(\"\")\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [baseunit,setBaseunit] = useState(\"\")\r\n    const [quantity,setQuantity] = useState()\r\n    const [costprice,setCostprice] = useState()\r\n    const [productItem,setProductItem] = useState([])\r\n    const {state}=useContext(ObjectContext)\r\n    \r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const productItemI={\r\n        productId,\r\n        name,\r\n        quantity,\r\n        costprice,\r\n        amount:quantity*costprice,\r\n        baseunit\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setProductId(obj._id)\r\n        setName(obj.name)\r\n        setBaseunit(obj.baseunit)\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n    const handleClickProd=async()=>{\r\n        await setSuccess(false)\r\n        setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n        setName(\"\")\r\n        setBaseunit(\"\")\r\n        setQuantity(\"\")\r\n        setCostprice(\"\")\r\n       await setSuccess(true)\r\n       console.log(success)\r\n       console.log(productItem)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const resetform=()=>{\r\n     setType(\"Purchase Invoice\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setBaseunit()\r\n    setCostprice()\r\n    setProductItem([])\r\n    }\r\n\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        await setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n        productEntry.productitems=productItem\r\n        productEntry.createdby=user._id\r\n        productEntry.transactioncategory=\"credit\"\r\n\r\n          console.log(\"b4 facility\",productEntry);\r\n          if (user.currentEmployee){\r\n         productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }else{\r\n            toast({\r\n                message: 'You can not add inventory to any organization',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n          }\r\n          if (state.StoreModule.selectedStore._id){\r\n            productEntry.storeId=state.StoreModule.selectedStore._id\r\n          }else{\r\n            toast({\r\n                message: 'You need to select a store before adding inventory',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n\r\n          }\r\n          console.log(\"b4 create\",productEntry);\r\n        ProductEntryServ.create(productEntry)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                resetform()\r\n               /*  setMessage(\"Created ProductEntry successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'ProductEntry created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create ProductEntry: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n            <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n            <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType}>\r\n                           <option value=\"\">Choose Type </option>\r\n                            <option value=\"Purchase Invoice\">Purchase Invoice </option>\r\n                            <option value=\"Initialization\">Initialization</option>\r\n                            <option value=\"Audit\">Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"supplier\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n           \r\n            </div>\r\n            </div> {/* horizontal end */}\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                    <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n               <div className=\"field is-horizontal\">\r\n               <div className=\"field-body\">\r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={async e=> await setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-coins\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n\r\n                </div> \r\n                </div> \r\n               \r\n                </form>   \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Product Items:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={e=>setQuantity(e.target.value)} placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n        <label >{baseunit}</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"costprice\" value={costprice} type=\"text\" onChange={e=>setCostprice(e.target.value)} placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-dollar-sign\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n            \r\n       {(productItem.length>0) && <div>\r\n            <label>Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Create\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductEntryList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProductEntry, setSelectedProductEntry]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedProductEntry(ProductEntry)\r\n\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductEntryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                storeId:state.StoreModule.selectedStore._id,\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProductEntry= await ProductEntryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProductEntry.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        /* toast({\r\n                            message: 'You do not qualify to view this',\r\n                            type: 'is-danger',\r\n                            dismissible: true,\r\n                            pauseOnHover: true,\r\n                          }) \r\n                          return */\r\n                        const findProductEntry= await ProductEntryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProductEntry.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" ProductEntry  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (!state.StoreModule.selectedStore){\r\n                    toast({\r\n                        message: 'kindly select a store',\r\n                        type: 'is-danger',\r\n                        dismissible: true,\r\n                        pauseOnHover: true,\r\n                      }) \r\n                      return\r\n                    getFacilities()\r\n\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductEntryServ.on('created', (obj)=>getFacilities())\r\n                ProductEntryServ.on('updated', (obj)=>getFacilities())\r\n                ProductEntryServ.on('patched', (obj)=>getFacilities())\r\n                ProductEntryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                console.log(\"store changed\")\r\n                return () => {\r\n                   \r\n                }\r\n            }, [state.StoreModule.selectedStore])\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {state.StoreModule.selectedStore?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search ProductEntry\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Product Additions to Inventory </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th>Source</th>\r\n                                        <th><abbr title=\"Document No\">Document No</abbr></th>\r\n                                        <th><abbr title=\"Total Amount\">Total Amount</abbr></th>\r\n                                        <th><abbr title=\"Enteredby\">Entered By</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{ProductEntry.date}</td>\r\n                                            <th>{ProductEntry.type}</th>\r\n                                            <td>{ProductEntry.source}</td>\r\n                                            <td>{ProductEntry.documentNo}</td>\r\n                                            <td>{ProductEntry.totalamount}</td>\r\n                                            <td>{ProductEntry.enteredby}</td>\r\n                                            <td><span className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading... Choose a Store</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductEntryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductEntryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductEntryModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" onClick={handleAddproduct}> <span>Add {val} to product list</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.name}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        <ProductCreate />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\ProductExit.js",["267","268","269","270","271","272","273","274","275","276","277","278","279"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicStore.js",["280","281","282","283","284","285","286","287"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Clinic.js",["288","289","290","291","292"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\ClientBill.js",["293","294","295","296","297","298","299","300","301","302","303","304","305"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillDispenseCreate.js",["306","307","308","309","310","311","312","313","314"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\EncounterMain.js",["315","316","317","318","319","320","321","322"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\helpers\\FacilityPopup.js",["323","324"],"import React, {useState,useContext, useEffect} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\n\r\nexport function Facility() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedFacility,setSelectedFacility]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    //console.log(\"facility parent\", state)\r\n    \r\n\r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Facility  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n              {/*   <FacilityList /> */}\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n               {/*  {(state.facilityModule.show ==='create')&&<FacilityCreate />}\r\n                {(state.facilityModule.show ==='detail')&&<FacilityDetail  />}\r\n                {(state.facilityModule.show ==='modify')&&<FacilityModify facility={selectedFacility} />} */}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function FacilityCreate(){\r\n    const { register, handleSubmit} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n\r\n    \r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n                setMessage(\"Created facility successfully\")\r\n                setSuccess(true)\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n        <section className= \"section remPadTop\">\r\n        <div className=\"columns \">\r\n        <div /* className=\"column is-4 \" */>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Facility\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        </section>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport default function FacilityPopup({facilityType,closeModal}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const facilityServ=client.service('facility')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedFacility, setSelectedFacility]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n\r\n   \r\n\r\n  /*   const handleCreateNew = async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    } */\r\n    const handleRow= async(facility)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",facility)\r\n\r\n        await setSelectedFacility(facility)\r\n\r\n        const    newfacilityModule={\r\n            selectedDestination:facility,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DestinationModule:newfacilityModule}))\r\n       //console.log(state)\r\n       closeModal()\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='facilityName'\r\n       console.log(val)\r\n       facilityServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                facilityType,\r\n                $limit:10,\r\n                $sort: {\r\n                    facilityName: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" facility  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n\r\n           /*  if (val.length>2){\r\n                console.log(\"in\")\r\n               \r\n            }\r\n\r\n        }\r\n     */\r\n        const getFacilities=()=>{\r\n            facilityServ.find({query: {\r\n                facilityType,\r\n                $limit:20,\r\n                $sort: {\r\n                    facilityName: 1\r\n                  }\r\n                    }})\r\n            .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" facility  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                    setError(true)\r\n                })\r\n\r\n        }\r\n\r\n    useEffect(() => {\r\n        getFacilities()\r\n\r\n        facilityServ.on('created', (obj)=>getFacilities())\r\n        facilityServ.on('updated', (obj)=>getFacilities())\r\n        facilityServ.on('patched', (obj)=>getFacilities())\r\n        facilityServ.on('removed', (obj)=>getFacilities())\r\n        return () => {\r\n           \r\n        }\r\n    },[])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n            <>  \r\n            <section className= \"section remPadTop\">\r\n            <div /* className=\"columns \" */>\r\n            <div /* className=\"column is-4 \" */>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Facilities </span></div>\r\n                    {/* <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div> */}\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"S/No\">S/No</abbr></th>\r\n                                        <th>Facility Name</th>\r\n                                        <th><abbr title=\"Address\"> Address</abbr></th>\r\n                                        <th><abbr title=\"City\">City</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th><abbr title=\"Category\">Category</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((facility, i)=>(\r\n\r\n                                            <tr key={facility._id} onClick={()=>handleRow(facility)} className={facility._id===(selectedFacility?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{facility.facilityName}</th>\r\n                                            <td>{facility.facilityAddress}</td>\r\n                                            <td>{facility.facilityCity}</td>\r\n                                            <td>{facility.facilityContactPhone}</td>\r\n                                            <td>{facility.facilityEmail}</td>\r\n                                            <td>{facility.facilityType}</td>\r\n                                            <td>{facility.facilityCategory}</td>\r\n                                           \r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div> \r\n                </div> \r\n                </div> \r\n                </section>              \r\n            </>\r\n              \r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillPrescriptionCreate.js",["325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\nimport Encounter from '../EncounterMgt/Encounter';\r\nvar random = require('random-string-generator');\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\nexport default function BillPrescriptionCreate(){\r\n    // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n     //const [error, setError] =useState(false)\r\n     const [success, setSuccess] =useState(false)\r\n     const [message,setMessage] = useState(\"\")\r\n     // eslint-disable-next-line\r\n     const [facility,setFacility] = useState()\r\n     const ProductEntryServ=client.service('productentry')\r\n     const OrderServ=client.service('order')\r\n     //const history = useHistory()\r\n     const {user} = useContext(UserContext) //,setUser\r\n     // eslint-disable-next-line\r\n     const [currentUser,setCurrentUser] = useState()\r\n     const [type,setType] = useState(\"Bill\")\r\n     const [documentNo,setDocumentNo] = useState(\"\")\r\n     const [totalamount,setTotalamount] = useState(0)\r\n     const [qamount,setQAmount] = useState(null)\r\n     const [productId,setProductId] = useState(\"\")\r\n     const [source,setSource] = useState(\"\")\r\n     const [date,setDate] = useState(\"\")\r\n     const [name,setName] = useState(\"\")\r\n     const [inventoryId,setInventoryId] = useState(\"\")\r\n     const [baseunit,setBaseunit] = useState(\"\")\r\n     const [quantity,setQuantity] = useState(\"\")\r\n     const [sellingprice,setSellingPrice] = useState(\"\")\r\n     const [costprice,setCostprice] = useState(0)\r\n     const [invquantity,setInvQuantity] = useState(\"\")\r\n     const [calcamount,setCalcAmount] = useState(0)\r\n     const [productItem,setProductItem] = useState([])\r\n      const [billingId,setBilllingId]=useState(\"\")  \r\n      const [changeAmount, setChangeAmount] = useState(true)\r\n      const [paymentmode, setPaymentMode] = useState(\"\")\r\n      const [paymentOptions, setPaymentOptions]=useState([])\r\n      const [billMode, setBillMode]=useState(\"\")\r\n      const [productModal, setProductModal]=useState(false)\r\n      const [obj, setObj]=useState(\"\")\r\n     \r\n     const {state,setState}=useContext(ObjectContext)\r\n     const inputEl = useRef(0);\r\n     let calcamount1\r\n     let hidestatus\r\n  \r\n\r\n    \r\n  let medication =state.medicationModule.selectedMedication\r\n\r\n\r\n  const showDocumentation = async (value)=>{\r\n    setProductModal(true)\r\n  }\r\n  const handlecloseModal =()=>{\r\n    setProductModal(false)\r\n   // handleSearch(val)\r\n    }\r\n\r\n\r\n    const handleChangeMode= async(value)=>{\r\n        console.log(value)\r\n       await setPaymentMode(value)\r\n        console.log(paymentOptions)\r\n       let billm= paymentOptions.filter(el=>el.name===value)\r\n       await setBillMode(billm)\r\n        console.log(billm)\r\n        // at startup\r\n        // check payment mode options from patient financial info\r\n        // load that to select options\r\n        // default to HMO-->company-->family-->cash\r\n        //when chosen\r\n        //append payment mode to order\r\n        //check service contract for pricing info\r\n        // calculate pricing \r\n        // pricing\r\n\r\n\r\n    }\r\n\r\n    const handleRow= async(ProductEntry)=>{\r\n    //console.log(\"b4\",state)\r\n\r\n    //console.log(\"handlerow\",ProductEntry)\r\n\r\n    //await setMedication(ProductEntry)\r\n\r\n    const    newProductEntryModule={\r\n        selectedMedication:ProductEntry,\r\n        show :'detail'\r\n    }\r\n  await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n   //console.log(state)\r\n  // ProductEntry.show=!ProductEntry.show\r\n\r\n        } \r\n \r\n     const [productEntry,setProductEntry]=useState({\r\n         productitems:[],\r\n         date,\r\n         documentNo,\r\n         type,\r\n         totalamount,\r\n         source,\r\n \r\n     })\r\n  \r\n     const productItemI={\r\n         productId,\r\n         name,\r\n         quantity,\r\n         sellingprice,\r\n         amount:calcamount, //||qamount\r\n         baseunit,\r\n         costprice,\r\n         billingId\r\n \r\n     }\r\n     // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n     //consider baseunoit conversions\r\n     const getSearchfacility=async (obj)=>{\r\n       await setObj(obj)\r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setProductId(\"\")\r\n            setName(\"\")\r\n            setBaseunit(\"\")\r\n            setInventoryId(\"\")\r\n            setSellingPrice(\"\")\r\n            setInvQuantity(\"\")\r\n            setQAmount(null)\r\n            setCostprice(\"\")\r\n           // setCalcAmount(null)\r\n            return\r\n        }\r\n \r\n         setProductId(obj.productId)\r\n         setName(obj.name)\r\n         setBaseunit(obj.baseunit)\r\n         setInventoryId(obj.inventoryId)\r\n         setSellingPrice(obj.sellingprice) //modify this based on billing mode\r\n         setInvQuantity(obj.quantity)\r\n         setCostprice(obj.costprice)\r\n         setBilllingId(obj.billingId)\r\n\r\n         const contracts=obj.billingDetails.contracts\r\n         //const billingserv=client.service('billing')\r\n        if( billMode.type===\"HMO Cover\"){ //paymentmode\r\n         let contract=contracts.filter(el=>el.source_org===billMode.detail.hmo)\r\n         if (contract.length){\r\n            console.log(contract[0].price)\r\n            setSellingPrice(contract[0].price)\r\n            console.log(sellingprice)\r\n         }else{\r\n            toast({\r\n                message: 'Please HMO does not have cover/price for this drug. Either set drug price for HMO or try another drug or bill using cash',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n              setSellingPrice(0)\r\n         }\r\n        \r\n        \r\n        }\r\n        if( billMode.type===\"Company Cover\"){ //paymentmode\r\n            let contract=contracts.filter(el=>el.source_org===billMode.detail.company)\r\n            if (contract.length){\r\n            console.log(contract[0].price)\r\n            setSellingPrice(contract[0].price)\r\n            console.log(sellingprice)\r\n           \r\n           }else{\r\n\r\n            toast({\r\n                message: 'Please company does not have cover/price for this drug. Either set drug price for Company or try another drug or bill using cash',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n              setSellingPrice(0)   \r\n         }\r\n          \r\n        /*  setValue(\"facility\", obj._id,  {\r\n             shouldValidate: true,\r\n             shouldDirty: true\r\n         }) */\r\n     }\r\n    }\r\n     useEffect(() => {\r\n       /*  console.log(obj)\r\n        console.log(billMode)\r\n        if( paymentmode!==\"Cash\" && obj){\r\n            const contracts=obj.billingDetails.contracts\r\n            let contract=contracts.filter(el=>el.source_org===billMode.detail.hmo)\r\n           console.log(contract[0].price)\r\n           setSellingPrice(contract[0].price)\r\n           console.log(sellingprice)\r\n       }\r\n         return () => {\r\n            \r\n         } */\r\n     }, [obj])\r\n\r\n     useEffect(() => {\r\n         setCurrentUser(user)\r\n         //console.log(currentUser)\r\n         return () => {\r\n         \r\n         }\r\n     }, [user])\r\n \r\n     const handleUpdateTotal=async ()=>{\r\n        await setTotalamount(prevtotal=>Number(prevtotal) + Number(calcamount))\r\n     }\r\n \r\n     const handleChangeType=async (e)=>{\r\n         console.log(e.target.value)\r\n         await setType(e.target.value)\r\n     }\r\n \r\n     const handleAmount= async()=>{\r\n         await setQAmount(null)\r\n        // alert(\"Iam chaning qamount\")\r\n     }\r\n\r\n     const handleClickProd=async()=>{\r\n       /*   console.log(\"amount: \",productItemI.amount)\r\n         console.log(\"qamount: \",qamount)\r\n         console.log(\"calcamount: \",calcamount) */\r\n        if ( quantity===0||quantity===\"\"|| productId===\"\"){\r\n            toast({\r\n                message: 'You need to choose a product and quantity to proceed',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return \r\n        }\r\n\r\n         await setSuccess(false)\r\n         await setProductItem(\r\n             prevProd=>prevProd.concat(productItemI)\r\n         )\r\n        handleUpdateTotal()\r\n            // generate billing info\r\n            const billInfo={\r\n                orderInfo:{\r\n                    orderId:medication._id,\r\n                    orderObj:medication,\r\n                  },\r\n                  serviceInfo:{            \r\n                    price: productItemI.sellingprice,\r\n                    quantity: productItemI.quantity,\r\n                    productId: productItemI.productId,\r\n                    name: productItemI.name,\r\n                    baseunit: productItemI.baseunit,\r\n                    amount:productItemI.amount,\r\n                    billingId:productItemI.billingId,\r\n                    createdby:user._id,\r\n                  },\r\n                  paymentInfo:{\r\n                    amountDue:productItemI.amount,\r\n                    paidup:0,\r\n                    balance:productItemI.amount,\r\n                    paymentDetails:[]\r\n              \r\n                  },\r\n                  participantInfo:{\r\n                    billingFacility:medication.destination,\r\n                    billingFacilityName:medication.destination_name,\r\n                    locationId:state.StoreModule.selectedStore._id, //selected location,\r\n                    clientId:medication.clientId,\r\n                    client:medication.client,\r\n                    paymentmode:billMode\r\n                  },\r\n                  createdBy:user.id,\r\n                  billing_status:\"Unpaid\"\r\n                }\r\n\r\n        //update order\r\n        \r\n        OrderServ.patch(medication._id,{\r\n            order_status:\"Billed\", //Billed\r\n            billInfo,\r\n        }).then((resp)=>{\r\n           // medication=resp\r\n           // console.log(resp)\r\n             handleRow(resp) \r\n            //update dispense\r\n\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n        \r\n        //update status(billed) + action()\r\n        //?attached chosen product to medication\r\n        //dispense helper?\r\n         setName(\"\")\r\n         setBaseunit(\"\")\r\n         setQuantity(\"\")\r\n         setInventoryId(\"\")\r\n         setSellingPrice(\"\")\r\n         setInvQuantity(\"\")\r\n             handleAmount()\r\n        // setCalcAmount(null)\r\n        await setSuccess(true)\r\n        /* console.log(success)\r\n        console.log(qamount)\r\n        console.log(productItem) */\r\n        setChangeAmount(true)\r\n     }\r\n   //check user for facility or get list of facility  \r\n    /*  useEffect(()=>{\r\n         //setFacility(user.activeProductEntry.FacilityId)//\r\n       if (!user.stacker){\r\n           console.log(currentUser)\r\n            /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n             shouldValidate: true,\r\n             shouldDirty: true\r\n         })  \r\n \r\n       }\r\n     }) */\r\n \r\n     const handleQtty=async(e)=>{\r\n         if (invquantity<e.target.value){\r\n             toast({\r\n                 message: 'You can not sell more quantity than exist in inventory ' ,\r\n                 type: 'is-danger',\r\n                 dismissible: true,\r\n                 pauseOnHover: true,\r\n               })\r\n             return\r\n         }\r\n         setQuantity(e.target.value)\r\n         calcamount1=quantity*sellingprice\r\n         await setCalcAmount(calcamount1)\r\n         console.log(calcamount)\r\n     }\r\n \r\n     useEffect( () => {\r\n          setProductEntry({\r\n             \r\n             date,\r\n             documentNo,\r\n             type,\r\n             totalamount,\r\n             source,\r\n         })\r\n        setCalcAmount(quantity*sellingprice) \r\n         return () => {\r\n             \r\n         }\r\n     },[date])\r\n \r\n     const resetform=()=>{\r\n      setType(\"Sales\")\r\n     setDocumentNo(\"\")\r\n     setTotalamount(\"\")\r\n     setProductId(\"\")\r\n     setSource(\"\")\r\n     setDate(\"\")\r\n     setName(\"\")\r\n     setBaseunit()\r\n     setCostprice()\r\n     setProductItem([])\r\n     }\r\n\r\n\r\n     const handleMedicationDone= async()=>{ //handle selected single order\r\n        //console.log(\"b4\",state)\r\n    \r\n        //console.log(\"handlerow\",ProductEntry)\r\n    \r\n       // await setSelectedMedication(\"\")\r\n    \r\n        const    newProductEntryModule={\r\n            selectedMedication:{},\r\n            show :'create'\r\n        }\r\n      await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n       //console.log(state)\r\n      // ProductEntry.show=!ProductEntry.show\r\n    \r\n    }\r\n \r\n     const onSubmit = async(e) =>{\r\n         e.preventDefault();\r\n         setMessage(\"\")\r\n         //setError(false)\r\n         setSuccess(false)\r\n         await setProductEntry({\r\n             \r\n             date,\r\n             documentNo,\r\n             type,\r\n             totalamount,\r\n             source,\r\n         })\r\n         productEntry.productitems=productItem\r\n         productEntry.createdby=user._id\r\n         productEntry.transactioncategory=\"debit\"\r\n        \r\n          // console.log(\"b4 facility\",productEntry);\r\n           if (user.currentEmployee){\r\n          productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n           }else{\r\n             toast({\r\n                 message: 'You can not remove inventory from any organization',\r\n                 type: 'is-danger',\r\n                 dismissible: true,\r\n                 pauseOnHover: true,\r\n               }) \r\n               return\r\n           }\r\n           \r\n           if (state.StoreModule.selectedStore._id){\r\n             productEntry.storeId=state.StoreModule.selectedStore._id\r\n           }else{\r\n             toast({\r\n                 message: 'You need to select a store before removing inventory',\r\n                 type: 'is-danger',\r\n                 dismissible: true,\r\n                 pauseOnHover: true,\r\n               }) \r\n               return\r\n \r\n           }\r\n           //console.log(\"b4 create\",productEntry);\r\n        // ProductEntryServ.create(productEntry)\r\n         //.then((res)=>{\r\n                 //console.log(JSON.stringify(res))\r\n           //      resetform()\r\n                /*  setMessage(\"Created ProductEntry successfully\") */\r\n             //    setSuccess(true)\r\n               //  toast({\r\n                  /*    message: 'ProductExit created succesfully',\r\n                     type: 'is-success',\r\n                     dismissible: true,\r\n                     pauseOnHover: true,\r\n                   })\r\n                   setSuccess(false)\r\n                   setProductItem([])\r\n                   const today=new Date().toLocaleString()\r\n       \r\n                   setDate(today)\r\n                   const invoiceNo=random(6,'uppernumeric')\r\n                 setDocumentNo(invoiceNo)\r\n                 setType(\"Sales\")\r\n             })\r\n             .catch((err)=>{\r\n                 toast({\r\n                     message: 'Error creating ProductExit ' + err,\r\n                     type: 'is-danger',\r\n                     dismissible: true,\r\n                     pauseOnHover: true,\r\n                   })\r\n             }) */\r\n \r\n       } \r\n \r\n    // console.log(\"i am rendering\")\r\n   /*   useEffect(() => {\r\n         setMedication(state.medicationModule.selectedMedication)\r\n        // console.log(medication)\r\n         return () => {\r\n             \r\n         }\r\n     }, [state])\r\n  */\r\n    const handleChangeAmount=()=>{\r\n        setChangeAmount((rev)=>(!rev))\r\n        \r\n    }\r\n\r\n    const newclient=async ()=>{\r\n        await  setProductItem([])\r\n    }\r\n\r\n    useEffect(() => {\r\n        const oldname=medication.clientname\r\n        console.log(\"oldname\",oldname)\r\n        setSource(medication.clientname)\r\n\r\n        const newname=source\r\n        console.log(\"newname\",newname)\r\n        if (oldname!==newname){\r\n            //newdispense\r\n        \r\n        setProductItem([])\r\n        setTotalamount(0)\r\n\r\n        }\r\n       \r\n\r\n        const paymentoptions= []\r\n        const info = medication.client.paymentinfo\r\n        let billme={}\r\n       \r\n        if( medication.client.paymentinfo.cash===true){\r\n            const details={}\r\n            details.detail=  info.cashDetails\r\n            details.type=\"Cash\"\r\n            const obj={\r\n                name:\"Cash\",\r\n                value:\"Cash\",\r\n                detail:details,\r\n                type:\"Cash\"\r\n            }\r\n            paymentoptions.push(obj)\r\n            setPaymentMode(\"Cash\")\r\n            billme=obj\r\n        }\r\n        if( medication.client.paymentinfo.familyCover===true){\r\n            const details={}\r\n            details.detail=  info.familyDetails\r\n            details.type=\"Family Cover\"\r\n            const obj={\r\n                name:\"Family Cover\",\r\n                value:\"familyCover\",\r\n                detail:details,\r\n                type:\"Family Cover\"\r\n            }\r\n            paymentoptions.push(obj)\r\n            setPaymentMode(\"Family Cover\")\r\n            billme=obj\r\n            \r\n        }\r\n        if( medication.client.paymentinfo.companyCover===true){\r\n            const details={}\r\n            details.type=\"Company Cover\"\r\n            details.detail=  info.companyDetails.filter(el=>el.active===true)\r\n            details.detail.forEach(el=>{\r\n                const obj={\r\n                    name:\"Company: \" +el.companyName +\"(\"+el.companyPlan+\")\",\r\n                    value:\"companyCover\",\r\n                    detail:el,\r\n                    type:\"Company Cover\" \r\n                }\r\n                paymentoptions.push(obj)\r\n                setPaymentMode(\"Company: \" +el.companyName +\"(\"+el.companyPlan+\")\")\r\n               // console.log(\"Company: \" +el.companyName +\"(\"+el.companyPlan+\")\")\r\n               billme=obj\r\n            })\r\n        }\r\n\r\n        if( medication.client.paymentinfo.hmoCover===true){\r\n            \r\n            const details={}\r\n            details.type=\"HMO Cover\"\r\n            details.detail=  info.hmoDetails.filter(el=>el.active===true)\r\n            details.detail.forEach(el=>{\r\n                const obj={\r\n                    name:\"HMO: \" +el.hmoName +\"(\"+el.hmoPlan+\")\",\r\n                    value:\"hmoCover\",\r\n                    detail:el,\r\n                    type:\"HMO Cover\"\r\n                }\r\n                paymentoptions.push(obj)\r\n                setPaymentMode(\"HMO: \" +el.hmoName +\"(\"+el.hmoPlan+\")\")\r\n                //console.log(\"HMO: \" +el.hmoName +\"(\"+el.hmoPlan+\")\")\r\n                billme=obj\r\n            })\r\n         \r\n        }\r\n        setPaymentOptions(paymentoptions)\r\n        setBillMode(billme)\r\n       console.log(paymentoptions)\r\n        console.log(billMode)\r\n        return () => {\r\n           \r\n        }\r\n    }, [medication])\r\n\r\n     useEffect(() => {\r\n       // const medication =state.medicationModule.selectedMedication\r\n         const today=new Date().toLocaleString()\r\n         console.log(today)\r\n         setDate(today)\r\n         const invoiceNo=random(6,'uppernumeric')\r\n         setDocumentNo(invoiceNo)\r\n         return () => {\r\n             \r\n         }\r\n     }, [])\r\n\r\n     useEffect(() => {\r\n        calcamount1=quantity*sellingprice\r\n         setCalcAmount(calcamount1)\r\n         console.log(calcamount)\r\n         setChangeAmount(true)\r\n        return () => {\r\n            \r\n        }\r\n    }, [quantity])\r\n\r\n// console.log(\"simpa\")\r\n     return (\r\n         <>\r\n             <div className=\"card card-overflow\">\r\n             <div className=\"card-header\">\r\n                 <p className=\"card-header-title\">\r\n                     Bill Product\r\n                 </p>\r\n                 <button className=\"button is-success is-small btnheight mt-2\" onClick={showDocumentation}>Documentation</button>\r\n             </div>\r\n             <div className=\"card-content \">\r\n    \r\n             <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n             <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n            {/*  <div className=\"field\">    \r\n                 <div className=\"control\">\r\n                     <div className=\"select is-small\">\r\n                         <select name=\"type\" value={type} onChange={handleChangeType} className=\"selectadd\">\r\n                            <option value=\"\">Choose Type </option>\r\n                             <option value=\"Dispense\">Dispense</option>\r\n                             <option value=\"Bill\">Bill </option> */}\r\n                             {/* <option value=\"Dispense\">Dispense</option>\r\n                             <option value=\"Audit\">Audit</option> */}\r\n                 {/*         </select>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n */}\r\n             <div className=\"field\">\r\n                     <p className=\"control has-icons-left has-icons-right\">\r\n                         <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"client\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Client\" />\r\n                         <span className=\"icon is-small is-left\">\r\n                             <i className=\"fas fa-hospital\"></i>\r\n                         </span>                    \r\n                     </p>\r\n                 </div>\r\n                 <div className=\"field\">    \r\n                 <div className=\"control\">\r\n                     <div className=\"select is-small \">\r\n                         <select name=\"paymentmode\" value={paymentmode} onChange={(e)=>handleChangeMode(e.target.value)} className=\"selectadd\" >\r\n                         <option value=\"\">Billing Mode </option>\r\n                           {paymentOptions.map((option,i)=>(\r\n                               <option key={i} value={option.details}> {option.name}</option>\r\n                           ))}\r\n                           \r\n                            \r\n                            {/*  <option value=\"Cash\">Cash</option>\r\n                             <option value=\"Family\">Family </option>\r\n                            <option value=\"Company Cover\">Company Cover</option>\r\n                             <option value=\"HMO\">HMO</option> */}\r\n                         </select>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n            \r\n             </div>\r\n             </div> {/* horizontal end */}\r\n            {/*  <div className=\"field\">\r\n                 <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                     <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\" fas fa-user-md \"></i>\r\n                     </span>\r\n                 </p>\r\n             </div> */}\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                 <p className=\"control has-icons-left has-icons-right\">\r\n                     <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                     <span className=\"icon is-small is-left\">\r\n                         <i className=\"fas fa-map-signs\"></i>\r\n                     </span>\r\n                 </p>\r\n             </div>\r\n             <div className=\"field\">\r\n                 <p className=\"control has-icons-left\">\r\n                     <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-phone-alt\"></i>\r\n                     </span>\r\n                 </p>\r\n             </div>\r\n             <div className=\"field\">\r\n                 <p className=\"control has-icons-left\">\r\n                     <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={e=>setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-coins\"></i>\r\n                     </span>\r\n                 </p>\r\n             </div>\r\n \r\n                 </div> \r\n                 </div> \r\n                \r\n                 </form>   \r\n                \r\n            \r\n          {/* array of ProductEntry items */}\r\n         \r\n         <label className=\"label is-small\">Medication:</label>\r\n         <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n             <div className=\"field\" style={{width:\"40%\"}}>\r\n                 <p className=\"control has-icons-left\" >\r\n                     <input className=\"input is-small\"  /* ref={register({ required: true })} */ disabled  name=\"order\" value={medication.order} type=\"text\" onChange={ e=> handleQtty(e)} placeholder=\"Quantity\"  />\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-hashtag\"></i>\r\n                     </span>\r\n                     <span className=\"helper is-size-7\"><strong>Instruction: </strong>{medication.instruction}</span>\r\n                    \r\n                 </p>\r\n                 <span className=\"helper is-size-7\"><strong>Billing Status: </strong>{medication.order_status}</span>\r\n             </div> \r\n            \r\n             </div>\r\n             </div>\r\n             <label className=\"label is-small\">Choose Product Item:</label>\r\n          <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n             <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                     <InventorySearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                     <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                         <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                         <span className=\"icon is-small is-left\">\r\n                         <i className=\"fas  fa-map-marker-alt\"></i>\r\n                         </span>\r\n                     </p>\r\n                  {sellingprice &&   \"N\"}{sellingprice} {sellingprice &&   \"per\"}  {baseunit} {invquantity} {sellingprice &&   \"remaining\"} \r\n                 </div>\r\n             </div>\r\n         </div>\r\n         <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\" >\r\n                 <div className=\"field\" style={{width:\"40%\"}}>\r\n                 <p className=\"control has-icons-left\" >\r\n                     <input className=\"input is-small\"  /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={ e=> handleQtty(e)} placeholder=\"Quantity\"  />\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-hashtag\"></i>\r\n                     </span>\r\n                    \r\n                 </p>\r\n         <label >{baseunit}</label>\r\n             </div> \r\n             <div className=\"field\">\r\n             <label>Amount:</label>{/* <p>{quantity*sellingprice}</p> */}\r\n             </div>\r\n             <div className=\"field\" style={{width:\"40%\"}}>\r\n                 <p className=\"control has-icons-left \" /* style={{display:\"none\"}} */>\r\n                     <input className=\"input is-small\"  name=\"qamount\" disabled={changeAmount} value={calcamount} type=\"text\"  onChange={async e=> await setCalcAmount(e.target.value)}  placeholder=\"Amount\"  />\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-dollar-sign\"></i>\r\n                     </span>\r\n                 </p>\r\n                 <button className=\"button is-small is-success btnheight\" onClick={handleChangeAmount}>Adjust</button>\r\n \r\n             </div> \r\n             <div className=\"field\">\r\n             <p className=\"control\">\r\n                     <button className=\"button is-info is-small  is-pulled-right\">\r\n                       <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                     </button>\r\n                 </p>\r\n             </div>\r\n             </div>\r\n          </div>\r\n             \r\n        {(productItem.length>0) && <div>\r\n             <label>Product Items:</label>\r\n          <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                 <thead>\r\n                     <tr>\r\n                     <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                     <th><abbr title=\"Type\">Name</abbr></th>\r\n                     <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                     <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                     <th><abbr title=\"Cost Price\">Selling Price</abbr></th>\r\n                     <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                     <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                     </tr>\r\n                 </thead>\r\n                 <tfoot>\r\n                     \r\n                 </tfoot>\r\n                 <tbody>\r\n                    { productItem.map((ProductEntry, i)=>(\r\n                          <tr key={i}>\r\n                         <th>{i+1}</th>\r\n                         <td>{ProductEntry.name}</td>\r\n                         <th>{ProductEntry.quantity}</th>\r\n                         <td>{ProductEntry.baseunit}</td>\r\n                         <td>{ProductEntry.sellingprice}</td>\r\n                         <td>{ProductEntry.amount}</td>\r\n                         <td><span className=\"showAction\"  >x</span></td>\r\n                         </tr>\r\n                     ))}\r\n                 </tbody>\r\n                 </table>\r\n                 <div className=\"field mt-2 is-grouped\">\r\n                 <p className=\"control\">\r\n                     <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={handleMedicationDone}>\r\n                        Done\r\n                     </button>\r\n                 </p>\r\n                {/*  <p className=\"control\">\r\n                     <button className=\"button is-warning is-small\" disabled={!productItem.length>0} onClick={onSubmit} >\r\n                         Clear\r\n                     </button>\r\n                 </p> */}\r\n                 </div>\r\n                 </div>\r\n            \r\n             }\r\n             \r\n             \r\n             </div>\r\n             </div>\r\n             <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card  modalbkgrnd\">\r\n                                        <header className=\"modal-card-head  btnheight\">\r\n                                        <p className=\"modal-card-title\">Documentation</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body modalcolor\">\r\n                                      \r\n                                         <Encounter standalone=\"true\" />\r\n                                        </section> \r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer>  */}\r\n                                   </div>\r\n                                </div>      \r\n         </>\r\n     )\r\n    \r\n }\r\n\r\n export  function InventorySearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('inventory')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n   const {user} = useContext(UserContext) \r\n   const {state}=useContext(ObjectContext)\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n    }\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 facility: user.currentEmployee.facilityDetail._id,\r\n                 storeId: state.StoreModule.selectedStore._id,\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small  is-expanded\" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu expanded\" style={{width:\"100%\"}}>\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" /* onClick={handleAddproduct} */> <span> {val} is not in your inventory</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <div><span>{facility.name}</span></div>\r\n                                        <div><span><strong>{facility.quantity}</strong></span>\r\n                                        <span>{facility.baseunit}(s) remaining</span>\r\n                                        <span className=\"padleft\"><strong>Price:</strong> N{facility.sellingprice}</span></div>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Dispensary.js",["342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\n//import PaymentCreate from './PaymentCreate'\r\nimport PatientProfile from '../ClientMgt/PatientProfile'\r\n/* import {ProductCreate} from './Products' */\r\n// eslint-disable-next-line\r\n//const searchfacility={};\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemState,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\n\r\n// Demo styles, see 'Styles' section below for some notes on use.\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\nimport { ProductExitCreate } from './DispenseExit';\r\n//import BillPrescriptionCreate from './BillPrescriptionCreate';\r\n\r\n\r\n\r\nexport default function Dispense() {\r\n    //const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line\r\n   const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line\r\n  const [message, setMessage] = useState(\"\") \r\n   const BillServ=client.service('bills')\r\n   //const history = useHistory()\r\n  // const {user,setUser} = useContext(UserContext)\r\n   const [facilities,setFacilities]=useState([])\r\n    // eslint-disable-next-line\r\n  const [selectedOrders, setSelectedOrders]=useState([]) //\r\n   // eslint-disable-next-line\r\n   const {state,setState}=useContext(ObjectContext)\r\n   // eslint-disable-next-line\r\n   const {user,setUser}=useContext(UserContext)\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n                <div className=\"column is-6 \">\r\n                    <DispenseList />\r\n                    </div>\r\n              \r\n                <div className=\"column is-6 \">\r\n                \r\n                {(state.financeModule.show ==='detail')&& <ProductExitCreate />}\r\n                </div>\r\n               {/*  <div className=\"column is-3 \">\r\n                \r\n                {(state.financeModule.show ==='detail')&&<PatientProfile />}\r\n                </div> */}\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function DispenseList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n   const BillServ=client.service('bills')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedDispense, setSelectedDispense]=useState() //\r\n   const [selectedOrders, setSelectedOrders]=useState([]) \r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n    const [selectedFinance, setSelectedFinance] =useState(\"\")\r\n    const [expanded, setExpanded] =useState(\"\")\r\n    const [oldClient, setOldClient] =useState(\"\")\r\n\r\n    const handleSelectedClient= async(Client)=>{\r\n        // await setSelectedClient(Client)\r\n         const    newClientModule={\r\n             selectedClient:Client,\r\n             show :'detail'\r\n         }\r\n        await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n     }\r\n\r\n    const handleChoseClient= async(client,e, order)=>{\r\n        setOldClient(client.clientname)\r\n        let newClient=client.clientname\r\n        if(oldClient!==newClient){\r\n            //alert(\"New Client Onboard\")\r\n            //remove all checked clientsly\r\n            selectedOrders.forEach(el=>el.checked=\"\")\r\n            setSelectedOrders([])\r\n        }\r\n\r\n       // console.log(e.target.checked)\r\n        order.checked=e.target.checked\r\n        await handleSelectedClient(order.participantInfo.client)\r\n        //handleMedicationRow(order)\r\n        await setSelectedFinance(order)\r\n        const    newProductEntryModule={\r\n            selectedFinance:order,\r\n            show :'detail',\r\n            state:e.target.checked\r\n        }\r\n      await setState((prevstate)=>({...prevstate, financeModule:newProductEntryModule}))\r\n      if (e.target.checked){\r\n        await setSelectedOrders((prevstate)=>(prevstate.concat(order)))\r\n      }else{\r\n        setSelectedOrders( prevstate=>prevstate.filter(el=>el._id!==order._id))\r\n      }\r\n    \r\n       // console.log(selectedOrders)\r\n    }\r\n    const handleMedicationRow= async(ProductEntry,e)=>{ //handle selected single order\r\n        //console.log(\"b4\",state)\r\n        alert(\"Header touched\")\r\n    \r\n        //console.log(\"handlerow\",ProductEntry)\r\n       /* alert(ProductEntry.checked)*/\r\n       /*  ProductEntry.checked=!ProductEntry.checked */\r\n    \r\n       /*  await setSelectedFinance(ProductEntry)\r\n    \r\n        const    newProductEntryModule={\r\n            selectedFinance:ProductEntry,\r\n            show :'detail'\r\n\r\n        }\r\n      await setState((prevstate)=>({...prevstate, financeModule:newProductEntryModule})) */\r\n       //console.log(state)\r\n      // ProductEntry.show=!ProductEntry.show\r\n    \r\n    }\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n  \r\n\r\n    const handleSearch=(val)=>{\r\n       const field='name'\r\n       //console.log(val)\r\n       BillServ.find({query: {\r\n                order: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_status: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_category:\"Prescription\",\r\n               // storeId:state.StoreModule.selectedStore._id,\r\n               //facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }``\r\n                    }}).then((res)=>{\r\n               // console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n               // console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n    const getFacilities= async()=>{\r\n       \r\n            // console.log(\"here b4 server\")\r\n    const findProductEntry= await BillServ.find(\r\n            {query: {\r\n                'participantInfo.paymentmode.type':\"Cash\",\r\n                'participantInfo.billingFacility': user.currentEmployee.facilityDetail._id,\r\n                billing_status:{\r\n                    $ne: \"Unpaid\"\r\n                },\r\n               'orderInfo.orderObj.fulfilled':{\r\n                $ne:\"True\"\r\n               },\r\n                //billing_status:\"Fully Paid\",\r\n               // fulfilled:false,  \r\n                $limit:100,\r\n                $sort: {\r\n                    updatedAt: 1\r\n                }\r\n                }})\r\n\r\n            console.log(\"updatedorder\", findProductEntry.groupedOrder)\r\n            await setFacilities(findProductEntry.groupedOrder)\r\n          //  await setState((prevstate)=>({...prevstate, currentClients:findProductEntry.groupedOrder}))\r\n            }   \r\n    const handleRow= async(Client,e)=>{\r\n           // alert(expanded)\r\n              \r\n            }\r\n    //1.consider using props for global data\r\n    useEffect(() => {\r\n        // console.log(\"started\")\r\n            getFacilities()\r\n            BillServ.on('created', (obj)=>getFacilities())\r\n            BillServ.on('updated', (obj)=>getFacilities())\r\n            BillServ.on('patched', (obj)=>getFacilities())\r\n            BillServ.on('removed', (obj)=>getFacilities())\r\n            return () => {\r\n              cleanup()\r\n            \r\n            }\r\n            },[])\r\n\r\n    const cleanup =async ()=>{\r\n        const    newClientModule={\r\n            selectedClient:{},\r\n            show :'create'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n\r\n       const    newProductEntryModule={\r\n        selectedFinance:{},\r\n        show :'create',\r\n        state:\"\"\r\n    }\r\n  await setState((prevstate)=>({...prevstate, financeModule:newProductEntryModule}))\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        //changes with checked box\r\n        console.log(selectedOrders)\r\n        \r\n        return () => {\r\n            \r\n        }\r\n    }, [selectedOrders])\r\n\r\n    useEffect(() => {\r\n       if (state.financeModule.show===\"create\"){\r\n        selectedOrders.forEach(el=>el.checked=\"\")\r\n        setSelectedOrders([])\r\n\r\n       }\r\n        return () => {\r\n           \r\n        }\r\n    }, [state.financeModule.show])\r\n   \r\n \r\n\r\n    return(     \r\n            <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Medications\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Unpaid Bills </span></div>\r\n                     {/* <div className=\"level-right\">\r\n                       <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div> \r\n                    </div>*/}\r\n\r\n                </div>\r\n                <div className=\" pullup \">\r\n                    <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                    <Accordion allowZeroExpanded >\r\n                        {facilities.map((Clinic, i)=>(\r\n                            <AccordionItem  key={Clinic.client_id}  >\r\n                               <AccordionItemHeading >\r\n                                    <AccordionItemButton  >\r\n                                   {/*  <input type = \"checkbox\" name={Clinic.client_id}  />  */} \r\n                                    <strong> {i+1} {Clinic.clientname} {/* with {Clinic.bills.length} Unpaid bills. */} {/* Grand Total amount: N */}</strong> \r\n                                    </AccordionItemButton>\r\n                                </AccordionItemHeading>\r\n                                <AccordionItemPanel>\r\n                                    <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                                        <Accordion allowZeroExpanded>\r\n                                            {Clinic.bills.map((category, i)=>(\r\n                                                <AccordionItem  key={Clinic.client_id} >\r\n                                                    <AccordionItemHeading >\r\n                                                    <AccordionItemButton  >\r\n                                                   {/*  <input type = \"checkbox\" name={Clinic.client_id} onChange={(e)=>handleMedicationRow(Clinic,e)} />   */}\r\n                                                         {category.catName} with {category.order.length} Paid bill(s). {/* Total amount: N */}\r\n                                                    </AccordionItemButton>\r\n                                                    </AccordionItemHeading>\r\n                                                    <AccordionItemPanel>\r\n                                                        <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable mr-2\">\r\n                                                                <thead>\r\n                                                                    <tr>\r\n                                                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                                                        <th><abbr title=\"Description\">Description</abbr></th>\r\n                                                                    {/*  <th>Fulfilled</th> */}\r\n                                                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                                                        <th><abbr title=\"Amount\">Amount</abbr></th>\r\n                                                                    </tr>\r\n                                                                </thead>\r\n                                                                <tbody>\r\n                                                     { category.order.map((order, i)=>(\r\n\r\n                                                        <tr key={order._id}  /*  onClick={()=>handleMedicationRow(order)} */  className={order._id===(selectedFinance?._id||null)?\"is-selected\":\"\"}>                                         \r\n                                                        <th><input type = \"checkbox\" name={order._id} onChange={(e)=>handleChoseClient(Clinic,e, order)}  checked={order.checked}/>  {i+1}</th>\r\n                                                        <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                                        <th>{order.serviceInfo.name}</th>\r\n                                                       {/*  <td>{order.fulfilled?\"Yes\":\"No\"}</td> */}\r\n                                                        <td>{order.billing_status}</td>\r\n                                                        <td>{order.serviceInfo.amount}</td>\r\n                                                        </tr>\r\n                                                ))}\r\n                                            </tbody>\r\n                                            </table>\r\n\r\n                                                    </AccordionItemPanel>                                          \r\n                                                </AccordionItem>\r\n                                            ))}\r\n                                        </Accordion>\r\n                                    </div>\r\n                                </AccordionItemPanel>                    \r\n                            </AccordionItem >\r\n                        ))}\r\n                    </Accordion >\r\n                    </div>  \r\n                </div>\r\n            </>          \r\n    )\r\n    }\r\n\r\n\r\nexport function DispenseDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    const [selectedMedication, setSelectedMedication] =useState(\"\")\r\n    const [currentOrder, setCurrentOrder] =useState(\"\")\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const BillServ=client.service('order')\r\n    /* const [ProductEntry, setProductEntry] = useState(\"\")\r\n    const [facilities, setFacilities] = useState(\"\") */\r\n\r\n let ProductEntry =state.DispenseModule.selectedDispense\r\n   //const facilities=ProductEntry.orders\r\n\r\n   const handleRow= async(ProductEntry)=>{\r\n    //console.log(\"b4\",state)\r\n\r\n    //console.log(\"handlerow\",ProductEntry)\r\n\r\n    await setSelectedMedication(ProductEntry)\r\n\r\n    const    newProductEntryModule={\r\n        selectedMedication:ProductEntry,\r\n        show :'detail'\r\n    }\r\n  await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n   //console.log(state)\r\n  // ProductEntry.show=!ProductEntry.show\r\n\r\n}\r\n\r\n    const handleEdit= async(ProductEntry)=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n      const client1=  state.currentClients.find(el=>{\r\n            return JSON.stringify(el.client_id)===JSON.stringify(state.DispenseModule.selectedDispense)\r\n        })\r\n\r\n    setCurrentOrder(client1)\r\n   // console.log(client1)\r\n        return () => {\r\n        \r\n        }\r\n    }, [])\r\n   \r\n\r\n /*  \r\n     const setprod=async()=>{\r\n        await setProductEntry(state.DispenseModule.selectedDispense)\r\n    } */\r\n \r\n    useEffect(() => {\r\n        /* BillServ.on('created', (obj)=>getFacilities())\r\n        BillServ.on('updated', (obj)=>getFacilities())\r\n       \r\n        BillServ.on('removed', (obj)=>getFacilities()) */\r\n        BillServ.on('patched',  (obj)=>{\r\n            //update state.DispenseModule.selectedDispense\r\n           // console.log(obj.clientId)\r\n           // console.log(\"currentClients\",state.currentClients)\r\n           const current1=state.currentClients.find(el=>(JSON.stringify(el.client_id)===JSON.stringify(obj.clientId)))\r\n           setCurrentOrder(current1)\r\n          // console.log(\"currentone\",current1)\r\n        })\r\n      \r\n        return () => {\r\n         \r\n        }\r\n    },[])\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Dispense Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* {JSON.stringify(ProductEntry.orders,2,10)} */}\r\n            <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        {/* <th><abbr title=\"Client Name\">Client Name</abbr></th> */}\r\n                                        {/* <th><abbr title=\"Number of Orders\"># of Medication</abbr></th> */}\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                        <th>Fulfilled</th>\r\n                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                        <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                        \r\n                                        {/* <th><abbr title=\"Actions\">Actions</abbr></th> */}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {state.DispenseModule.selectedDispense.orders.map((order, i)=>(\r\n\r\n                                            <tr key={order._id} onClick={()=>handleRow(order)} className={order._id===(selectedMedication?._id||null)?\"is-selected\":\"\"}>\r\n                                            \r\n                                               <th>{i+1}</th>\r\n                                                 {/* <td>{ProductEntry.clientname}</td> \r\n                                                <td>{ProductEntry.orders.length}</td> */}\r\n                                           \r\n                                           \r\n                                            <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                          <th>{order.order}</th>\r\n                                            <td>{order.fulfilled?\"Yes\":\"No\"}</td>\r\n                                            <td>{order.order_status}</td>\r\n                                            <td>{order.requestingdoctor_Name}</td>\r\n                                            \r\n                                           {/*  <td><span className=\"showAction\"  >...</span></td> */}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                        \r\n                </div>              \r\n               \r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js",["366","367","368","369","370","371","372","373","374","375","376","377","378"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js",["379","380"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicReport.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\DeptUnits.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClientMgt\\Patient.js",["381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js",["398","399","400","401","402","403","404"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\FinanceHome.js",["405","406","407","408","409","410"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\BillPrescription.js",["411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\DocumentClass.js",["429","430","431","432","433"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\Prescription.js",["434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\DispenseExit.js",["455","456","457","458","459","460","461","462","463","464","465","466","467","468","469"],{"ruleId":"470","severity":1,"message":"471","line":1,"column":47,"nodeType":"472","messageId":"473","endLine":1,"endColumn":53},{"ruleId":"470","severity":1,"message":"474","line":4,"column":10,"nodeType":"472","messageId":"473","endLine":4,"endColumn":17},{"ruleId":"470","severity":1,"message":"475","line":7,"column":9,"nodeType":"472","messageId":"473","endLine":7,"endColumn":14},{"ruleId":"470","severity":1,"message":"476","line":8,"column":17,"nodeType":"472","messageId":"473","endLine":8,"endColumn":42},{"ruleId":"470","severity":1,"message":"477","line":10,"column":8,"nodeType":"472","messageId":"473","endLine":10,"endColumn":22},{"ruleId":"470","severity":1,"message":"478","line":18,"column":5,"nodeType":"472","messageId":"473","endLine":18,"endColumn":23},{"ruleId":"470","severity":1,"message":"479","line":34,"column":12,"nodeType":"472","messageId":"473","endLine":34,"endColumn":17},{"ruleId":"470","severity":1,"message":"480","line":34,"column":19,"nodeType":"472","messageId":"473","endLine":34,"endColumn":27},{"ruleId":"470","severity":1,"message":"481","line":39,"column":10,"nodeType":"472","messageId":"473","endLine":39,"endColumn":18},{"ruleId":"470","severity":1,"message":"482","line":42,"column":11,"nodeType":"472","messageId":"473","endLine":42,"endColumn":21},{"ruleId":"470","severity":1,"message":"483","line":42,"column":22,"nodeType":"472","messageId":"473","endLine":42,"endColumn":35},{"ruleId":"470","severity":1,"message":"484","line":96,"column":12,"nodeType":"472","messageId":"473","endLine":96,"endColumn":20},{"ruleId":"470","severity":1,"message":"485","line":96,"column":22,"nodeType":"472","messageId":"473","endLine":96,"endColumn":33},{"ruleId":"470","severity":1,"message":"486","line":137,"column":11,"nodeType":"472","messageId":"473","endLine":137,"endColumn":30},{"ruleId":"470","severity":1,"message":"487","line":158,"column":11,"nodeType":"472","messageId":"473","endLine":158,"endColumn":26},{"ruleId":"470","severity":1,"message":"488","line":171,"column":14,"nodeType":"472","messageId":"473","endLine":171,"endColumn":19},{"ruleId":"470","severity":1,"message":"489","line":223,"column":11,"nodeType":"472","messageId":"473","endLine":223,"endColumn":20},{"ruleId":"490","severity":1,"message":"491","line":238,"column":15,"nodeType":"492","endLine":238,"endColumn":17,"suggestions":"493"},{"ruleId":"490","severity":1,"message":"494","line":258,"column":8,"nodeType":"492","endLine":258,"endColumn":34,"suggestions":"495"},{"ruleId":"470","severity":1,"message":"496","line":359,"column":12,"nodeType":"472","messageId":"473","endLine":359,"endColumn":24},{"ruleId":"470","severity":1,"message":"497","line":370,"column":6,"nodeType":"472","messageId":"473","endLine":370,"endColumn":18},{"ruleId":"470","severity":1,"message":"498","line":390,"column":11,"nodeType":"472","messageId":"473","endLine":390,"endColumn":21},{"ruleId":"490","severity":1,"message":"499","line":412,"column":8,"nodeType":"492","endLine":412,"endColumn":10,"suggestions":"500"},{"ruleId":"490","severity":1,"message":"501","line":437,"column":7,"nodeType":"492","endLine":437,"endColumn":9,"suggestions":"502"},{"ruleId":"470","severity":1,"message":"474","line":4,"column":10,"nodeType":"472","messageId":"473","endLine":4,"endColumn":17},{"ruleId":"470","severity":1,"message":"503","line":8,"column":9,"nodeType":"472","messageId":"473","endLine":8,"endColumn":22},{"ruleId":"470","severity":1,"message":"504","line":17,"column":13,"nodeType":"472","messageId":"473","endLine":17,"endColumn":20},{"ruleId":"470","severity":1,"message":"505","line":18,"column":13,"nodeType":"472","messageId":"473","endLine":18,"endColumn":20},{"ruleId":"470","severity":1,"message":"506","line":37,"column":13,"nodeType":"472","messageId":"473","endLine":37,"endColumn":24},{"ruleId":"470","severity":1,"message":"507","line":48,"column":14,"nodeType":"472","messageId":"473","endLine":48,"endColumn":28},{"ruleId":"470","severity":1,"message":"508","line":48,"column":30,"nodeType":"472","messageId":"473","endLine":48,"endColumn":47},{"ruleId":"470","severity":1,"message":"509","line":49,"column":24,"nodeType":"472","messageId":"473","endLine":49,"endColumn":35},{"ruleId":"470","severity":1,"message":"510","line":55,"column":14,"nodeType":"472","messageId":"473","endLine":55,"endColumn":21},{"ruleId":"470","severity":1,"message":"511","line":58,"column":12,"nodeType":"472","messageId":"473","endLine":58,"endColumn":19},{"ruleId":"470","severity":1,"message":"512","line":60,"column":10,"nodeType":"472","messageId":"473","endLine":60,"endColumn":20},{"ruleId":"470","severity":1,"message":"513","line":67,"column":9,"nodeType":"472","messageId":"473","endLine":67,"endColumn":26},{"ruleId":"470","severity":1,"message":"514","line":135,"column":9,"nodeType":"472","messageId":"473","endLine":135,"endColumn":26},{"ruleId":"470","severity":1,"message":"515","line":210,"column":12,"nodeType":"472","messageId":"473","endLine":210,"endColumn":28},{"ruleId":"470","severity":1,"message":"516","line":220,"column":12,"nodeType":"472","messageId":"473","endLine":220,"endColumn":27},{"ruleId":"470","severity":1,"message":"517","line":314,"column":12,"nodeType":"472","messageId":"473","endLine":314,"endColumn":22},{"ruleId":"490","severity":1,"message":"518","line":344,"column":8,"nodeType":"492","endLine":344,"endColumn":14,"suggestions":"519"},{"ruleId":"470","severity":1,"message":"520","line":346,"column":12,"nodeType":"472","messageId":"473","endLine":346,"endColumn":21},{"ruleId":"470","severity":1,"message":"521","line":360,"column":12,"nodeType":"472","messageId":"473","endLine":360,"endColumn":32},{"ruleId":"470","severity":1,"message":"522","line":377,"column":12,"nodeType":"472","messageId":"473","endLine":377,"endColumn":20},{"ruleId":"470","severity":1,"message":"523","line":420,"column":11,"nodeType":"472","messageId":"473","endLine":420,"endColumn":29},{"ruleId":"470","severity":1,"message":"524","line":425,"column":11,"nodeType":"472","messageId":"473","endLine":425,"endColumn":20},{"ruleId":"490","severity":1,"message":"525","line":529,"column":8,"nodeType":"492","endLine":529,"endColumn":29,"suggestions":"526"},{"ruleId":"490","severity":1,"message":"527","line":551,"column":8,"nodeType":"492","endLine":551,"endColumn":21,"suggestions":"528"},{"ruleId":"490","severity":1,"message":"529","line":605,"column":9,"nodeType":"492","endLine":605,"endColumn":11,"suggestions":"530"},{"ruleId":"470","severity":1,"message":"531","line":1094,"column":12,"nodeType":"472","messageId":"473","endLine":1094,"endColumn":24},{"ruleId":"470","severity":1,"message":"532","line":1179,"column":11,"nodeType":"472","messageId":"473","endLine":1179,"endColumn":27},{"ruleId":"470","severity":1,"message":"533","line":1182,"column":11,"nodeType":"472","messageId":"473","endLine":1182,"endColumn":27},{"ruleId":"470","severity":1,"message":"534","line":6,"column":7,"nodeType":"472","messageId":"473","endLine":6,"endColumn":12},{"ruleId":"470","severity":1,"message":"535","line":8,"column":7,"nodeType":"472","messageId":"473","endLine":8,"endColumn":10},{"ruleId":"470","severity":1,"message":"536","line":2,"column":40,"nodeType":"472","messageId":"473","endLine":2,"endColumn":44},{"ruleId":"470","severity":1,"message":"537","line":14,"column":12,"nodeType":"472","messageId":"473","endLine":14,"endColumn":16},{"ruleId":"470","severity":1,"message":"538","line":14,"column":17,"nodeType":"472","messageId":"473","endLine":14,"endColumn":24},{"ruleId":"470","severity":1,"message":"539","line":88,"column":16,"nodeType":"472","messageId":"473","endLine":88,"endColumn":20},{"ruleId":"490","severity":1,"message":"540","line":113,"column":7,"nodeType":"492","endLine":113,"endColumn":9,"suggestions":"541"},{"ruleId":"470","severity":1,"message":"542","line":8,"column":37,"nodeType":"472","messageId":"473","endLine":8,"endColumn":42},{"ruleId":"470","severity":1,"message":"543","line":8,"column":44,"nodeType":"472","messageId":"473","endLine":8,"endColumn":50},{"ruleId":"470","severity":1,"message":"544","line":11,"column":11,"nodeType":"472","messageId":"473","endLine":11,"endColumn":19},{"ruleId":"470","severity":1,"message":"542","line":7,"column":37,"nodeType":"472","messageId":"473","endLine":7,"endColumn":42},{"ruleId":"470","severity":1,"message":"543","line":7,"column":44,"nodeType":"472","messageId":"473","endLine":7,"endColumn":50},{"ruleId":"470","severity":1,"message":"536","line":2,"column":40,"nodeType":"472","messageId":"473","endLine":2,"endColumn":44},{"ruleId":"470","severity":1,"message":"545","line":12,"column":9,"nodeType":"472","messageId":"473","endLine":12,"endColumn":20},{"ruleId":"470","severity":1,"message":"546","line":16,"column":18,"nodeType":"472","messageId":"473","endLine":16,"endColumn":26},{"ruleId":"490","severity":1,"message":"547","line":32,"column":12,"nodeType":"492","endLine":32,"endColumn":14,"suggestions":"548"},{"ruleId":"470","severity":1,"message":"536","line":2,"column":40,"nodeType":"472","messageId":"473","endLine":2,"endColumn":44},{"ruleId":"470","severity":1,"message":"545","line":11,"column":9,"nodeType":"472","messageId":"473","endLine":11,"endColumn":20},{"ruleId":"470","severity":1,"message":"546","line":14,"column":18,"nodeType":"472","messageId":"473","endLine":14,"endColumn":26},{"ruleId":"490","severity":1,"message":"549","line":30,"column":12,"nodeType":"492","endLine":30,"endColumn":14,"suggestions":"550"},{"ruleId":"551","replacedBy":"552"},{"ruleId":"553","replacedBy":"554"},{"ruleId":"490","severity":1,"message":"555","line":81,"column":7,"nodeType":"492","endLine":81,"endColumn":13,"suggestions":"556"},{"ruleId":"490","severity":1,"message":"557","line":389,"column":15,"nodeType":"492","endLine":389,"endColumn":17,"suggestions":"558"},{"ruleId":"470","severity":1,"message":"479","line":43,"column":12,"nodeType":"472","messageId":"473","endLine":43,"endColumn":17},{"ruleId":"470","severity":1,"message":"505","line":45,"column":12,"nodeType":"472","messageId":"473","endLine":45,"endColumn":19},{"ruleId":"490","severity":1,"message":"559","line":416,"column":15,"nodeType":"492","endLine":416,"endColumn":17,"suggestions":"560"},{"ruleId":"490","severity":1,"message":"561","line":423,"column":12,"nodeType":"492","endLine":423,"endColumn":45,"suggestions":"562"},{"ruleId":"490","severity":1,"message":"561","line":544,"column":11,"nodeType":"492","endLine":544,"endColumn":22,"suggestions":"563"},{"ruleId":"470","severity":1,"message":"543","line":666,"column":53,"nodeType":"472","messageId":"473","endLine":666,"endColumn":59},{"ruleId":"490","severity":1,"message":"564","line":706,"column":11,"nodeType":"492","endLine":706,"endColumn":13,"suggestions":"565"},{"ruleId":"470","severity":1,"message":"566","line":729,"column":11,"nodeType":"472","messageId":"473","endLine":729,"endColumn":23},{"ruleId":"470","severity":1,"message":"479","line":43,"column":12,"nodeType":"472","messageId":"473","endLine":43,"endColumn":17},{"ruleId":"470","severity":1,"message":"505","line":45,"column":12,"nodeType":"472","messageId":"473","endLine":45,"endColumn":19},{"ruleId":"490","severity":1,"message":"559","line":416,"column":15,"nodeType":"492","endLine":416,"endColumn":17,"suggestions":"567"},{"ruleId":"490","severity":1,"message":"561","line":423,"column":12,"nodeType":"492","endLine":423,"endColumn":45,"suggestions":"568"},{"ruleId":"490","severity":1,"message":"561","line":544,"column":11,"nodeType":"492","endLine":544,"endColumn":22,"suggestions":"569"},{"ruleId":"470","severity":1,"message":"543","line":666,"column":53,"nodeType":"472","messageId":"473","endLine":666,"endColumn":59},{"ruleId":"490","severity":1,"message":"564","line":706,"column":11,"nodeType":"492","endLine":706,"endColumn":13,"suggestions":"570"},{"ruleId":"470","severity":1,"message":"566","line":729,"column":11,"nodeType":"472","messageId":"473","endLine":729,"endColumn":23},{"ruleId":"470","severity":1,"message":"479","line":44,"column":12,"nodeType":"472","messageId":"473","endLine":44,"endColumn":17},{"ruleId":"470","severity":1,"message":"505","line":46,"column":12,"nodeType":"472","messageId":"473","endLine":46,"endColumn":19},{"ruleId":"571","severity":1,"message":"572","line":537,"column":21,"nodeType":"573","messageId":"574","endLine":537,"endColumn":36},{"ruleId":"490","severity":1,"message":"575","line":555,"column":15,"nodeType":"492","endLine":555,"endColumn":17,"suggestions":"576"},{"ruleId":"490","severity":1,"message":"561","line":563,"column":16,"nodeType":"492","endLine":563,"endColumn":49,"suggestions":"577"},{"ruleId":"470","severity":1,"message":"498","line":654,"column":11,"nodeType":"472","messageId":"473","endLine":654,"endColumn":21},{"ruleId":"470","severity":1,"message":"543","line":862,"column":53,"nodeType":"472","messageId":"473","endLine":862,"endColumn":59},{"ruleId":"470","severity":1,"message":"479","line":45,"column":12,"nodeType":"472","messageId":"473","endLine":45,"endColumn":17},{"ruleId":"470","severity":1,"message":"505","line":47,"column":12,"nodeType":"472","messageId":"473","endLine":47,"endColumn":19},{"ruleId":"470","severity":1,"message":"506","line":63,"column":12,"nodeType":"472","messageId":"473","endLine":63,"endColumn":23},{"ruleId":"470","severity":1,"message":"511","line":74,"column":11,"nodeType":"472","messageId":"473","endLine":74,"endColumn":18},{"ruleId":"470","severity":1,"message":"512","line":76,"column":9,"nodeType":"472","messageId":"473","endLine":76,"endColumn":19},{"ruleId":"490","severity":1,"message":"518","line":231,"column":7,"nodeType":"492","endLine":231,"endColumn":13,"suggestions":"578"},{"ruleId":"490","severity":1,"message":"579","line":338,"column":21,"nodeType":"580","endLine":338,"endColumn":42},{"ruleId":"571","severity":1,"message":"572","line":682,"column":21,"nodeType":"573","messageId":"574","endLine":682,"endColumn":36},{"ruleId":"490","severity":1,"message":"575","line":700,"column":15,"nodeType":"492","endLine":700,"endColumn":17,"suggestions":"581"},{"ruleId":"490","severity":1,"message":"561","line":708,"column":16,"nodeType":"492","endLine":708,"endColumn":49,"suggestions":"582"},{"ruleId":"470","severity":1,"message":"498","line":799,"column":11,"nodeType":"472","messageId":"473","endLine":799,"endColumn":21},{"ruleId":"470","severity":1,"message":"543","line":1007,"column":53,"nodeType":"472","messageId":"473","endLine":1007,"endColumn":59},{"ruleId":"470","severity":1,"message":"532","line":1388,"column":11,"nodeType":"472","messageId":"473","endLine":1388,"endColumn":27},{"ruleId":"470","severity":1,"message":"479","line":43,"column":12,"nodeType":"472","messageId":"473","endLine":43,"endColumn":17},{"ruleId":"470","severity":1,"message":"505","line":45,"column":12,"nodeType":"472","messageId":"473","endLine":45,"endColumn":19},{"ruleId":"490","severity":1,"message":"559","line":416,"column":15,"nodeType":"492","endLine":416,"endColumn":17,"suggestions":"583"},{"ruleId":"490","severity":1,"message":"561","line":423,"column":12,"nodeType":"492","endLine":423,"endColumn":45,"suggestions":"584"},{"ruleId":"490","severity":1,"message":"561","line":546,"column":11,"nodeType":"492","endLine":546,"endColumn":22,"suggestions":"585"},{"ruleId":"470","severity":1,"message":"543","line":668,"column":53,"nodeType":"472","messageId":"473","endLine":668,"endColumn":59},{"ruleId":"490","severity":1,"message":"564","line":708,"column":11,"nodeType":"492","endLine":708,"endColumn":13,"suggestions":"586"},{"ruleId":"470","severity":1,"message":"566","line":731,"column":11,"nodeType":"472","messageId":"473","endLine":731,"endColumn":23},{"ruleId":"470","severity":1,"message":"479","line":43,"column":12,"nodeType":"472","messageId":"473","endLine":43,"endColumn":17},{"ruleId":"470","severity":1,"message":"505","line":45,"column":12,"nodeType":"472","messageId":"473","endLine":45,"endColumn":19},{"ruleId":"490","severity":1,"message":"587","line":392,"column":15,"nodeType":"492","endLine":392,"endColumn":17,"suggestions":"588"},{"ruleId":"470","severity":1,"message":"543","line":623,"column":53,"nodeType":"472","messageId":"473","endLine":623,"endColumn":59},{"ruleId":"470","severity":1,"message":"566","line":696,"column":11,"nodeType":"472","messageId":"473","endLine":696,"endColumn":23},{"ruleId":"470","severity":1,"message":"471","line":1,"column":47,"nodeType":"472","messageId":"473","endLine":1,"endColumn":53},{"ruleId":"470","severity":1,"message":"589","line":3,"column":9,"nodeType":"472","messageId":"473","endLine":3,"endColumn":22},{"ruleId":"470","severity":1,"message":"474","line":4,"column":10,"nodeType":"472","messageId":"473","endLine":4,"endColumn":17},{"ruleId":"470","severity":1,"message":"475","line":7,"column":9,"nodeType":"472","messageId":"473","endLine":7,"endColumn":14},{"ruleId":"470","severity":1,"message":"476","line":8,"column":17,"nodeType":"472","messageId":"473","endLine":8,"endColumn":42},{"ruleId":"470","severity":1,"message":"477","line":10,"column":8,"nodeType":"472","messageId":"473","endLine":10,"endColumn":22},{"ruleId":"470","severity":1,"message":"486","line":57,"column":12,"nodeType":"472","messageId":"473","endLine":57,"endColumn":31},{"ruleId":"470","severity":1,"message":"487","line":76,"column":12,"nodeType":"472","messageId":"473","endLine":76,"endColumn":27},{"ruleId":"470","severity":1,"message":"590","line":88,"column":12,"nodeType":"472","messageId":"473","endLine":88,"endColumn":24},{"ruleId":"470","severity":1,"message":"488","line":89,"column":15,"nodeType":"472","messageId":"473","endLine":89,"endColumn":20},{"ruleId":"591","severity":1,"message":"592","line":102,"column":18,"nodeType":"593","messageId":"594","endLine":102,"endColumn":30},{"ruleId":"490","severity":1,"message":"595","line":158,"column":16,"nodeType":"492","endLine":158,"endColumn":18,"suggestions":"596"},{"ruleId":"470","severity":1,"message":"489","line":160,"column":16,"nodeType":"472","messageId":"473","endLine":160,"endColumn":25},{"ruleId":"470","severity":1,"message":"474","line":4,"column":10,"nodeType":"472","messageId":"473","endLine":4,"endColumn":17},{"ruleId":"470","severity":1,"message":"479","line":15,"column":13,"nodeType":"472","messageId":"473","endLine":15,"endColumn":18},{"ruleId":"470","severity":1,"message":"505","line":17,"column":13,"nodeType":"472","messageId":"473","endLine":17,"endColumn":20},{"ruleId":"470","severity":1,"message":"506","line":33,"column":13,"nodeType":"472","messageId":"473","endLine":33,"endColumn":24},{"ruleId":"470","severity":1,"message":"511","line":44,"column":12,"nodeType":"472","messageId":"473","endLine":44,"endColumn":19},{"ruleId":"470","severity":1,"message":"512","line":46,"column":10,"nodeType":"472","messageId":"473","endLine":46,"endColumn":20},{"ruleId":"490","severity":1,"message":"518","line":201,"column":8,"nodeType":"492","endLine":201,"endColumn":14,"suggestions":"597"},{"ruleId":"490","severity":1,"message":"579","line":308,"column":22,"nodeType":"580","endLine":308,"endColumn":43},{"ruleId":"470","severity":1,"message":"532","line":609,"column":11,"nodeType":"472","messageId":"473","endLine":609,"endColumn":27},{"ruleId":"470","severity":1,"message":"474","line":4,"column":10,"nodeType":"472","messageId":"473","endLine":4,"endColumn":17},{"ruleId":"470","severity":1,"message":"475","line":8,"column":9,"nodeType":"472","messageId":"473","endLine":8,"endColumn":14},{"ruleId":"470","severity":1,"message":"598","line":11,"column":25,"nodeType":"472","messageId":"473","endLine":11,"endColumn":43},{"ruleId":"470","severity":1,"message":"599","line":34,"column":18,"nodeType":"472","messageId":"473","endLine":34,"endColumn":25},{"ruleId":"470","severity":1,"message":"600","line":36,"column":11,"nodeType":"472","messageId":"473","endLine":36,"endColumn":17},{"ruleId":"470","severity":1,"message":"487","line":51,"column":11,"nodeType":"472","messageId":"473","endLine":51,"endColumn":26},{"ruleId":"470","severity":1,"message":"601","line":124,"column":19,"nodeType":"472","messageId":"473","endLine":124,"endColumn":25},{"ruleId":"490","severity":1,"message":"602","line":203,"column":15,"nodeType":"492","endLine":203,"endColumn":17,"suggestions":"603"},{"ruleId":"470","severity":1,"message":"604","line":10,"column":12,"nodeType":"472","messageId":"473","endLine":10,"endColumn":17},{"ruleId":"490","severity":1,"message":"605","line":283,"column":7,"nodeType":"492","endLine":283,"endColumn":9,"suggestions":"606"},{"ruleId":"470","severity":1,"message":"474","line":4,"column":10,"nodeType":"472","messageId":"473","endLine":4,"endColumn":17},{"ruleId":"470","severity":1,"message":"503","line":8,"column":9,"nodeType":"472","messageId":"473","endLine":8,"endColumn":22},{"ruleId":"470","severity":1,"message":"505","line":18,"column":13,"nodeType":"472","messageId":"473","endLine":18,"endColumn":20},{"ruleId":"470","severity":1,"message":"607","line":21,"column":12,"nodeType":"472","messageId":"473","endLine":21,"endColumn":28},{"ruleId":"470","severity":1,"message":"608","line":30,"column":13,"nodeType":"472","messageId":"473","endLine":30,"endColumn":20},{"ruleId":"470","severity":1,"message":"506","line":35,"column":13,"nodeType":"472","messageId":"473","endLine":35,"endColumn":24},{"ruleId":"470","severity":1,"message":"511","line":52,"column":12,"nodeType":"472","messageId":"473","endLine":52,"endColumn":19},{"ruleId":"470","severity":1,"message":"512","line":54,"column":10,"nodeType":"472","messageId":"473","endLine":54,"endColumn":20},{"ruleId":"470","severity":1,"message":"515","line":226,"column":12,"nodeType":"472","messageId":"473","endLine":226,"endColumn":28},{"ruleId":"490","severity":1,"message":"518","line":365,"column":8,"nodeType":"492","endLine":365,"endColumn":14,"suggestions":"609"},{"ruleId":"470","severity":1,"message":"520","line":367,"column":12,"nodeType":"472","messageId":"473","endLine":367,"endColumn":21},{"ruleId":"470","severity":1,"message":"524","line":487,"column":11,"nodeType":"472","messageId":"473","endLine":487,"endColumn":20},{"ruleId":"490","severity":1,"message":"610","line":584,"column":8,"nodeType":"492","endLine":584,"endColumn":20,"suggestions":"611"},{"ruleId":"490","severity":1,"message":"579","line":599,"column":21,"nodeType":"580","endLine":599,"endColumn":42},{"ruleId":"470","severity":1,"message":"531","line":868,"column":12,"nodeType":"472","messageId":"473","endLine":868,"endColumn":24},{"ruleId":"470","severity":1,"message":"532","line":953,"column":11,"nodeType":"472","messageId":"473","endLine":953,"endColumn":27},{"ruleId":"470","severity":1,"message":"533","line":956,"column":11,"nodeType":"472","messageId":"473","endLine":956,"endColumn":27},{"ruleId":"470","severity":1,"message":"471","line":1,"column":47,"nodeType":"472","messageId":"473","endLine":1,"endColumn":53},{"ruleId":"470","severity":1,"message":"474","line":4,"column":10,"nodeType":"472","messageId":"473","endLine":4,"endColumn":17},{"ruleId":"470","severity":1,"message":"475","line":7,"column":9,"nodeType":"472","messageId":"473","endLine":7,"endColumn":14},{"ruleId":"470","severity":1,"message":"476","line":8,"column":17,"nodeType":"472","messageId":"473","endLine":8,"endColumn":42},{"ruleId":"470","severity":1,"message":"477","line":10,"column":8,"nodeType":"472","messageId":"473","endLine":10,"endColumn":22},{"ruleId":"470","severity":1,"message":"478","line":18,"column":5,"nodeType":"472","messageId":"473","endLine":18,"endColumn":23},{"ruleId":"470","severity":1,"message":"479","line":35,"column":12,"nodeType":"472","messageId":"473","endLine":35,"endColumn":17},{"ruleId":"470","severity":1,"message":"480","line":35,"column":19,"nodeType":"472","messageId":"473","endLine":35,"endColumn":27},{"ruleId":"470","severity":1,"message":"481","line":40,"column":10,"nodeType":"472","messageId":"473","endLine":40,"endColumn":18},{"ruleId":"470","severity":1,"message":"482","line":43,"column":11,"nodeType":"472","messageId":"473","endLine":43,"endColumn":21},{"ruleId":"470","severity":1,"message":"483","line":43,"column":22,"nodeType":"472","messageId":"473","endLine":43,"endColumn":35},{"ruleId":"470","severity":1,"message":"484","line":97,"column":12,"nodeType":"472","messageId":"473","endLine":97,"endColumn":20},{"ruleId":"470","severity":1,"message":"485","line":97,"column":22,"nodeType":"472","messageId":"473","endLine":97,"endColumn":33},{"ruleId":"470","severity":1,"message":"486","line":138,"column":11,"nodeType":"472","messageId":"473","endLine":138,"endColumn":30},{"ruleId":"470","severity":1,"message":"487","line":159,"column":11,"nodeType":"472","messageId":"473","endLine":159,"endColumn":26},{"ruleId":"470","severity":1,"message":"488","line":172,"column":14,"nodeType":"472","messageId":"473","endLine":172,"endColumn":19},{"ruleId":"470","severity":1,"message":"489","line":229,"column":11,"nodeType":"472","messageId":"473","endLine":229,"endColumn":20},{"ruleId":"490","severity":1,"message":"612","line":245,"column":15,"nodeType":"492","endLine":245,"endColumn":17,"suggestions":"613"},{"ruleId":"490","severity":1,"message":"494","line":282,"column":8,"nodeType":"492","endLine":282,"endColumn":34,"suggestions":"614"},{"ruleId":"470","severity":1,"message":"496","line":383,"column":12,"nodeType":"472","messageId":"473","endLine":383,"endColumn":24},{"ruleId":"470","severity":1,"message":"497","line":394,"column":6,"nodeType":"472","messageId":"473","endLine":394,"endColumn":18},{"ruleId":"470","severity":1,"message":"498","line":414,"column":11,"nodeType":"472","messageId":"473","endLine":414,"endColumn":21},{"ruleId":"490","severity":1,"message":"499","line":436,"column":8,"nodeType":"492","endLine":436,"endColumn":10,"suggestions":"615"},{"ruleId":"490","severity":1,"message":"501","line":461,"column":7,"nodeType":"492","endLine":461,"endColumn":9,"suggestions":"616"},{"ruleId":"470","severity":1,"message":"479","line":45,"column":12,"nodeType":"472","messageId":"473","endLine":45,"endColumn":17},{"ruleId":"470","severity":1,"message":"505","line":47,"column":12,"nodeType":"472","messageId":"473","endLine":47,"endColumn":19},{"ruleId":"470","severity":1,"message":"506","line":63,"column":12,"nodeType":"472","messageId":"473","endLine":63,"endColumn":23},{"ruleId":"470","severity":1,"message":"511","line":74,"column":11,"nodeType":"472","messageId":"473","endLine":74,"endColumn":18},{"ruleId":"470","severity":1,"message":"512","line":76,"column":9,"nodeType":"472","messageId":"473","endLine":76,"endColumn":19},{"ruleId":"490","severity":1,"message":"518","line":235,"column":7,"nodeType":"492","endLine":235,"endColumn":13,"suggestions":"617"},{"ruleId":"490","severity":1,"message":"579","line":347,"column":21,"nodeType":"580","endLine":347,"endColumn":42},{"ruleId":"571","severity":1,"message":"572","line":694,"column":21,"nodeType":"573","messageId":"574","endLine":694,"endColumn":36},{"ruleId":"490","severity":1,"message":"575","line":712,"column":15,"nodeType":"492","endLine":712,"endColumn":17,"suggestions":"618"},{"ruleId":"490","severity":1,"message":"561","line":720,"column":16,"nodeType":"492","endLine":720,"endColumn":49,"suggestions":"619"},{"ruleId":"470","severity":1,"message":"498","line":811,"column":11,"nodeType":"472","messageId":"473","endLine":811,"endColumn":21},{"ruleId":"470","severity":1,"message":"543","line":1019,"column":53,"nodeType":"472","messageId":"473","endLine":1019,"endColumn":59},{"ruleId":"470","severity":1,"message":"532","line":1400,"column":11,"nodeType":"472","messageId":"473","endLine":1400,"endColumn":27},{"ruleId":"470","severity":1,"message":"620","line":138,"column":18,"nodeType":"472","messageId":"473","endLine":138,"endColumn":23},{"ruleId":"490","severity":1,"message":"621","line":159,"column":4,"nodeType":"492","endLine":159,"endColumn":6,"suggestions":"622"},{"ruleId":"470","severity":1,"message":"623","line":2,"column":9,"nodeType":"472","messageId":"473","endLine":2,"endColumn":14},{"ruleId":"470","severity":1,"message":"624","line":2,"column":16,"nodeType":"472","messageId":"473","endLine":2,"endColumn":22},{"ruleId":"470","severity":1,"message":"536","line":2,"column":40,"nodeType":"472","messageId":"473","endLine":2,"endColumn":44},{"ruleId":"470","severity":1,"message":"625","line":2,"column":46,"nodeType":"472","messageId":"473","endLine":2,"endColumn":53},{"ruleId":"470","severity":1,"message":"479","line":42,"column":12,"nodeType":"472","messageId":"473","endLine":42,"endColumn":17},{"ruleId":"470","severity":1,"message":"504","line":43,"column":12,"nodeType":"472","messageId":"473","endLine":43,"endColumn":19},{"ruleId":"470","severity":1,"message":"505","line":44,"column":12,"nodeType":"472","messageId":"473","endLine":44,"endColumn":19},{"ruleId":"470","severity":1,"message":"514","line":55,"column":11,"nodeType":"472","messageId":"473","endLine":55,"endColumn":28},{"ruleId":"470","severity":1,"message":"488","line":506,"column":14,"nodeType":"472","messageId":"473","endLine":506,"endColumn":19},{"ruleId":"490","severity":1,"message":"626","line":630,"column":15,"nodeType":"492","endLine":630,"endColumn":17,"suggestions":"627"},{"ruleId":"470","severity":1,"message":"628","line":716,"column":11,"nodeType":"472","messageId":"473","endLine":716,"endColumn":15},{"ruleId":"470","severity":1,"message":"629","line":716,"column":17,"nodeType":"472","messageId":"473","endLine":716,"endColumn":20},{"ruleId":"470","severity":1,"message":"479","line":717,"column":12,"nodeType":"472","messageId":"473","endLine":717,"endColumn":17},{"ruleId":"470","severity":1,"message":"480","line":717,"column":19,"nodeType":"472","messageId":"473","endLine":717,"endColumn":27},{"ruleId":"470","severity":1,"message":"630","line":729,"column":11,"nodeType":"472","messageId":"473","endLine":729,"endColumn":17},{"ruleId":"470","severity":1,"message":"543","line":1061,"column":53,"nodeType":"472","messageId":"473","endLine":1061,"endColumn":59},{"ruleId":"470","severity":1,"message":"566","line":1199,"column":11,"nodeType":"472","messageId":"473","endLine":1199,"endColumn":23},{"ruleId":"470","severity":1,"message":"479","line":44,"column":12,"nodeType":"472","messageId":"473","endLine":44,"endColumn":17},{"ruleId":"470","severity":1,"message":"505","line":46,"column":12,"nodeType":"472","messageId":"473","endLine":46,"endColumn":19},{"ruleId":"571","severity":1,"message":"572","line":537,"column":21,"nodeType":"573","messageId":"574","endLine":537,"endColumn":36},{"ruleId":"490","severity":1,"message":"575","line":555,"column":15,"nodeType":"492","endLine":555,"endColumn":17,"suggestions":"631"},{"ruleId":"490","severity":1,"message":"561","line":563,"column":16,"nodeType":"492","endLine":563,"endColumn":49,"suggestions":"632"},{"ruleId":"470","severity":1,"message":"498","line":654,"column":11,"nodeType":"472","messageId":"473","endLine":654,"endColumn":21},{"ruleId":"470","severity":1,"message":"543","line":862,"column":53,"nodeType":"472","messageId":"473","endLine":862,"endColumn":59},{"ruleId":"470","severity":1,"message":"633","line":1,"column":16,"nodeType":"472","messageId":"473","endLine":1,"endColumn":24},{"ruleId":"470","severity":1,"message":"634","line":1,"column":25,"nodeType":"472","messageId":"473","endLine":1,"endColumn":34},{"ruleId":"470","severity":1,"message":"635","line":2,"column":8,"nodeType":"472","messageId":"473","endLine":2,"endColumn":13},{"ruleId":"470","severity":1,"message":"636","line":2,"column":17,"nodeType":"472","messageId":"473","endLine":2,"endColumn":26},{"ruleId":"470","severity":1,"message":"545","line":3,"column":9,"nodeType":"472","messageId":"473","endLine":3,"endColumn":20},{"ruleId":"470","severity":1,"message":"637","line":8,"column":11,"nodeType":"472","messageId":"473","endLine":8,"endColumn":27},{"ruleId":"470","severity":1,"message":"471","line":1,"column":47,"nodeType":"472","messageId":"473","endLine":1,"endColumn":53},{"ruleId":"470","severity":1,"message":"474","line":4,"column":10,"nodeType":"472","messageId":"473","endLine":4,"endColumn":17},{"ruleId":"470","severity":1,"message":"475","line":7,"column":9,"nodeType":"472","messageId":"473","endLine":7,"endColumn":14},{"ruleId":"470","severity":1,"message":"476","line":8,"column":17,"nodeType":"472","messageId":"473","endLine":8,"endColumn":42},{"ruleId":"470","severity":1,"message":"479","line":33,"column":12,"nodeType":"472","messageId":"473","endLine":33,"endColumn":17},{"ruleId":"470","severity":1,"message":"480","line":33,"column":19,"nodeType":"472","messageId":"473","endLine":33,"endColumn":27},{"ruleId":"470","severity":1,"message":"638","line":38,"column":10,"nodeType":"472","messageId":"473","endLine":38,"endColumn":19},{"ruleId":"470","severity":1,"message":"482","line":41,"column":11,"nodeType":"472","messageId":"473","endLine":41,"endColumn":21},{"ruleId":"470","severity":1,"message":"483","line":41,"column":22,"nodeType":"472","messageId":"473","endLine":41,"endColumn":35},{"ruleId":"470","severity":1,"message":"487","line":136,"column":11,"nodeType":"472","messageId":"473","endLine":136,"endColumn":26},{"ruleId":"470","severity":1,"message":"488","line":149,"column":14,"nodeType":"472","messageId":"473","endLine":149,"endColumn":19},{"ruleId":"490","severity":1,"message":"595","line":225,"column":15,"nodeType":"492","endLine":225,"endColumn":17,"suggestions":"639"},{"ruleId":"470","severity":1,"message":"489","line":227,"column":15,"nodeType":"472","messageId":"473","endLine":227,"endColumn":24},{"ruleId":"470","severity":1,"message":"496","line":325,"column":12,"nodeType":"472","messageId":"473","endLine":325,"endColumn":24},{"ruleId":"470","severity":1,"message":"497","line":336,"column":6,"nodeType":"472","messageId":"473","endLine":336,"endColumn":18},{"ruleId":"470","severity":1,"message":"498","line":356,"column":11,"nodeType":"472","messageId":"473","endLine":356,"endColumn":21},{"ruleId":"490","severity":1,"message":"499","line":378,"column":8,"nodeType":"492","endLine":378,"endColumn":10,"suggestions":"640"},{"ruleId":"490","severity":1,"message":"641","line":403,"column":7,"nodeType":"492","endLine":403,"endColumn":9,"suggestions":"642"},{"ruleId":"470","severity":1,"message":"479","line":43,"column":12,"nodeType":"472","messageId":"473","endLine":43,"endColumn":17},{"ruleId":"470","severity":1,"message":"505","line":45,"column":12,"nodeType":"472","messageId":"473","endLine":45,"endColumn":19},{"ruleId":"490","severity":1,"message":"643","line":317,"column":15,"nodeType":"492","endLine":317,"endColumn":17,"suggestions":"644"},{"ruleId":"470","severity":1,"message":"543","line":548,"column":53,"nodeType":"472","messageId":"473","endLine":548,"endColumn":59},{"ruleId":"470","severity":1,"message":"566","line":621,"column":11,"nodeType":"472","messageId":"473","endLine":621,"endColumn":23},{"ruleId":"470","severity":1,"message":"476","line":9,"column":17,"nodeType":"472","messageId":"473","endLine":9,"endColumn":42},{"ruleId":"470","severity":1,"message":"479","line":46,"column":12,"nodeType":"472","messageId":"473","endLine":46,"endColumn":17},{"ruleId":"470","severity":1,"message":"505","line":48,"column":12,"nodeType":"472","messageId":"473","endLine":48,"endColumn":19},{"ruleId":"470","severity":1,"message":"607","line":51,"column":11,"nodeType":"472","messageId":"473","endLine":51,"endColumn":27},{"ruleId":"470","severity":1,"message":"645","line":59,"column":12,"nodeType":"472","messageId":"473","endLine":59,"endColumn":21},{"ruleId":"470","severity":1,"message":"646","line":62,"column":12,"nodeType":"472","messageId":"473","endLine":62,"endColumn":16},{"ruleId":"470","severity":1,"message":"647","line":72,"column":12,"nodeType":"472","messageId":"473","endLine":72,"endColumn":24},{"ruleId":"470","severity":1,"message":"648","line":72,"column":25,"nodeType":"472","messageId":"473","endLine":72,"endColumn":40},{"ruleId":"470","severity":1,"message":"515","line":145,"column":11,"nodeType":"472","messageId":"473","endLine":145,"endColumn":27},{"ruleId":"470","severity":1,"message":"520","line":189,"column":11,"nodeType":"472","messageId":"473","endLine":189,"endColumn":20},{"ruleId":"490","severity":1,"message":"649","line":260,"column":8,"nodeType":"492","endLine":260,"endColumn":10,"suggestions":"650"},{"ruleId":"470","severity":1,"message":"488","line":454,"column":14,"nodeType":"472","messageId":"473","endLine":454,"endColumn":19},{"ruleId":"490","severity":1,"message":"595","line":518,"column":15,"nodeType":"492","endLine":518,"endColumn":17,"suggestions":"651"},{"ruleId":"470","severity":1,"message":"498","line":608,"column":11,"nodeType":"472","messageId":"473","endLine":608,"endColumn":21},{"ruleId":"470","severity":1,"message":"543","line":816,"column":53,"nodeType":"472","messageId":"473","endLine":816,"endColumn":59},{"ruleId":"470","severity":1,"message":"531","line":1110,"column":12,"nodeType":"472","messageId":"473","endLine":1110,"endColumn":24},{"ruleId":"470","severity":1,"message":"652","line":1131,"column":11,"nodeType":"472","messageId":"473","endLine":1131,"endColumn":21},{"ruleId":"470","severity":1,"message":"532","line":1204,"column":11,"nodeType":"472","messageId":"473","endLine":1204,"endColumn":27},{"ruleId":"470","severity":1,"message":"533","line":1207,"column":11,"nodeType":"472","messageId":"473","endLine":1207,"endColumn":27},{"ruleId":"490","severity":1,"message":"653","line":1216,"column":8,"nodeType":"492","endLine":1216,"endColumn":15,"suggestions":"654"},{"ruleId":"655","severity":1,"message":"656","line":1254,"column":75,"nodeType":"657","endLine":1254,"endColumn":79},{"ruleId":"470","severity":1,"message":"479","line":45,"column":12,"nodeType":"472","messageId":"473","endLine":45,"endColumn":17},{"ruleId":"470","severity":1,"message":"505","line":47,"column":12,"nodeType":"472","messageId":"473","endLine":47,"endColumn":19},{"ruleId":"470","severity":1,"message":"506","line":63,"column":12,"nodeType":"472","messageId":"473","endLine":63,"endColumn":23},{"ruleId":"470","severity":1,"message":"511","line":74,"column":11,"nodeType":"472","messageId":"473","endLine":74,"endColumn":18},{"ruleId":"470","severity":1,"message":"512","line":76,"column":9,"nodeType":"472","messageId":"473","endLine":76,"endColumn":19},{"ruleId":"490","severity":1,"message":"518","line":235,"column":7,"nodeType":"492","endLine":235,"endColumn":13,"suggestions":"658"},{"ruleId":"490","severity":1,"message":"579","line":347,"column":21,"nodeType":"580","endLine":347,"endColumn":42},{"ruleId":"490","severity":1,"message":"659","line":410,"column":8,"nodeType":"492","endLine":410,"endColumn":29,"suggestions":"660"},{"ruleId":"490","severity":1,"message":"661","line":425,"column":8,"nodeType":"492","endLine":425,"endColumn":21,"suggestions":"662"},{"ruleId":"571","severity":1,"message":"572","line":763,"column":21,"nodeType":"573","messageId":"574","endLine":763,"endColumn":36},{"ruleId":"490","severity":1,"message":"575","line":781,"column":15,"nodeType":"492","endLine":781,"endColumn":17,"suggestions":"663"},{"ruleId":"490","severity":1,"message":"561","line":789,"column":16,"nodeType":"492","endLine":789,"endColumn":49,"suggestions":"664"},{"ruleId":"470","severity":1,"message":"498","line":880,"column":11,"nodeType":"472","messageId":"473","endLine":880,"endColumn":21},{"ruleId":"470","severity":1,"message":"543","line":1088,"column":53,"nodeType":"472","messageId":"473","endLine":1088,"endColumn":59},{"ruleId":"470","severity":1,"message":"532","line":1469,"column":11,"nodeType":"472","messageId":"473","endLine":1469,"endColumn":27},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useForm' is defined but never used.","'toast' is defined but never used.","'formatDistanceToNowStrict' is defined but never used.","'PatientProfile' is defined but never used.","'AccordionItemState' is defined but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'BillServ' is assigned a value but never used.","'facilities' is assigned a value but never used.","'setFacilities' is assigned a value but never used.","'expanded' is assigned a value but never used.","'setExpanded' is assigned a value but never used.","'handleMedicationRow' is assigned a value but never used.","'handleCreateNew' is assigned a value but never used.","'field' is assigned a value but never used.","'handleRow' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'BillServ' and 'getFacilities'. Either include them or remove the dependency array.","ArrayExpression",["665"],"React Hook useEffect has a missing dependency: 'selectedOrders'. Either include it or remove the dependency array.",["666"],"'currentOrder' is assigned a value but never used.","'ProductEntry' is assigned a value but never used.","'handleEdit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'state.DispenseModule.selectedDispense' and 'state.currentClients'. Either include them or remove the dependency array.",["667"],"React Hook useEffect has missing dependencies: 'BillServ' and 'state.currentClients'. Either include them or remove the dependency array.",["668"],"'ProductCreate' is defined but never used.","'success' is assigned a value but never used.","'message' is assigned a value but never used.","'inventoryId' is assigned a value but never used.","'paymentOptions' is assigned a value but never used.","'setPaymentOptions' is assigned a value but never used.","'setBillMode' is assigned a value but never used.","'partPay' is assigned a value but never used.","'inputEl' is assigned a value but never used.","'hidestatus' is defined but never used.","'showDocumentation' is assigned a value but never used.","'getSearchfacility' is assigned a value but never used.","'handleChangeType' is assigned a value but never used.","'handleClickProd' is assigned a value but never used.","'handleQtty' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'documentNo', 'quantity', 'sellingprice', 'source', 'totalamount', and 'type'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProductEntry' needs the current value of 'documentNo'.",["669"],"'resetform' is assigned a value but never used.","'handleMedicationDone' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","'handleChangeAmount' is assigned a value but never used.","'newclient' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getFacilities', 'medication', 'productItem.length', and 'source'. Either include them or remove the dependency array.",["670"],"React Hook useEffect has a missing dependency: 'getTotal'. Either include it or remove the dependency array.",["671"],"React Hook useEffect has missing dependencies: 'SubwalletServ', 'getFacilities', and 'setState'. Either include them or remove the dependency array.",["672"],"'productModal' is assigned a value but never used.","'handleAddproduct' is assigned a value but never used.","'handlecloseModal' is assigned a value but never used.","'herok' is assigned a value but never used.","'API' is assigned a value but never used.","'Link' is defined but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","'resp' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'reAuth', 'setUser', and 'user'. Either include them or remove the dependency array.",["673"],"'watch' is assigned a value but never used.","'errors' is assigned a value but never used.","'userServ' is assigned a value but never used.","'UserContext' is defined but never used.","'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleChangeStore' and 'selectedStore'. Either include them or remove the dependency array.",["674"],"React Hook useEffect has a missing dependency: 'selectedClinic'. Either include it or remove the dependency array.",["675"],"no-native-reassign",["676"],"no-negated-in-lhs",["677"],"React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["678"],"React Hook useEffect has missing dependencies: 'EmployeeServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["679"],"React Hook useEffect has missing dependencies: 'InventoryServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["680"],"React Hook useEffect has a missing dependency: 'getFacilities'. Either include it or remove the dependency array.",["681"],["682"],"React Hook useEffect has a missing dependency: 'handleSetPrice'. Either include it or remove the dependency array.",["683"],"'handleDelete' is assigned a value but never used.",["684"],["685"],["686"],["687"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","React Hook useEffect has missing dependencies: 'ProductEntryServ', 'getFacilities', and 'state.StoreModule.selectedStore'. Either include them or remove the dependency array.",["688"],["689"],["690"],"Assignments to the 'calcamount1' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","BinaryExpression",["691"],["692"],["693"],["694"],["695"],["696"],"React Hook useEffect has missing dependencies: 'ClinicServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["697"],"'DebounceInput' is defined but never used.","'handleSearch' is assigned a value but never used.","no-dupe-keys","Duplicate key 'order_status'.","ObjectExpression","unexpected","React Hook useEffect has missing dependencies: 'OrderServ' and 'getFacilities'. Either include them or remove the dependency array.",["698"],["699"],"'PrescriptionCreate' is defined but never used.","'setPage' is assigned a value but never used.","'loader' is assigned a value but never used.","'ulimit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ClinicServ', 'getFacilities', 'page', and 'user'. Either include them or remove the dependency array.",["700"],"'state' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'facilityServ' and 'getFacilities'. Either include them or remove the dependency array.",["701"],"'ProductEntryServ' is assigned a value but never used.","'qamount' is assigned a value but never used.",["702"],"React Hook useEffect has missing dependencies: 'billMode' and 'source'. Either include them or remove the dependency array.",["703"],"React Hook useEffect has missing dependencies: 'BillServ', 'cleanup', and 'getFacilities'. Either include them or remove the dependency array.",["704"],["705"],["706"],["707"],["708"],["709"],["710"],"'user1' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setUser' and 'user'. Either include them or remove the dependency array.",["711"],"'Route' is defined but never used.","'Switch' is defined but never used.","'NavLink' is defined but never used.","React Hook useEffect has missing dependencies: 'ClientServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["712"],"'path' is assigned a value but never used.","'url' is assigned a value but never used.","'client' is assigned a value but never used.",["713"],["714"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Store' is defined but never used.","'StoreList' is defined but never used.","'handleCloseModal' is assigned a value but never used.","'OrderServ' is assigned a value but never used.",["715"],["716"],"React Hook useEffect has missing dependencies: 'OrderServ' and 'state.currentClients'. Either include them or remove the dependency array.",["717"],"React Hook useEffect has missing dependencies: 'DocumentClassServ' and 'getFacilities'. Either include them or remove the dependency array.",["718"],"'productId' is assigned a value but never used.","'name' is assigned a value but never used.","'productEntry' is assigned a value but never used.","'setProductEntry' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'user.currentEmployee.facilityDetail._id' and 'user.currentEmployee.facilityDetail.facilityName'. Either include them or remove the dependency array.",["719"],["720"],"'handleBlur' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["721"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal",["722"],"React Hook useEffect has missing dependencies: 'getTotal', 'medication', 'productItem.length', and 'source'. Either include them or remove the dependency array.",["723"],"React Hook useEffect has missing dependencies: 'getTotal' and 'totalamount'. Either include them or remove the dependency array.",["724"],["725"],["726"],{"desc":"727","fix":"728"},{"desc":"729","fix":"730"},{"desc":"731","fix":"732"},{"desc":"733","fix":"734"},{"desc":"735","fix":"736"},{"desc":"737","fix":"738"},{"desc":"739","fix":"740"},{"desc":"741","fix":"742"},{"desc":"743","fix":"744"},{"desc":"745","fix":"746"},{"desc":"747","fix":"748"},"no-global-assign","no-unsafe-negation",{"desc":"749","fix":"750"},{"desc":"751","fix":"752"},{"desc":"753","fix":"754"},{"desc":"755","fix":"756"},{"desc":"757","fix":"758"},{"desc":"759","fix":"760"},{"desc":"753","fix":"761"},{"desc":"755","fix":"762"},{"desc":"757","fix":"763"},{"desc":"759","fix":"764"},{"desc":"765","fix":"766"},{"desc":"755","fix":"767"},{"desc":"735","fix":"768"},{"desc":"765","fix":"769"},{"desc":"755","fix":"770"},{"desc":"753","fix":"771"},{"desc":"755","fix":"772"},{"desc":"757","fix":"773"},{"desc":"759","fix":"774"},{"desc":"775","fix":"776"},{"desc":"777","fix":"778"},{"desc":"735","fix":"779"},{"desc":"780","fix":"781"},{"desc":"782","fix":"783"},{"desc":"735","fix":"784"},{"desc":"785","fix":"786"},{"desc":"787","fix":"788"},{"desc":"729","fix":"789"},{"desc":"731","fix":"790"},{"desc":"733","fix":"791"},{"desc":"735","fix":"792"},{"desc":"765","fix":"793"},{"desc":"755","fix":"794"},{"desc":"795","fix":"796"},{"desc":"797","fix":"798"},{"desc":"765","fix":"799"},{"desc":"755","fix":"800"},{"desc":"777","fix":"801"},{"desc":"731","fix":"802"},{"desc":"803","fix":"804"},{"desc":"805","fix":"806"},{"desc":"807","fix":"808"},{"desc":"777","fix":"809"},{"desc":"810","fix":"811"},{"desc":"735","fix":"812"},{"desc":"813","fix":"814"},{"desc":"815","fix":"816"},{"desc":"765","fix":"817"},{"desc":"755","fix":"818"},"Update the dependencies array to be: [BillServ, getFacilities]",{"range":"819","text":"820"},"Update the dependencies array to be: [selectedOrders, state.financeModule.show]",{"range":"821","text":"822"},"Update the dependencies array to be: [state.DispenseModule.selectedDispense, state.currentClients]",{"range":"823","text":"824"},"Update the dependencies array to be: [BillServ, state.currentClients]",{"range":"825","text":"826"},"Update the dependencies array to be: [date, documentNo, quantity, sellingprice, source, totalamount, type]",{"range":"827","text":"828"},"Update the dependencies array to be: [getFacilities, medication, productItem.length, source, state.financeModule]",{"range":"829","text":"830"},"Update the dependencies array to be: [getTotal, productItem]",{"range":"831","text":"832"},"Update the dependencies array to be: [SubwalletServ, getFacilities, setState]",{"range":"833","text":"834"},"Update the dependencies array to be: [reAuth, setUser, user]",{"range":"835","text":"836"},"Update the dependencies array to be: [handleChangeStore, selectedStore]",{"range":"837","text":"838"},"Update the dependencies array to be: [selectedClinic]",{"range":"839","text":"840"},"Update the dependencies array to be: [setValue, user]",{"range":"841","text":"842"},"Update the dependencies array to be: [EmployeeServ, getFacilities, user]",{"range":"843","text":"844"},"Update the dependencies array to be: [InventoryServ, getFacilities, user]",{"range":"845","text":"846"},"Update the dependencies array to be: [getFacilities, state.StoreModule.selectedStore]",{"range":"847","text":"848"},"Update the dependencies array to be: [Inventory, getFacilities]",{"range":"849","text":"850"},"Update the dependencies array to be: [handleSetPrice]",{"range":"851","text":"852"},{"range":"853","text":"846"},{"range":"854","text":"848"},{"range":"855","text":"850"},{"range":"856","text":"852"},"Update the dependencies array to be: [ProductEntryServ, getFacilities, state.StoreModule.selectedStore]",{"range":"857","text":"858"},{"range":"859","text":"848"},{"range":"860","text":"828"},{"range":"861","text":"858"},{"range":"862","text":"848"},{"range":"863","text":"846"},{"range":"864","text":"848"},{"range":"865","text":"850"},{"range":"866","text":"852"},"Update the dependencies array to be: [ClinicServ, getFacilities, user]",{"range":"867","text":"868"},"Update the dependencies array to be: [OrderServ, getFacilities]",{"range":"869","text":"870"},{"range":"871","text":"828"},"Update the dependencies array to be: [ClinicServ, getFacilities, page, user]",{"range":"872","text":"873"},"Update the dependencies array to be: [facilityServ, getFacilities]",{"range":"874","text":"875"},{"range":"876","text":"828"},"Update the dependencies array to be: [billMode, medication, source]",{"range":"877","text":"878"},"Update the dependencies array to be: [BillServ, cleanup, getFacilities]",{"range":"879","text":"880"},{"range":"881","text":"822"},{"range":"882","text":"824"},{"range":"883","text":"826"},{"range":"884","text":"828"},{"range":"885","text":"858"},{"range":"886","text":"848"},"Update the dependencies array to be: [setUser, user]",{"range":"887","text":"888"},"Update the dependencies array to be: [ClientServ, getFacilities, user]",{"range":"889","text":"890"},{"range":"891","text":"858"},{"range":"892","text":"848"},{"range":"893","text":"870"},{"range":"894","text":"824"},"Update the dependencies array to be: [OrderServ, state.currentClients]",{"range":"895","text":"896"},"Update the dependencies array to be: [DocumentClassServ, getFacilities]",{"range":"897","text":"898"},"Update the dependencies array to be: [user.currentEmployee.facilityDetail._id, user.currentEmployee.facilityDetail.facilityName]",{"range":"899","text":"900"},{"range":"901","text":"870"},"Update the dependencies array to be: [simpa, value]",{"range":"902","text":"903"},{"range":"904","text":"828"},"Update the dependencies array to be: [getTotal, medication, productItem.length, source, state.financeModule]",{"range":"905","text":"906"},"Update the dependencies array to be: [getTotal, productItem, totalamount]",{"range":"907","text":"908"},{"range":"909","text":"858"},{"range":"910","text":"848"},[8802,8804],"[BillServ, getFacilities]",[9216,9242],"[selectedOrders, state.financeModule.show]",[17716,17718],"[state.DispenseModule.selectedDispense, state.currentClients]",[18543,18545],"[BillServ, state.currentClients]",[11447,11453],"[date, documentNo, quantity, sellingprice, source, totalamount, type]",[17373,17394],"[getFacilities, medication, productItem.length, source, state.financeModule]",[17952,17965],"[getTotal, productItem]",[19821,19823],"[SubwalletServ, getFacilities, setState]",[3294,3296],"[reAuth, setUser, user]",[1257,1259],"[handleChangeStore, selectedStore]",[1106,1108],"[selectedClinic]",[2746,2752],"[setValue, user]",[14951,14953],"[EmployeeServ, getFacilities, user]",[16336,16338],"[InventoryServ, getFacilities, user]",[16478,16511],"[getFacilities, state.StoreModule.selectedStore]",[22339,22350],"[Inventory, getFacilities]",[28037,28039],"[handleSetPrice]",[16336,16338],[16478,16511],[22339,22350],[28037,28039],[21183,21185],"[ProductEntryServ, getFacilities, state.StoreModule.selectedStore]",[21387,21420],[7305,7311],[25911,25913],[26115,26148],[16336,16338],[16478,16511],[22351,22362],[28049,28051],[14984,14986],"[ClinicServ, getFacilities, user]",[5864,5866],"[OrderServ, getFacilities]",[6347,6353],[7642,7644],"[ClinicServ, getFacilities, page, user]",[10690,10692],"[facilityServ, getFacilities]",[12109,12115],[19059,19071],"[billMode, medication, source]",[8955,8957],"[BillServ, cleanup, getFacilities]",[9811,9837],[18311,18313],[19138,19140],[7409,7415],[26208,26210],[26412,26445],[3526,3528],"[setUser, user]",[26612,26614],"[ClientServ, getFacilities, user]",[21183,21185],[21387,21420],[8196,8198],[15602,15604],[16433,16435],"[OrderServ, state.currentClients]",[11271,11273],"[DocumentClassServ, getFacilities]",[9033,9035],"[user.currentEmployee.facilityDetail._id, user.currentEmployee.facilityDetail.facilityName]",[20188,20190],[48269,48276],"[simpa, value]",[7409,7415],[12809,12830],"[getTotal, medication, productItem.length, source, state.financeModule]",[13186,13199],"[getTotal, productItem, totalamount]",[28393,28395],[28597,28630]]
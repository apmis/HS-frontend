[{"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js":"1","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js":"2","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js":"3","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js":"4","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js":"5","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Facility.js":"6","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js":"7","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js":"8","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\HSModules.js":"9","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js":"10","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js":"11","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\reportWebVitals.js":"12","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryReport.js":"13","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js":"14","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js":"15","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js":"16","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryHome.js":"17","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\DeptUnits.js":"18","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Roaster.js":"19","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js":"20","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Location.js":"21","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Store.js":"22","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js":"23","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Accessibility.js":"24","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js":"25","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js":"26","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js":"27","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js":"28","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FacilityModule.js":"29","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Products.js":"30"},{"size":3113,"mtime":1611869680847,"results":"31","hashOfConfig":"32"},{"size":6522,"mtime":1611528374917,"results":"33","hashOfConfig":"32"},{"size":38868,"mtime":1611869852860,"results":"34","hashOfConfig":"32"},{"size":52843,"mtime":1611759304873,"results":"35","hashOfConfig":"32"},{"size":3070,"mtime":1611089651447,"results":"36","hashOfConfig":"32"},{"size":29287,"mtime":1610499792755,"results":"37","hashOfConfig":"32"},{"size":40586,"mtime":1611144169606,"results":"38","hashOfConfig":"32"},{"size":958,"mtime":1611095384833,"results":"39","hashOfConfig":"32"},{"size":156,"mtime":1610340977169,"results":"40","hashOfConfig":"32"},{"size":602,"mtime":1610166221216,"results":"41","hashOfConfig":"32"},{"size":500,"mtime":1606167681327,"results":"42","hashOfConfig":"32"},{"size":362,"mtime":1606167681327,"results":"43","hashOfConfig":"32"},{"size":8924,"mtime":1610239695153,"results":"44","hashOfConfig":"32"},{"size":52276,"mtime":1611792286916,"results":"45","hashOfConfig":"32"},{"size":148,"mtime":1610340754492,"results":"46","hashOfConfig":"32"},{"size":144,"mtime":1610340849334,"results":"47","hashOfConfig":"32"},{"size":870,"mtime":1611328825632,"results":"48","hashOfConfig":"32"},{"size":153,"mtime":1610341642391,"results":"49","hashOfConfig":"32"},{"size":142,"mtime":1610340882234,"results":"50","hashOfConfig":"32"},{"size":9318,"mtime":1610307391617,"results":"51","hashOfConfig":"32"},{"size":40633,"mtime":1611172112597,"results":"52","hashOfConfig":"32"},{"size":40449,"mtime":1611328408056,"results":"53","hashOfConfig":"32"},{"size":146,"mtime":1610340786924,"results":"54","hashOfConfig":"32"},{"size":153,"mtime":1610345735519,"results":"55","hashOfConfig":"32"},{"size":7947,"mtime":1611557856981,"results":"56","hashOfConfig":"32"},{"size":161,"mtime":1610350517503,"results":"57","hashOfConfig":"32"},{"size":412,"mtime":1610551204385,"results":"58","hashOfConfig":"32"},{"size":9542,"mtime":1610481859369,"results":"59","hashOfConfig":"32"},{"size":6714,"mtime":1610347518133,"results":"60","hashOfConfig":"32"},{"size":40739,"mtime":1611416060016,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"vuhkqw",{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js",["136","137"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js",["138","139","140","141","142"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js",["143","144","145","146","147","148","149","150"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Inventory() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedInventory,setSelectedInventory]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Inventory  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <InventoryList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.InventoryModule.show ==='create')&&<InventoryCreate />}\r\n                {(state.InventoryModule.show ==='detail')&&<InventoryDetail  />}\r\n                {(state.InventoryModule.show ==='modify')&&<InventoryModify Inventory={selectedInventory} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function InventoryCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeInventory.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        InventoryServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Inventory successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Inventory created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Inventory ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Inventory: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field\">    \r\n                <div class=\"control\">\r\n                    <div class=\"select is-small\">\r\n                        <select>\r\n                            <option>Purchase Invoice </option>\r\n                            <option>Initialization</option>\r\n                            <option>Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> {/* Audit/initialization/Purchase Invoice */}\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"supplier\" type=\"text\" placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"date\" type=\"text\" placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"totalamount\" type=\"text\" placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n         {/* array of inventory items */}\r\n         <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\"> +</span>\r\n                    </button>\r\n                </p>\r\n           <div className=\"field\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } /* add array no */ name=\"productId\" type=\"text\" placeholder=\"Product Id\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"quantity\" type=\"text\" placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                <label className=\"label is-small\">Base Unit</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"costprice\" type=\"text\" placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function InventoryList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedInventory, setSelectedInventory]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n    }\r\n\r\n    const handleRow= async(Inventory)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Inventory)\r\n\r\n        await setSelectedInventory(Inventory)\r\n\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       InventoryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Inventory  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Inventory, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findInventory= await InventoryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findInventory.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findInventory= await InventoryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findInventory.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Inventory  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                InventoryServ.on('created', (obj)=>getFacilities())\r\n                InventoryServ.on('updated', (obj)=>getFacilities())\r\n                InventoryServ.on('patched', (obj)=>getFacilities())\r\n                InventoryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n        \r\n        useEffect(() => {\r\n            getFacilities()\r\n            return () => {\r\n               \r\n            }\r\n        }, [state.StoreModule.selectedStore])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Inventory\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Inventories </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Category\">Category</abbr></th>\r\n                                        <th>Product</th>\r\n                                        <th><abbr title=\"Quantity\">Quantity</abbr></th>\r\n                                        <th><abbr title=\"Base Unit\">Base Unit</abbr></th>\r\n                                        <th><abbr title=\"Stock Value\">Stock Value</abbr></th>\r\n                                         <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                                        <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                                        <th><abbr title=\"Re-Order Level\">Re-Order Level</abbr></th>\r\n                                        <th><abbr title=\"Expiry\">Expiry</abbr></th> \r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Inventory, i)=>(\r\n\r\n                                            <tr key={Inventory._id} onClick={()=>handleRow(Inventory)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{Inventory.productDetail.category}</td>\r\n                                            <th>{Inventory.productDetail.name}</th>\r\n                                            <td>{Inventory.quantity}</td>\r\n                                            <td>{Inventory.productDetail.baseunit}</td>\r\n                                            <td>{Inventory.stockvalue}</td>\r\n                                            <td>{Inventory.costprice}</td>\r\n                                            <td>{Inventory.sellingprice}</td>\r\n                                            <td>{Inventory.reorder_level}</td> \r\n                                            <td>{Inventory.expiry}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function InventoryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const InventoryServ=client.service('/Inventory')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const {user} = useContext(UserContext) //,setUser\r\n    \r\n   \r\n\r\n   const Inventory =state.InventoryModule.selectedInventory \r\n   console.log(\"selected\",Inventory)\r\n\r\n   \r\n  const getFacilities= async()=>{\r\n    \r\n    \r\n     const findProductEntry= await client.service('productentry').find(\r\n        {query: {\r\n            'productitems.productId':Inventory.productId,\r\n            facility:user.currentEmployee.facilityDetail._id,\r\n            storeId:state.StoreModule.selectedStore._id,\r\n            $limit:20,\r\n            $sort: {\r\n                createdAt: -1\r\n            }\r\n            }})\r\n\r\n        console.log(findProductEntry)\r\n       }\r\n    \r\n       useEffect(() => {\r\n        getFacilities()\r\n           return () => {\r\n               \r\n           }\r\n       }, [Inventory])\r\n /* await setFacilities(findProductEntry.data)\r\n        }\r\n        else {\r\n            if (user.stacker){ */\r\n                /* toast({\r\n                    message: 'You do not qualify to view this',\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  }) \r\n                  return */\r\n               /*  const findProductEntry= await ProductEntryServ.find(\r\n                    {query: {\r\n                        \r\n                        $limit:20,\r\n                        $sort: {\r\n                            createdAt: -1\r\n                        }\r\n                        }})\r\n    \r\n            await setFacilities(findProductEntry.data)\r\n\r\n            }\r\n        }  */\r\n  /*   .then((res)=>{\r\n        console.log(res)\r\n            setFacilities(res.data)\r\n            setMessage(\" ProductEntry  fetched successfully\")\r\n            setSuccess(true)\r\n        })\r\n        .catch((err)=>{\r\n            setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n            setError(true)\r\n        }) */\r\n    \r\n    \r\n\r\n\r\n\r\n    const handleEdit= async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Inventory Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Product Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"><strong> {Inventory.name} </strong></span>\r\n                        </td>\r\n                    </tr>\r\n                   {/*  <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Inventory Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"InventoryType\">{Inventory.InventoryType} </span> \r\n                    </td>\r\n                </tr> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Set Price\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\"  /*  onClick={handleSetPrice} */>\r\n                        Audit\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-info is-small\" /* onClick={handleEdit} */>\r\n                        Transaction History\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" /* onClick={handleEdit} */>\r\n                        Reorder Level\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function InventoryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    const [billservice,setBillService] = useState()\r\n    // eslint-disable-next-line \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const billServ=client.service('billing')\r\n\r\n    const Inventory =state.InventoryModule.selectedInventory // set inventory\r\n    const handleSetPrice = async()=>{\r\n    \r\n        const service = await  billServ.get(Inventory.billingId) // get the service\r\n            const contractSel= service.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n            \r\n            setValue(\"price\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"oldprice\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            await setBillService(service)\r\n            console.log(contractSel,service)\r\n    }\r\n \r\n        useEffect(() => {\r\n            handleSetPrice()\r\n     \r\n            return () => {\r\n                \r\n            }\r\n        },[])\r\n\r\n   const handleCancel=async()=>{\r\n   \r\n    const    newInventoryModule={\r\n        selectedInventory:{},\r\n        show :'detail'\r\n      }\r\n        await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n            const    newInventoryModule={\r\n                selectedInventory:{},\r\n                show :'detail'\r\n            }\r\n        setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n\r\n        }\r\n\r\n\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Inventory._id\r\n        if (conf){\r\n             \r\n        InventoryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Inventory successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Inventory deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Inventory, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n       // data.facility=Inventory.facility\r\n          //console.log(data);\r\n          const contractSel= billservice.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n          contractSel[0].price=data.price \r\n          billServ.patch(billservice._id,billservice)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Inventory successfully\")\r\n                 toast({\r\n                    message: 'Price updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Price, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            }) \r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Set Price for {Inventory.name} per {Inventory.baseunit}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> New Selling Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"price\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Old Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"oldprice\" type=\"text\" placeholder=\"Inventory Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n           \r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='name' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js",["151","152","153","154","155","156","157"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js",["158","159","160"],"import React, {useState,useContext} from 'react'\r\nimport client from '../feathers'\r\nimport { useForm } from \"react-hook-form\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport {UserContext} from '../context'\r\n\r\nexport default function Login() {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [error, setError] =useState(true)\r\n    const [errorMessage,setErrorMessage] = useState(\"\")\r\n    const userServ=client.service('/users')\r\n    const history = useHistory()\r\n    const {user,setUser} = useContext(UserContext)\r\n\r\n   \r\nconst onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setErrorMessage(\"\")\r\n        setError(false)\r\n           const  email=data.email\r\n           const password=data.password\r\n         \r\n          \r\n          client.authenticate({\r\n            strategy:'local',\r\n            email,\r\n            password\r\n        }).then(async (res)=>{\r\n                console.log(JSON.stringify(res.user))\r\n                e.target.reset();\r\n               await setUser(res.user)\r\n               console.log(user)\r\n               localStorage.setItem(\"user\",JSON.stringify(res.user))\r\n               history.push(\"/app\")\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setErrorMessage(\"Error loggin in User, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <section className=\"section\">\r\n        <div className=\"container\">\r\n        <div className=\"columns is-centered\">\r\n        <div className=\"column is-4 \">\r\n        <div className=\"card v-centered\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Health Stack\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n           <div className=\"field\">\r\n            <p className=\"control has-icons-left has-icons-right\">\r\n                <input className=\"input\" ref={register({ required: true })}  name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n                  <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-envelope\"></i>\r\n                </span>\r\n                \r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <input className=\"input\" ref={register({ required: true })} name=\"password\" type=\"password\" placeholder=\"Password\"/>\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"fas fa-lock\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control\">\r\n                <button className=\"button is-success is-small\">\r\n                    Login\r\n                </button>\r\n            </p>\r\n        </div>\r\n        { error && <div className=\"message\"> {errorMessage}</div>}\r\n        </form>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </section>\r\n    )\r\n}\r\n",["161","162"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Facility.js",["163"],"import React, {useState,useContext, useEffect} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\n\r\nexport default function Facility() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedFacility,setSelectedFacility]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    //console.log(\"facility parent\", state)\r\n    \r\n\r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Facility  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <FacilityList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.facilityModule.show ==='create')&&<FacilityCreate />}\r\n                {(state.facilityModule.show ==='detail')&&<FacilityDetail  />}\r\n                {(state.facilityModule.show ==='modify')&&<FacilityModify facility={selectedFacility} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function FacilityCreate(){\r\n    const { register, handleSubmit} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n\r\n    \r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n                setMessage(\"Created facility successfully\")\r\n                setSuccess(true)\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Facility\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function FacilityList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const facilityServ=client.service('facility')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedFacility, setSelectedFacility]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n\r\n   \r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(facility)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",facility)\r\n\r\n        await setSelectedFacility(facility)\r\n\r\n        const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='facilityName'\r\n       console.log(val)\r\n       facilityServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" facility  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n\r\n           /*  if (val.length>2){\r\n                console.log(\"in\")\r\n               \r\n            }\r\n\r\n        }\r\n     */\r\n        const getFacilities=()=>{\r\n            facilityServ.find({query: {\r\n              \r\n                $limit:20,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }})\r\n            .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" facility  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                    setError(true)\r\n                })\r\n\r\n        }\r\n\r\n    useEffect(() => {\r\n        getFacilities()\r\n\r\n        facilityServ.on('created', (obj)=>getFacilities())\r\n        facilityServ.on('updated', (obj)=>getFacilities())\r\n        facilityServ.on('patched', (obj)=>getFacilities())\r\n        facilityServ.on('removed', (obj)=>getFacilities())\r\n        return () => {\r\n           \r\n        }\r\n    },[])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n            <>   \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Facilities </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"S/No\">S/No</abbr></th>\r\n                                        <th>Facility Name</th>\r\n                                        <th><abbr title=\"Address\"> Address</abbr></th>\r\n                                        <th><abbr title=\"City\">City</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th><abbr title=\"Category\">Category</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((facility, i)=>(\r\n\r\n                                            <tr key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{facility.facilityName}</th>\r\n                                            <td>{facility.facilityAddress}</td>\r\n                                            <td>{facility.facilityCity}</td>\r\n                                            <td>{facility.facilityContactPhone}</td>\r\n                                            <td>{facility.facilityEmail}</td>\r\n                                            <td>{facility.facilityType}</td>\r\n                                            <td>{facility.facilityCategory}</td>\r\n                                           \r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>               \r\n            </>\r\n              \r\n    )\r\n}\r\n\r\nexport function FacilityDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const facility =state.facilityModule.selectedFacility \r\n\r\n    const handleEdit= async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Facility Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <fieldset>\r\n                <div className=\"field \">\r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: <span className=\"is-small \"   name=\"facilityName\"> {facility.facilityName} </span>\r\n                        </label>\r\n                \r\n                        \r\n             \r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Address:\r\n                   \r\n                    <span className=\"is-small \"  name=\"facilityAddress\">{facility.facilityAddress} </span> \r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>City: \r\n                \r\n                    <span className=\"is-small \"  name=\"facilityCity\">{facility.facilityCity}</span> \r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    <span className=\"is-small \"  name=\"facilityContactPhone\" >{facility.facilityContactPhone}</span>\r\n                        </label>\r\n \r\n                \r\n                \r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     <span className=\"is-small \"  name=\"facilityEmail\" >{facility.facilityEmail}</span>\r\n                    \r\n                         </label>\r\n\r\n               \r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>CEO:\r\n                    <span className=\"is-small \"  name=\"facilityOwner\">{facility.facilityOwner}</span>\r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Type:              \r\n                    <span className=\"is-small \"  name=\"facilityType\">{facility.facilityType}</span>\r\n                </label>\r\n \r\n                </div>\r\n            <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-small \"  name= \"facilityCategory\">{facility.facilityCategory}</span>\r\n                </label>\r\n\r\n\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </fieldset>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function FacilityModify(){\r\n    const { register, handleSubmit, setValue,reset } = useForm(); //watch, errors,\r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const facility =state.facilityModule.selectedFacility \r\n\r\n        useEffect(() => {\r\n            setValue(\"facilityName\", facility.facilityName,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityAddress\", facility.facilityAddress,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityCity\", facility.facilityCity,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityContactPhone\", facility.facilityContactPhone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityEmail\", facility.facilityEmail,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityOwner\", facility.facilityOwner,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityType\", facility.facilityType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityCategory\", facility.facilityCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newfacilityModule={\r\n        selectedFacility:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=facility._id\r\n        if (conf){\r\n             \r\n        facilityServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n                setMessage(\"Deleted facility successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200);\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error deleting facility, probable network issues \"+ err )\r\n                setError(true)\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 200);\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        console.log(data)\r\n          //data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.update(facility._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n                setMessage(\"updated facility successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Facility Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\">Name \r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Address\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">City\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">CEO\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Type\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div>\r\n            <div className=\"field  is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={handleDelete}>\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   ",["164","165"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js",["166","167"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Employee() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedEmployee,setSelectedEmployee]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Employee  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <EmployeeList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.EmployeeModule.show ==='create')&&<EmployeeCreate />}\r\n                {(state.EmployeeModule.show ==='detail')&&<EmployeeDetail  />}\r\n                {(state.EmployeeModule.show ==='modify')&&<EmployeeModify Employee={selectedEmployee} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function EmployeeCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeEmployee.FacilityId)//\r\n      if (!user.stacker){\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    },[user])\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          if (user.currentEmployee){\r\n         // data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        EmployeeServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Employee successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Employee created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating employee ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Employee\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            { error && <div className=\"is-danger\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"lastname\" type=\"text\" placeholder=\"Last Name\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function EmployeeList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedEmployee, setSelectedEmployee]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Employee)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Employee)\r\n\r\n        await setSelectedEmployee(Employee)\r\n\r\n        const    newEmployeeModule={\r\n            selectedEmployee:Employee,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='firstname'\r\n       console.log(val)\r\n       EmployeeServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Employee  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Employee, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findEmployee= await EmployeeServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findEmployee.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findEmployee= await EmployeeServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findEmployee.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Employee  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Employee, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                EmployeeServ.on('created', (obj)=>getFacilities())\r\n                EmployeeServ.on('updated', (obj)=>getFacilities())\r\n                EmployeeServ.on('patched', (obj)=>getFacilities())\r\n                EmployeeServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Employees </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>First Name</th>\r\n                                        <th><abbr title=\"Last Name\">Last Name</abbr></th>\r\n                                        <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th>\r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Employee, i)=>(\r\n\r\n                                            <tr key={Employee._id} onClick={()=>handleRow(Employee)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Employee.firstname}</th>\r\n                                            <td>{Employee.lastname}</td>\r\n                                            <td>{Employee.profession}</td>\r\n                                            <td>{Employee.phone}</td>\r\n                                            <td>{Employee.email}</td>\r\n                                            <td>{Employee.department}</td>\r\n                                            <td>{Employee.deptunit}</td>\r\n                                            <td>{Employee.facility}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function EmployeeDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const EmployeeServ=client.service('/Employee')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Employee =state.EmployeeModule.selectedEmployee \r\n\r\n    const handleEdit= async()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:Employee,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Employee Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <fieldset>\r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        First Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-medium \"   name=\"EmployeeName\"> {Employee.firstname} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Last Name:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"EmployeeAddress\">{Employee.lastname} </span> \r\n                    </td>\r\n                </tr>\r\n                    <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"EmployeeCity\">{Employee.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-small \"  name=\"EmployeeContactPhone\" >{Employee.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-small \"  name=\"EmployeeEmail\" >{Employee.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"EmployeeOwner\">{Employee.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"EmployeeType\">{Employee.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr>\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-small \"  name= \"EmployeeCategory\">{Employee.EmployeeCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </fieldset>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function EmployeeModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Employee =state.EmployeeModule.selectedEmployee \r\n\r\n        useEffect(() => {\r\n            setValue(\"firstname\", Employee.firstname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"lastname\", Employee.lastname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"profession\", Employee.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Employee.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Employee.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Employee.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Employee.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n          /*   setValue(\"EmployeeCategory\", Employee.EmployeeCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newEmployeeModule={\r\n        selectedEmployee:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Employee._id\r\n        if (conf){\r\n             \r\n        EmployeeServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Employee successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Employee deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Employee, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Employee, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Employee.facility\r\n          //console.log(data);\r\n          \r\n        EmployeeServ.patch(Employee._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Employee successfully\")\r\n                 toast({\r\n                    message: 'Employee updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Employee, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Employee, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Employee Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\">First Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Last Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"lastname\" type=\"text\" placeholder=\"Last Name\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Employee Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"EmployeeCategory\" type=\"text\" placeholder=\"Employee Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            <div className=\"block\">\r\n            <div className=\"field  is-grouped\">\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}",["168","169"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\HSModules.js",[],["170","171"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js",[],["172","173"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryReport.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js",["174","175","176","177","178","179","180"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function ProductEntry() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ProductEntryList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ProductEntryModule.show ==='create')&&<ProductEntryCreate />}\r\n                {(state.ProductEntryModule.show ==='detail')&&<ProductEntryDetail  />}\r\n                {(state.ProductEntryModule.show ==='modify')&&<ProductEntryModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductEntryCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Purchase Invoice\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(\"\")\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [baseunit,setBaseunit] = useState(\"\")\r\n    const [quantity,setQuantity] = useState()\r\n    const [costprice,setCostprice] = useState()\r\n    const [productItem,setProductItem] = useState([])\r\n    const {state}=useContext(ObjectContext)\r\n    \r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const productItemI={\r\n        productId,\r\n        name,\r\n        quantity,\r\n        costprice,\r\n        amount:quantity*costprice,\r\n        baseunit\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setProductId(obj._id)\r\n        setName(obj.name)\r\n        setBaseunit(obj.baseunit)\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n    const handleClickProd=async()=>{\r\n        await setSuccess(false)\r\n        setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n        setName(\"\")\r\n        setBaseunit(\"\")\r\n        setQuantity(\"\")\r\n        setCostprice(\"\")\r\n       await setSuccess(true)\r\n       console.log(success)\r\n       console.log(productItem)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const resetform=()=>{\r\n     setType(\"Purchase Invoice\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setBaseunit()\r\n    setCostprice()\r\n    setProductItem([])\r\n    }\r\n\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        await setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n        productEntry.productitems=productItem\r\n        productEntry.createdby=user._id\r\n        productEntry.transactioncategory=\"credit\"\r\n\r\n          console.log(\"b4 facility\",productEntry);\r\n          if (user.currentEmployee){\r\n         productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }else{\r\n            toast({\r\n                message: 'You can not add inventory to any organization',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n          }\r\n          if (state.StoreModule.selectedStore._id){\r\n            productEntry.storeId=state.StoreModule.selectedStore._id\r\n          }else{\r\n            toast({\r\n                message: 'You need to select a store before adding inventory',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n\r\n          }\r\n          console.log(\"b4 create\",productEntry);\r\n        ProductEntryServ.create(productEntry)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                resetform()\r\n               /*  setMessage(\"Created ProductEntry successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'ProductEntry created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create ProductEntry: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n            <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n            <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType}>\r\n                           <option value=\"\">Choose Type </option>\r\n                            <option value=\"Purchase Invoice\">Purchase Invoice </option>\r\n                            <option value=\"Initialization\">Initialization</option>\r\n                            <option value=\"Audit\">Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"supplier\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n           \r\n            </div>\r\n            </div> {/* horizontal end */}\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                    <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n               <div className=\"field is-horizontal\">\r\n               <div className=\"field-body\">\r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={async e=> await setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-coins\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n\r\n                </div> \r\n                </div> \r\n               \r\n                </form>   \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Product Items:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={e=>setQuantity(e.target.value)} placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n        <label >{baseunit}</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"costprice\" value={costprice} type=\"text\" onChange={e=>setCostprice(e.target.value)} placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-dollar-sign\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n            \r\n       {(productItem.length>0) && <div>\r\n            <label>Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Create\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductEntryList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProductEntry, setSelectedProductEntry]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedProductEntry(ProductEntry)\r\n\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductEntryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                storeId:state.StoreModule.selectedStore._id,\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProductEntry= await ProductEntryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProductEntry.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        /* toast({\r\n                            message: 'You do not qualify to view this',\r\n                            type: 'is-danger',\r\n                            dismissible: true,\r\n                            pauseOnHover: true,\r\n                          }) \r\n                          return */\r\n                        const findProductEntry= await ProductEntryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProductEntry.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" ProductEntry  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (!state.StoreModule.selectedStore){\r\n                    toast({\r\n                        message: 'kindly select a store',\r\n                        type: 'is-danger',\r\n                        dismissible: true,\r\n                        pauseOnHover: true,\r\n                      }) \r\n                      return\r\n                    getFacilities()\r\n\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductEntryServ.on('created', (obj)=>getFacilities())\r\n                ProductEntryServ.on('updated', (obj)=>getFacilities())\r\n                ProductEntryServ.on('patched', (obj)=>getFacilities())\r\n                ProductEntryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                console.log(\"store changed\")\r\n                return () => {\r\n                   \r\n                }\r\n            }, [state.StoreModule.selectedStore])\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {state.StoreModule.selectedStore?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search ProductEntry\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Product Additions to Inventory </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th>Source</th>\r\n                                        <th><abbr title=\"Document No\">Document No</abbr></th>\r\n                                        <th><abbr title=\"Total Amount\">Total Amount</abbr></th>\r\n                                        <th><abbr title=\"Enteredby\">Entered By</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{ProductEntry.date}</td>\r\n                                            <th>{ProductEntry.type}</th>\r\n                                            <td>{ProductEntry.source}</td>\r\n                                            <td>{ProductEntry.documentNo}</td>\r\n                                            <td>{ProductEntry.totalamount}</td>\r\n                                            <td>{ProductEntry.enteredby}</td>\r\n                                            <td><span className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading... Choose a Store</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductEntryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductEntryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductEntryModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" onClick={handleAddproduct}> <span>Add {val} to product list</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.name}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        <ProductCreate />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js",[],["181","182"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryHome.js",["183","184","185","186","187","188"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\DeptUnits.js",[],["189","190"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Roaster.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Location.js",["191","192","193","194"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Store.js",["195","196","197","198","199"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Accessibility.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js",["200","201","202","203"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js",["204","205"],"import React, {useState} from 'react'\r\nimport client from '../feathers'\r\nimport { useForm } from \"react-hook-form\";\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nexport default function SignUp() {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [error, setError] =useState(true)\r\n    const [errorMessage,setErrorMessage] = useState(\"\")\r\n    const userServ=client.service('/users')\r\n    const history = useHistory()\r\n\r\n   \r\n      const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setErrorMessage(\"\")\r\n        setError(false)\r\n          if (data.password !==data.password2){\r\n              setErrorMessage(\"Passwords not identical\")\r\n              setError(true)\r\n              return\r\n          }\r\n        \r\n          delete data.password2\r\n          console.log(data);\r\n          userServ.create(data)\r\n            .then((res)=>{\r\n                console.log(JSON.stringify(res))\r\n                alert(\"User Created Successfully\")\r\n                e.target.reset();\r\n                history.push(\"/\")\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setErrorMessage(\"Error with creating User, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        \r\n        \r\n\r\n\r\n      } \r\n\r\n    return (\r\n        <section className=\"section\">\r\n            <div className=\"container signupcenter\">\r\n                <div className=\"columns\">\r\n                    <div className=\"column is-4 is-offset-4\">\r\n                        <div className=\"card \">\r\n                            <header className=\"card-header\"> \r\n                                <p className=\"card-header-title\">HealthStack: Sign Up</p>\r\n                            </header>\r\n                        <div className=\"card-content\">\r\n                            <form onSubmit={handleSubmit(onSubmit)}>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small\">First Name\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\"  ref={register({ required: true })}  type=\"text\" placeholder=\"Enter Full Name\" name=\"firstname\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small\">Last Name\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\"  ref={register({ required: true })}  type=\"text\" placeholder=\"Enter Full Name\" name=\"lastname\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Phone Number\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"text\" placeholder=\"Enter Phone Number\" name=\"phone\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Email\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"text\" placeholder=\"Enter email\" name=\"email\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            \r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Password\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"password\" placeholder=\"Password\" name=\"password\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Repeat Password\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"password\" placeholder=\"Password\" name=\"password2\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                    \r\n                        {/* <div className=\"field\">\r\n                            <label className=\"label is-small\">Username\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input is-success  is-small\" type=\"text\" placeholder=\"Text input\" value={\"bulma\"} />\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-user\"></i>\r\n                                </span>\r\n                                <span className=\"icon is-small is-right\">\r\n                                <i className=\"fas fa-check\"></i>\r\n                                </span>\r\n                            </div>\r\n                            </label>\r\n                            <p className=\"help is-success\">This username is available</p>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label className=\"label is-small\">Email</label>\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input is-danger is-small\" type=\"email\" placeholder=\"Email input\" value=\"hello@\" />\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-envelope\"></i>\r\n                                </span>\r\n                                <span className=\"icon is-small is-right\">\r\n                                <i className=\"fas fa-exclamation-triangle\"></i>\r\n                                </span>\r\n                            </div>\r\n                            <p className=\"help is-danger\">This email is invalid</p>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                        <label className=\"label is-small\">Subject</label>\r\n                        <div className=\"control is-small\">\r\n                            <div className=\"select\">\r\n                            <select>\r\n                                <option>Select dropdown</option>\r\n                                <option>With options</option>\r\n                            </select>\r\n                            </div>\r\n                        </div>\r\n                        </div> */}\r\n\r\n                    {/*  <div className=\"field\">\r\n                            <label className=\"label\">Message</label>\r\n                            <div className=\"control\">\r\n                                <textarea className=\"textarea is-small\" placeholder=\"Textarea\"></textarea>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                    {/*  <div className=\"field\">\r\n                            <div className=\"control is-small\">\r\n                                <label className=\"checkbox\">\r\n                                <input type=\"checkbox\"/>\r\n                                I agree to the <a href=\"./terms\">terms and conditions</a>\r\n                                </label>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                    {/*  <div className=\"field\">\r\n                            <div className=\"control\">\r\n                                <label className=\"radio is-small\">\r\n                                <input type=\"radio\" name=\"question\"/>\r\n                                Yes\r\n                                </label>\r\n                                <label className=\"radio is-small\">\r\n                                <input type=\"radio\" name=\"question\" />\r\n                                No\r\n                                </label>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                        <div className=\"field is-grouped\">\r\n                            <div className=\"control\">\r\n                                <button type=\"submit\" className=\"button is-link is-small\">Submit</button>\r\n                            </div>\r\n                           {/*  <div className=\"control\">\r\n                                <button className=\"button is-link is-light is-small\" >Cancel</button>\r\n                            </div> */}\r\n                        </div>\r\n                        { error && \r\n                        <div className=\"message\"> {errorMessage}                            \r\n                        </div>\r\n                        }\r\n                        </form>\r\n\r\n                        </div>\r\n                        </div>\r\n                        </div>\r\n                \r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FacilityModule.js",["206"],"import React from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink} from 'react-router-dom'\r\nimport CareTeam from './facility/CareTeam'\r\nimport Department from './facility/Department'\r\nimport DeptUnits from './facility/DeptUnits'\r\nimport FacilityHome from './facility/FacilityHome'\r\nimport Employee from './facility/Employee'\r\nimport Facility from './facility/Facility'\r\nimport HSModules from './facility/HSModules'\r\nimport Location from './facility/Location'\r\nimport Roaster from './facility/Roaster'\r\nimport Workspace from './facility/Workspace'\r\nimport Accessibility from './facility/Accessibility'\r\n\r\nexport default function FacilityModule() {\r\n    let { path, url } = useRouteMatch();\r\n    return (\r\n            <section className=\"section has-background-info remPad\">\r\n               {/*  <div className=\"\"> */}\r\n                    <nav className=\"navbar minHt z10 has-background-info\">\r\n                        <div className=\"container \">\r\n                            <div className=\"navbar-brand \">\r\n                                <div className=\"navbar-item \">\r\n                                    <span className=\"is-size-6 has-text-weight-medium\">Health Stack::Facility</span> \r\n                                </div>\r\n                            {/* <div className=\"navbar-item\">\r\n                                <img src=\"https://bulma.io/images/bulma-type-white.png\" alt=\"Logo\" />\r\n                            </div> */}\r\n                                <span className=\"navbar-burger\" data-target=\"navbarMenuHeroB\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </span>\r\n                            </div>\r\n                            <div id=\"navbarMenuHeroB\" className=\"navbar-menu\">\r\n                                <div className=\"navbar-end\">\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}`}>Home Page</NavLink> \r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/accessibility`}>User Access</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/careteam`}>Care Teams</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/department`}>Department</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/dept-unit`}>Department Units</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/employees`}>Employees</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/facility`}>Facility</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/hsmodules`}>Modules</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/location`}>Locations</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/roaster`}>Roaster</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/workspace`}>Workspace</NavLink>\r\n                                    </div>\r\n                                    \r\n                                {/* <span className=\"navbar-item\">\r\n                                <div className=\"button is-info is-inverted\">\r\n                                    <span className=\"icon\">\r\n                                    <i className=\"fab fa-github\"></i>\r\n                                    </span>\r\n                                    <span>Download</span>\r\n                                </div>\r\n                                </span> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n               {/*  </div> */}\r\n                \r\n                {/* <div className=\"section\"> */}\r\n                {/* <div className=\"container mvUp \" > */}\r\n                       \r\n                    <Switch>\r\n                        <Route path={path} exact>\r\n                            <FacilityHome />\r\n                        </Route>\r\n                        <Route path={`${path}/accessibility`} exact >\r\n                            <Accessibility />\r\n                        </Route>\r\n                      \r\n                        <Route path={`${path}/careteam`} exact>\r\n                            <CareTeam />\r\n                        </Route>\r\n                        <Route path={`${path}/department`} exact>\r\n                            <Department/>\r\n                        </Route>\r\n                        <Route path={`${path}/dept-unit`} exact>\r\n                            <DeptUnits />\r\n                        </Route>\r\n                        <Route path={`${path}/employees`} >\r\n                            <Employee />\r\n                        </Route>\r\n                        <Route path={`${path}/facility`} exact >\r\n                            <Facility />\r\n                        </Route>\r\n                        <Route path={`${path}/hsmodules`} exact>\r\n                            <HSModules />\r\n                        </Route>\r\n                        <Route path={`${path}/location`} exact>\r\n                            <Location/>\r\n                        </Route>\r\n                        <Route path={`${path}/roaster`} exact>\r\n                            <Roaster/>\r\n                        </Route>\r\n                        <Route path={`${path}/Workspace`} exact>\r\n                            <Workspace />\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                  \r\n\r\n                \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Products.js",["207","208","209","210","211","212","213"],{"ruleId":"214","severity":1,"message":"215","line":98,"column":18,"nodeType":"216","messageId":"217","endLine":98,"endColumn":23},{"ruleId":"218","severity":1,"message":"219","line":119,"column":4,"nodeType":"220","endLine":119,"endColumn":6,"suggestions":"221"},{"ruleId":"214","severity":1,"message":"222","line":2,"column":40,"nodeType":"216","messageId":"217","endLine":2,"endColumn":44},{"ruleId":"214","severity":1,"message":"223","line":12,"column":12,"nodeType":"216","messageId":"217","endLine":12,"endColumn":16},{"ruleId":"214","severity":1,"message":"224","line":12,"column":17,"nodeType":"216","messageId":"217","endLine":12,"endColumn":24},{"ruleId":"214","severity":1,"message":"225","line":81,"column":16,"nodeType":"216","messageId":"217","endLine":81,"endColumn":20},{"ruleId":"218","severity":1,"message":"226","line":105,"column":7,"nodeType":"220","endLine":105,"endColumn":9,"suggestions":"227"},{"ruleId":"214","severity":1,"message":"228","line":43,"column":12,"nodeType":"216","messageId":"217","endLine":43,"endColumn":17},{"ruleId":"214","severity":1,"message":"229","line":45,"column":12,"nodeType":"216","messageId":"217","endLine":45,"endColumn":19},{"ruleId":"218","severity":1,"message":"230","line":416,"column":15,"nodeType":"220","endLine":416,"endColumn":17,"suggestions":"231"},{"ruleId":"218","severity":1,"message":"232","line":423,"column":12,"nodeType":"220","endLine":423,"endColumn":45,"suggestions":"233"},{"ruleId":"218","severity":1,"message":"232","line":546,"column":11,"nodeType":"220","endLine":546,"endColumn":22,"suggestions":"234"},{"ruleId":"214","severity":1,"message":"235","line":668,"column":53,"nodeType":"216","messageId":"217","endLine":668,"endColumn":59},{"ruleId":"218","severity":1,"message":"236","line":708,"column":11,"nodeType":"220","endLine":708,"endColumn":13,"suggestions":"237"},{"ruleId":"214","severity":1,"message":"238","line":731,"column":11,"nodeType":"216","messageId":"217","endLine":731,"endColumn":23},{"ruleId":"214","severity":1,"message":"228","line":44,"column":12,"nodeType":"216","messageId":"217","endLine":44,"endColumn":17},{"ruleId":"214","severity":1,"message":"229","line":46,"column":12,"nodeType":"216","messageId":"217","endLine":46,"endColumn":19},{"ruleId":"239","severity":1,"message":"240","line":541,"column":21,"nodeType":"241","messageId":"242","endLine":541,"endColumn":36},{"ruleId":"218","severity":1,"message":"243","line":559,"column":15,"nodeType":"220","endLine":559,"endColumn":17,"suggestions":"244"},{"ruleId":"218","severity":1,"message":"232","line":567,"column":16,"nodeType":"220","endLine":567,"endColumn":49,"suggestions":"245"},{"ruleId":"214","severity":1,"message":"246","line":658,"column":11,"nodeType":"216","messageId":"217","endLine":658,"endColumn":21},{"ruleId":"214","severity":1,"message":"235","line":866,"column":53,"nodeType":"216","messageId":"217","endLine":866,"endColumn":59},{"ruleId":"214","severity":1,"message":"247","line":8,"column":37,"nodeType":"216","messageId":"217","endLine":8,"endColumn":42},{"ruleId":"214","severity":1,"message":"235","line":8,"column":44,"nodeType":"216","messageId":"217","endLine":8,"endColumn":50},{"ruleId":"214","severity":1,"message":"248","line":11,"column":11,"nodeType":"216","messageId":"217","endLine":11,"endColumn":19},{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","replacedBy":"252"},{"ruleId":"218","severity":1,"message":"253","line":275,"column":7,"nodeType":"220","endLine":275,"endColumn":9,"suggestions":"254"},{"ruleId":"249","replacedBy":"255"},{"ruleId":"251","replacedBy":"256"},{"ruleId":"218","severity":1,"message":"257","line":81,"column":7,"nodeType":"220","endLine":81,"endColumn":13,"suggestions":"258"},{"ruleId":"218","severity":1,"message":"259","line":389,"column":15,"nodeType":"220","endLine":389,"endColumn":17,"suggestions":"260"},{"ruleId":"249","replacedBy":"261"},{"ruleId":"251","replacedBy":"262"},{"ruleId":"249","replacedBy":"263"},{"ruleId":"251","replacedBy":"264"},{"ruleId":"249","replacedBy":"265"},{"ruleId":"251","replacedBy":"266"},{"ruleId":"214","severity":1,"message":"228","line":44,"column":12,"nodeType":"216","messageId":"217","endLine":44,"endColumn":17},{"ruleId":"214","severity":1,"message":"229","line":46,"column":12,"nodeType":"216","messageId":"217","endLine":46,"endColumn":19},{"ruleId":"239","severity":1,"message":"240","line":537,"column":21,"nodeType":"241","messageId":"242","endLine":537,"endColumn":36},{"ruleId":"218","severity":1,"message":"243","line":555,"column":15,"nodeType":"220","endLine":555,"endColumn":17,"suggestions":"267"},{"ruleId":"218","severity":1,"message":"232","line":563,"column":16,"nodeType":"220","endLine":563,"endColumn":49,"suggestions":"268"},{"ruleId":"214","severity":1,"message":"246","line":654,"column":11,"nodeType":"216","messageId":"217","endLine":654,"endColumn":21},{"ruleId":"214","severity":1,"message":"235","line":862,"column":53,"nodeType":"216","messageId":"217","endLine":862,"endColumn":59},{"ruleId":"249","replacedBy":"269"},{"ruleId":"251","replacedBy":"270"},{"ruleId":"214","severity":1,"message":"271","line":1,"column":16,"nodeType":"216","messageId":"217","endLine":1,"endColumn":24},{"ruleId":"214","severity":1,"message":"272","line":1,"column":25,"nodeType":"216","messageId":"217","endLine":1,"endColumn":34},{"ruleId":"214","severity":1,"message":"273","line":2,"column":8,"nodeType":"216","messageId":"217","endLine":2,"endColumn":13},{"ruleId":"214","severity":1,"message":"274","line":2,"column":17,"nodeType":"216","messageId":"217","endLine":2,"endColumn":26},{"ruleId":"214","severity":1,"message":"275","line":3,"column":9,"nodeType":"216","messageId":"217","endLine":3,"endColumn":20},{"ruleId":"214","severity":1,"message":"276","line":8,"column":11,"nodeType":"216","messageId":"217","endLine":8,"endColumn":27},{"ruleId":"249","replacedBy":"277"},{"ruleId":"251","replacedBy":"278"},{"ruleId":"214","severity":1,"message":"228","line":43,"column":12,"nodeType":"216","messageId":"217","endLine":43,"endColumn":17},{"ruleId":"214","severity":1,"message":"229","line":45,"column":12,"nodeType":"216","messageId":"217","endLine":45,"endColumn":19},{"ruleId":"218","severity":1,"message":"279","line":389,"column":15,"nodeType":"220","endLine":389,"endColumn":17,"suggestions":"280"},{"ruleId":"214","severity":1,"message":"235","line":620,"column":53,"nodeType":"216","messageId":"217","endLine":620,"endColumn":59},{"ruleId":"214","severity":1,"message":"228","line":43,"column":12,"nodeType":"216","messageId":"217","endLine":43,"endColumn":17},{"ruleId":"214","severity":1,"message":"229","line":45,"column":12,"nodeType":"216","messageId":"217","endLine":45,"endColumn":19},{"ruleId":"218","severity":1,"message":"281","line":392,"column":15,"nodeType":"220","endLine":392,"endColumn":17,"suggestions":"282"},{"ruleId":"214","severity":1,"message":"235","line":623,"column":53,"nodeType":"216","messageId":"217","endLine":623,"endColumn":59},{"ruleId":"214","severity":1,"message":"238","line":696,"column":11,"nodeType":"216","messageId":"217","endLine":696,"endColumn":23},{"ruleId":"214","severity":1,"message":"222","line":2,"column":40,"nodeType":"216","messageId":"217","endLine":2,"endColumn":44},{"ruleId":"214","severity":1,"message":"275","line":11,"column":9,"nodeType":"216","messageId":"217","endLine":11,"endColumn":20},{"ruleId":"214","severity":1,"message":"283","line":14,"column":18,"nodeType":"216","messageId":"217","endLine":14,"endColumn":26},{"ruleId":"218","severity":1,"message":"284","line":30,"column":12,"nodeType":"220","endLine":30,"endColumn":14,"suggestions":"285"},{"ruleId":"214","severity":1,"message":"247","line":7,"column":37,"nodeType":"216","messageId":"217","endLine":7,"endColumn":42},{"ruleId":"214","severity":1,"message":"235","line":7,"column":44,"nodeType":"216","messageId":"217","endLine":7,"endColumn":50},{"ruleId":"214","severity":1,"message":"222","line":2,"column":40,"nodeType":"216","messageId":"217","endLine":2,"endColumn":44},{"ruleId":"214","severity":1,"message":"228","line":43,"column":12,"nodeType":"216","messageId":"217","endLine":43,"endColumn":17},{"ruleId":"214","severity":1,"message":"286","line":44,"column":12,"nodeType":"216","messageId":"217","endLine":44,"endColumn":19},{"ruleId":"214","severity":1,"message":"229","line":45,"column":12,"nodeType":"216","messageId":"217","endLine":45,"endColumn":19},{"ruleId":"214","severity":1,"message":"287","line":56,"column":11,"nodeType":"216","messageId":"217","endLine":56,"endColumn":28},{"ruleId":"218","severity":1,"message":"288","line":392,"column":15,"nodeType":"220","endLine":392,"endColumn":17,"suggestions":"289"},{"ruleId":"214","severity":1,"message":"235","line":624,"column":53,"nodeType":"216","messageId":"217","endLine":624,"endColumn":59},{"ruleId":"214","severity":1,"message":"238","line":697,"column":11,"nodeType":"216","messageId":"217","endLine":697,"endColumn":23},"no-unused-vars","'user1' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setUser' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["290"],"'Link' is defined but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","'resp' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'reAuth', 'setUser', and 'user'. Either include them or remove the dependency array.",["291"],"'error' is assigned a value but never used.","'message' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'InventoryServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["292"],"React Hook useEffect has a missing dependency: 'getFacilities'. Either include it or remove the dependency array.",["293"],["294"],"'errors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleSetPrice'. Either include it or remove the dependency array.",["295"],"'handleDelete' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","React Hook useEffect has missing dependencies: 'ProductEntryServ', 'getFacilities', and 'state.StoreModule.selectedStore'. Either include them or remove the dependency array.",["296"],["297"],"'handleEdit' is assigned a value but never used.","'watch' is assigned a value but never used.","'userServ' is assigned a value but never used.","no-native-reassign",["298"],"no-negated-in-lhs",["299"],"React Hook useEffect has missing dependencies: 'facilityServ' and 'getFacilities'. Either include them or remove the dependency array.",["300"],["298"],["299"],"React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["301"],"React Hook useEffect has missing dependencies: 'EmployeeServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["302"],["298"],["299"],["298"],["299"],["298"],["299"],["303"],["304"],["298"],["299"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Store' is defined but never used.","'StoreList' is defined but never used.","'UserContext' is defined but never used.","'handleCloseModal' is assigned a value but never used.",["298"],["299"],"React Hook useEffect has missing dependencies: 'LocationServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["305"],"React Hook useEffect has missing dependencies: 'StoreServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["306"],"'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleChangeStore' and 'selectedStore'. Either include them or remove the dependency array.",["307"],"'success' is assigned a value but never used.","'getSearchfacility' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ProductServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["308"],{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"315","fix":"323"},"no-global-assign","no-unsafe-negation",{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"321","fix":"330"},{"desc":"315","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},"Update the dependencies array to be: [setUser, user]",{"range":"340","text":"341"},"Update the dependencies array to be: [reAuth, setUser, user]",{"range":"342","text":"343"},"Update the dependencies array to be: [InventoryServ, getFacilities, user]",{"range":"344","text":"345"},"Update the dependencies array to be: [getFacilities, state.StoreModule.selectedStore]",{"range":"346","text":"347"},"Update the dependencies array to be: [Inventory, getFacilities]",{"range":"348","text":"349"},"Update the dependencies array to be: [handleSetPrice]",{"range":"350","text":"351"},"Update the dependencies array to be: [ProductEntryServ, getFacilities, state.StoreModule.selectedStore]",{"range":"352","text":"353"},{"range":"354","text":"347"},"Update the dependencies array to be: [facilityServ, getFacilities]",{"range":"355","text":"356"},"Update the dependencies array to be: [setValue, user]",{"range":"357","text":"358"},"Update the dependencies array to be: [EmployeeServ, getFacilities, user]",{"range":"359","text":"360"},{"range":"361","text":"353"},{"range":"362","text":"347"},"Update the dependencies array to be: [LocationServ, getFacilities, user]",{"range":"363","text":"364"},"Update the dependencies array to be: [StoreServ, getFacilities, user]",{"range":"365","text":"366"},"Update the dependencies array to be: [handleChangeStore, selectedStore]",{"range":"367","text":"368"},"Update the dependencies array to be: [ProductServ, getFacilities, user]",{"range":"369","text":"370"},[2793,2795],"[setUser, user]",[2942,2944],"[reAuth, setUser, user]",[16336,16338],"[InventoryServ, getFacilities, user]",[16478,16511],"[getFacilities, state.StoreModule.selectedStore]",[22363,22374],"[Inventory, getFacilities]",[28061,28063],"[handleSetPrice]",[21241,21243],"[ProductEntryServ, getFacilities, state.StoreModule.selectedStore]",[21445,21478],[10381,10383],"[facilityServ, getFacilities]",[2746,2752],"[setValue, user]",[14951,14953],"[EmployeeServ, getFacilities, user]",[21183,21185],[21387,21420],[14869,14871],"[LocationServ, getFacilities, user]",[14893,14895],"[StoreServ, getFacilities, user]",[1149,1151],"[handleChangeStore, selectedStore]",[14978,14980],"[ProductServ, getFacilities, user]"]
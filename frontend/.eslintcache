[{"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Payment.js":"1","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\PaymentCreate.js":"2","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js":"3","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js":"4","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js":"5","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js":"6","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js":"7","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js":"8","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js":"9","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClinicModule.js":"10","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js":"11","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js":"12","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js":"13","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js":"14","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js":"15","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js":"16","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\ProductExit.js":"17","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicStore.js":"18","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Clinic.js":"19","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\ClientBill.js":"20","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillDispenseCreate.js":"21","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\EncounterMain.js":"22","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\helpers\\FacilityPopup.js":"23","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillPrescriptionCreate.js":"24","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Dispensary.js":"25","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js":"26","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js":"27","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js":"28","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicReport.js":"29","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\DeptUnits.js":"30","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClientMgt\\Patient.js":"31","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js":"32","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\FinanceHome.js":"33","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\BillPrescription.js":"34","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\DocumentClass.js":"35","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\Prescription.js":"36","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\DispenseExit.js":"37","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FacilityModule.js":"38","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Facility.js":"39","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Location.js":"40","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\FinanceSetup.js":"41","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Products.js":"42","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicHome.js":"43","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Appointments.js":"44","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FinanceModule.js":"45","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Store.js":"46","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Store.js":"47","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillPrescription.js":"48","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Roaster.js":"49","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryReport.js":"50","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\FinanceReport.js":"51","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\EncounterRight.js":"52","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ClientPrescription.js":"53","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Accessibility.js":"54","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClientMgt\\PatientProfile.js":"55","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\Encounter.js":"56","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryHome.js":"57","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicSetup.js":"58","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Products.js":"59","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\utils\\VideoConference.js":"60","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js":"61","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Collections.js":"62","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Services.js":"63"},{"size":22026,"mtime":1615066390997,"results":"64","hashOfConfig":"65"},{"size":45232,"mtime":1614782754078,"results":"66","hashOfConfig":"65"},{"size":500,"mtime":1606167681327,"results":"67","hashOfConfig":"65"},{"size":958,"mtime":1611095384833,"results":"68","hashOfConfig":"65"},{"size":638,"mtime":1614768129215,"results":"69","hashOfConfig":"65"},{"size":8445,"mtime":1615030110169,"results":"70","hashOfConfig":"65"},{"size":3347,"mtime":1615027451093,"results":"71","hashOfConfig":"65"},{"size":9542,"mtime":1610481859369,"results":"72","hashOfConfig":"65"},{"size":8649,"mtime":1615032190374,"results":"73","hashOfConfig":"65"},{"size":7992,"mtime":1614759140359,"results":"74","hashOfConfig":"65"},{"size":144,"mtime":1610340849334,"results":"75","hashOfConfig":"65"},{"size":146,"mtime":1610340786924,"results":"76","hashOfConfig":"65"},{"size":148,"mtime":1610340754492,"results":"77","hashOfConfig":"65"},{"size":597,"mtime":1612953434041,"results":"78","hashOfConfig":"65"},{"size":9318,"mtime":1610307391617,"results":"79","hashOfConfig":"65"},{"size":40586,"mtime":1611144169606,"results":"80","hashOfConfig":"65"},{"size":57661,"mtime":1614163882292,"results":"81","hashOfConfig":"65"},{"size":38856,"mtime":1612264335426,"results":"82","hashOfConfig":"65"},{"size":40695,"mtime":1614055518190,"results":"83","hashOfConfig":"65"},{"size":11247,"mtime":1614782373808,"results":"84","hashOfConfig":"65"},{"size":26832,"mtime":1614161732800,"results":"85","hashOfConfig":"65"},{"size":19349,"mtime":1614777905395,"results":"86","hashOfConfig":"65"},{"size":15112,"mtime":1613312865451,"results":"87","hashOfConfig":"65"},{"size":38779,"mtime":1614613902735,"results":"88","hashOfConfig":"65"},{"size":22625,"mtime":1614782342774,"results":"89","hashOfConfig":"65"},{"size":57958,"mtime":1614692889255,"results":"90","hashOfConfig":"65"},{"size":4054,"mtime":1615057752163,"results":"91","hashOfConfig":"65"},{"size":602,"mtime":1610166221216,"results":"92","hashOfConfig":"65"},{"size":8924,"mtime":1612264316226,"results":"93","hashOfConfig":"65"},{"size":153,"mtime":1610341642391,"results":"94","hashOfConfig":"65"},{"size":76792,"mtime":1615030124268,"results":"95","hashOfConfig":"65"},{"size":52276,"mtime":1611792286916,"results":"96","hashOfConfig":"65"},{"size":1292,"mtime":1614692318437,"results":"97","hashOfConfig":"65"},{"size":19914,"mtime":1614782388714,"results":"98","hashOfConfig":"65"},{"size":37609,"mtime":1612483185115,"results":"99","hashOfConfig":"65"},{"size":50640,"mtime":1614782395743,"results":"100","hashOfConfig":"65"},{"size":60143,"mtime":1614693038875,"results":"101","hashOfConfig":"65"},{"size":6746,"mtime":1614766424318,"results":"102","hashOfConfig":"65"},{"size":29287,"mtime":1610499792755,"results":"103","hashOfConfig":"65"},{"size":40707,"mtime":1613142325364,"results":"104","hashOfConfig":"65"},{"size":9318,"mtime":1614165749514,"results":"105","hashOfConfig":"65"},{"size":40739,"mtime":1614163882309,"results":"106","hashOfConfig":"65"},{"size":1452,"mtime":1612953370729,"results":"107","hashOfConfig":"65"},{"size":73610,"mtime":1612987406080,"results":"108","hashOfConfig":"65"},{"size":8672,"mtime":1615057273709,"results":"109","hashOfConfig":"65"},{"size":51100,"mtime":1614767771116,"results":"110","hashOfConfig":"65"},{"size":51075,"mtime":1614767616856,"results":"111","hashOfConfig":"65"},{"size":19950,"mtime":1614782365751,"results":"112","hashOfConfig":"65"},{"size":142,"mtime":1610340882234,"results":"113","hashOfConfig":"65"},{"size":8924,"mtime":1610239695153,"results":"114","hashOfConfig":"65"},{"size":8924,"mtime":1614165722165,"results":"115","hashOfConfig":"65"},{"size":37766,"mtime":1612638457628,"results":"116","hashOfConfig":"65"},{"size":11247,"mtime":1614782116546,"results":"117","hashOfConfig":"65"},{"size":153,"mtime":1610345735519,"results":"118","hashOfConfig":"65"},{"size":10119,"mtime":1615031537268,"results":"119","hashOfConfig":"65"},{"size":12009,"mtime":1614091682855,"results":"120","hashOfConfig":"65"},{"size":1294,"mtime":1612953318453,"results":"121","hashOfConfig":"65"},{"size":1736,"mtime":1614759282752,"results":"122","hashOfConfig":"65"},{"size":40739,"mtime":1611416060016,"results":"123","hashOfConfig":"65"},{"size":1854,"mtime":1612799451726,"results":"124","hashOfConfig":"65"},{"size":38911,"mtime":1615032519504,"results":"125","hashOfConfig":"65"},{"size":39279,"mtime":1615055659883,"results":"126","hashOfConfig":"65"},{"size":57968,"mtime":1615234347773,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"131"},"vuhkqw",{"filePath":"132","messages":"133","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"131"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"131"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"135"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"172"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"135"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"135"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"164"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"131"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"131"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"131"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"164"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"172"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"135"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"131"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"172"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"131"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"131"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"172"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"135"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"131"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"131"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"131"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"164"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"172"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"135"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"131"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"172"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"284","messages":"285","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"286","messages":"287","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"288","messages":"289","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"131"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Payment.js",["296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\nimport PaymentCreate from './PaymentCreate'\r\nimport PatientProfile from '../ClientMgt/PatientProfile'\r\n/* import {ProductCreate} from './Products' */\r\n// eslint-disable-next-line\r\n//const searchfacility={};\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemState,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\n\r\n// Demo styles, see 'Styles' section below for some notes on use.\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\n//import BillPrescriptionCreate from './BillPrescriptionCreate';\r\n\r\n\r\n\r\nexport default function Payment() {\r\n    //const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line\r\n   const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line\r\n  const [message, setMessage] = useState(\"\") \r\n   const BillServ=client.service('bills')\r\n   //const history = useHistory()\r\n  // const {user,setUser} = useContext(UserContext)\r\n   const [facilities,setFacilities]=useState([])\r\n    // eslint-disable-next-line\r\n  const [selectedOrders, setSelectedOrders]=useState([]) //\r\n   // eslint-disable-next-line\r\n   const {state,setState}=useContext(ObjectContext)\r\n   // eslint-disable-next-line\r\n   const {user,setUser}=useContext(UserContext)\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n                <div className=\"column is-6 \">\r\n                    <BillingList />\r\n                    </div>\r\n              \r\n                <div className=\"column is-6 \">\r\n                \r\n                {(state.financeModule.show ==='detail')&& <PaymentCreate/ >}\r\n                </div>\r\n               {/*  <div className=\"column is-3 \">\r\n                \r\n                {(state.financeModule.show ==='detail')&&<PatientProfile />}\r\n                </div> */}\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function BillingList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n   const BillServ=client.service('bills')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedDispense, setSelectedDispense]=useState() //\r\n   const [selectedOrders, setSelectedOrders]=useState([]) \r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n    const [selectedFinance, setSelectedFinance] =useState(\"\")\r\n    const [expanded, setExpanded] =useState(\"\")\r\n    const [oldClient, setOldClient] =useState(\"\")\r\n\r\n    const handleSelectedClient= async(Client)=>{\r\n        // await setSelectedClient(Client)\r\n         const    newClientModule={\r\n             selectedClient:Client,\r\n             show :'detail'\r\n         }\r\n        await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n     }\r\n\r\n    const handleChoseClient= async(client,e, order)=>{\r\n        setOldClient(client.clientname)\r\n        let newClient=client.clientname\r\n        if(oldClient!==newClient){\r\n            //alert(\"New Client Onboard\")\r\n            //remove all checked clientsly\r\n            selectedOrders.forEach(el=>el.checked=\"\")\r\n            setSelectedOrders([])\r\n        }\r\n\r\n       // console.log(e.target.checked)\r\n        order.checked=e.target.checked\r\n        await handleSelectedClient(order.participantInfo.client)\r\n        //handleMedicationRow(order)\r\n        await setSelectedFinance(order)\r\n        const    newProductEntryModule={\r\n            selectedFinance:order,\r\n            show :'detail',\r\n            state:e.target.checked\r\n        }\r\n      await setState((prevstate)=>({...prevstate, financeModule:newProductEntryModule}))\r\n      if (e.target.checked){\r\n        await setSelectedOrders((prevstate)=>(prevstate.concat(order)))\r\n      }else{\r\n        setSelectedOrders( prevstate=>prevstate.filter(el=>el._id!==order._id))\r\n      }\r\n    \r\n       // console.log(selectedOrders)\r\n    }\r\n    const handleMedicationRow= async(ProductEntry,e)=>{ //handle selected single order\r\n        //console.log(\"b4\",state)\r\n       // alert(\"Header touched\")\r\n    \r\n        //console.log(\"handlerow\",ProductEntry)\r\n       /* alert(ProductEntry.checked)*/\r\n       /*  ProductEntry.checked=!ProductEntry.checked */\r\n    \r\n       /*  await setSelectedFinance(ProductEntry)\r\n    \r\n        const    newProductEntryModule={\r\n            selectedFinance:ProductEntry,\r\n            show :'detail'\r\n\r\n        }\r\n      await setState((prevstate)=>({...prevstate, financeModule:newProductEntryModule})) */\r\n       //console.log(state)\r\n      // ProductEntry.show=!ProductEntry.show\r\n    \r\n    }\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n  \r\n\r\n    const handleSearch=(val)=>{\r\n       const field='name'\r\n       //console.log(val)\r\n       BillServ.find({query: {\r\n                order: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_status: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_category:\"Prescription\",\r\n               // storeId:state.StoreModule.selectedStore._id,\r\n               //facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }``\r\n                    }}).then((res)=>{\r\n               // console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n               // console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n    const getFacilities= async()=>{\r\n       \r\n            // console.log(\"here b4 server\")\r\n    const findProductEntry= await BillServ.find(\r\n            {query: {\r\n                'participantInfo.paymentmode.type':\"Cash\",\r\n                'participantInfo.billingFacility': user.currentEmployee.facilityDetail._id,\r\n                billing_status:\"Unpaid\",  // need to set this finally\r\n                //storeId:state.StoreModule.selectedStore._id,\r\n                //clientId:state.ClientModule.selectedClient._id,\r\n                $limit:100,\r\n                $sort: {\r\n                    createdAt: -1\r\n                }\r\n                }})\r\n\r\n            //console.log(\"updatedorder\", findProductEntry.groupedOrder)\r\n            await setFacilities(findProductEntry.groupedOrder)\r\n          //  await setState((prevstate)=>({...prevstate, currentClients:findProductEntry.groupedOrder}))\r\n            }   \r\n    const handleRow= async(Client,e)=>{\r\n           // alert(expanded)\r\n              \r\n            }\r\n    //1.consider using props for global data\r\n    useEffect(() => {\r\n        // console.log(\"started\")\r\n            getFacilities()\r\n            BillServ.on('created', (obj)=>getFacilities())\r\n            BillServ.on('updated', (obj)=>getFacilities())\r\n            BillServ.on('patched', (obj)=>getFacilities())\r\n            BillServ.on('removed', (obj)=>getFacilities())\r\n            return () => {\r\n            \r\n            }\r\n            },[])\r\n\r\n    useEffect(() => {\r\n        //changes with checked box\r\n       // console.log(selectedOrders)\r\n        \r\n        return () => {\r\n            \r\n        }\r\n    }, [selectedOrders])\r\n\r\n    useEffect(() => {\r\n       if (state.financeModule.show===\"create\"){\r\n        selectedOrders.forEach(el=>el.checked=\"\")\r\n        setSelectedOrders([])\r\n\r\n       }\r\n        return () => {\r\n           \r\n        }\r\n    }, [state.financeModule.show])\r\n   \r\n \r\n\r\n    return(     \r\n            <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Medications\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Unpaid Bills </span></div>\r\n                     {/* <div className=\"level-right\">\r\n                       <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div> \r\n                    </div>*/}\r\n\r\n                </div>\r\n                <div className=\" pullup \">\r\n                    <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                    <Accordion allowZeroExpanded >\r\n                        {facilities.map((Clinic, i)=>(\r\n                            <AccordionItem  key={Clinic.client_id}  >\r\n                               <AccordionItemHeading >\r\n                                    <AccordionItemButton  >\r\n                                    {/* <input type = \"checkbox\" name={Clinic.client_id}  />   */}\r\n                                    <strong> {i+1} {Clinic.clientname} {/* with {Clinic.bills.length} Unpaid bills. */} {/* Grand Total amount: N */}</strong> \r\n                                    </AccordionItemButton>\r\n                                </AccordionItemHeading>\r\n                                <AccordionItemPanel>\r\n                                    <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                                        <Accordion allowZeroExpanded>\r\n                                            {Clinic.bills.map((category, i)=>(\r\n                                                <AccordionItem  key={Clinic.client_id} >\r\n                                                    <AccordionItemHeading >\r\n                                                    <AccordionItemButton  >\r\n                                                    {/* <input type = \"checkbox\" name={Clinic.client_id} onChange={(e)=>handleMedicationRow(Clinic,e)} /> */}  \r\n                                                         {category.catName} with {category.order.length} Unpaid bills. {/* Total amount: N */}\r\n                                                    </AccordionItemButton>\r\n                                                    </AccordionItemHeading>\r\n                                                    <AccordionItemPanel>\r\n                                                        <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable mr-2\">\r\n                                                                <thead>\r\n                                                                    <tr>\r\n                                                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                                                        <th><abbr title=\"Description\">Description</abbr></th>\r\n                                                                    {/*  <th>Fulfilled</th> */}\r\n                                                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                                                        <th><abbr title=\"Amount\">Amount</abbr></th>\r\n                                                                    </tr>\r\n                                                                </thead>\r\n                                                                <tbody>\r\n                                                     { category.order.map((order, i)=>(\r\n\r\n                                                        <tr key={order._id}  /*  onClick={()=>handleMedicationRow(order)} */  className={order._id===(selectedFinance?._id||null)?\"is-selected\":\"\"}>                                         \r\n                                                        <th><input type = \"checkbox\" name={order._id} onChange={(e)=>handleChoseClient(Clinic,e, order)}  checked={order.checked}/>  {i+1}</th>\r\n                                                        <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                                        <th>{order.serviceInfo.name}</th>\r\n                                                       {/*  <td>{order.fulfilled===\"True\"?\"Yes\":\"No\"}</td> */}\r\n                                                        <td>{order.billing_status}</td>\r\n                                                        <td>{order.serviceInfo.amount}</td>\r\n                                                        </tr>\r\n                                                ))}\r\n                                            </tbody>\r\n                                            </table>\r\n\r\n                                                    </AccordionItemPanel>                                          \r\n                                                </AccordionItem>\r\n                                            ))}\r\n                                        </Accordion>\r\n                                    </div>\r\n                                </AccordionItemPanel>                    \r\n                            </AccordionItem >\r\n                        ))}\r\n                    </Accordion >\r\n                    </div>  \r\n                </div>\r\n            </>          \r\n    )\r\n    }\r\n\r\n\r\nexport function DispenseDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    const [selectedMedication, setSelectedMedication] =useState(\"\")\r\n    const [currentOrder, setCurrentOrder] =useState(\"\")\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const BillServ=client.service('order')\r\n    /* const [ProductEntry, setProductEntry] = useState(\"\")\r\n    const [facilities, setFacilities] = useState(\"\") */\r\n\r\n let ProductEntry =state.DispenseModule.selectedDispense\r\n   //const facilities=ProductEntry.orders\r\n\r\n   const handleRow= async(ProductEntry)=>{\r\n    //console.log(\"b4\",state)\r\n\r\n    //console.log(\"handlerow\",ProductEntry)\r\n\r\n    await setSelectedMedication(ProductEntry)\r\n\r\n    const    newProductEntryModule={\r\n        selectedMedication:ProductEntry,\r\n        show :'detail'\r\n    }\r\n  await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n   //console.log(state)\r\n  // ProductEntry.show=!ProductEntry.show\r\n\r\n}\r\n\r\n    const handleEdit= async(ProductEntry)=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n      const client1=  state.currentClients.find(el=>{\r\n            return JSON.stringify(el.client_id)===JSON.stringify(state.DispenseModule.selectedDispense)\r\n        })\r\n\r\n    setCurrentOrder(client1)\r\n   // console.log(client1)\r\n        return () => {\r\n        \r\n        }\r\n    }, [])\r\n   \r\n\r\n /*  \r\n     const setprod=async()=>{\r\n        await setProductEntry(state.DispenseModule.selectedDispense)\r\n    } */\r\n \r\n    useEffect(() => {\r\n        /* BillServ.on('created', (obj)=>getFacilities())\r\n        BillServ.on('updated', (obj)=>getFacilities())\r\n       \r\n        BillServ.on('removed', (obj)=>getFacilities()) */\r\n        BillServ.on('patched',  (obj)=>{\r\n            //update state.DispenseModule.selectedDispense\r\n           // console.log(obj.clientId)\r\n           // console.log(\"currentClients\",state.currentClients)\r\n           const current1=state.currentClients.find(el=>(JSON.stringify(el.client_id)===JSON.stringify(obj.clientId)))\r\n           setCurrentOrder(current1)\r\n          // console.log(\"currentone\",current1)\r\n        })\r\n      \r\n        return () => {\r\n         \r\n        }\r\n    },[])\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Dispense Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* {JSON.stringify(ProductEntry.orders,2,10)} */}\r\n            <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        {/* <th><abbr title=\"Client Name\">Client Name</abbr></th> */}\r\n                                        {/* <th><abbr title=\"Number of Orders\"># of Medication</abbr></th> */}\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                        <th>Fulfilled</th>\r\n                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                        <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                        \r\n                                        {/* <th><abbr title=\"Actions\">Actions</abbr></th> */}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {state.DispenseModule.selectedDispense.orders.map((order, i)=>(\r\n\r\n                                            <tr key={order._id} onClick={()=>handleRow(order)} className={order._id===(selectedMedication?._id||null)?\"is-selected\":\"\"}>\r\n                                            \r\n                                               <th>{i+1}</th>\r\n                                                 {/* <td>{ProductEntry.clientname}</td> \r\n                                                <td>{ProductEntry.orders.length}</td> */}\r\n                                           \r\n                                           \r\n                                            <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                          <th>{order.order}</th>\r\n                                            <td>{order.fulfilled===\"True\"?\"Yes\":\"No\"}</td>\r\n                                            <td>{order.order_status}</td>\r\n                                            <td>{order.requestingdoctor_Name}</td>\r\n                                            \r\n                                           {/*  <td><span className=\"showAction\"  >...</span></td> */}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                        \r\n                </div>              \r\n               \r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n",["320","321"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\PaymentCreate.js",["322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\nimport Encounter from '../EncounterMgt/Encounter';\r\nvar random = require('random-string-generator');\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\nexport default function PaymentCreate(){\r\n    // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n     //const [error, setError] =useState(false)\r\n     const [success, setSuccess] =useState(false)\r\n     const [message,setMessage] = useState(\"\")\r\n     // eslint-disable-next-line\r\n     const [facility,setFacility] = useState()\r\n     const SubwalletTxServ=client.service('subwallettransactions')\r\n     const SubwalletServ=client.service('subwallet')\r\n     const OrderServ=client.service('order')\r\n     const InvoiceServ=client.service('invoice')\r\n     //const history = useHistory()\r\n     const {user} = useContext(UserContext) //,setUser\r\n     // eslint-disable-next-line\r\n     const [currentUser,setCurrentUser] = useState()\r\n     const [type,setType] = useState(\"Bill\")\r\n     const [documentNo,setDocumentNo] = useState(\"\")\r\n     const [totalamount,setTotalamount] = useState(0)\r\n     const [description,setDescription] = useState(null)\r\n     const [productId,setProductId] = useState(\"\")\r\n     const [source,setSource] = useState(\"\")\r\n     const [date,setDate] = useState(\"\")\r\n     const [name,setName] = useState(\"\")\r\n     const [inventoryId,setInventoryId] = useState(\"\")\r\n     const [baseunit,setBaseunit] = useState(\"\")\r\n     const [quantity,setQuantity] = useState(\"\")\r\n     const [sellingprice,setSellingPrice] = useState(\"\")\r\n     const [costprice,setCostprice] = useState(0)\r\n     const [invquantity,setInvQuantity] = useState(\"\")\r\n     const [calcamount,setCalcAmount] = useState(0)\r\n     const [productItem,setProductItem] = useState([])\r\n      const [billingId,setBilllingId]=useState(\"\")  \r\n      const [changeAmount, setChangeAmount] = useState(true)\r\n      const [paymentmode, setPaymentMode] = useState(\"Cash\")\r\n      const [paymentOptions, setPaymentOptions]=useState([])\r\n      const [billMode, setBillMode]=useState(\"\")\r\n      const [productModal, setProductModal]=useState(false)\r\n      const [obj, setObj]=useState(\"\")\r\n      const [amountPaid, setAmountPaid]=useState(0)\r\n      const [balance, setBalance]=useState(0)\r\n      const [buttonState, setButtonState]=useState(false)\r\n      const [partPay,setPartPay]=useState([])\r\n     \r\n     const {state,setState}=useContext(ObjectContext)\r\n     const inputEl = useRef(0);\r\n     let calcamount1\r\n     let hidestatus\r\n  \r\n\r\n    \r\n  let medication =state.financeModule.selectedFinance\r\n  //console.log(state.financeModule.state)\r\n\r\n  const showDocumentation = async (value)=>{\r\n    setProductModal(true)\r\n  }\r\n  const handlecloseModal =()=>{\r\n    setProductModal(false)\r\n   // handleSearch(val)\r\n    }\r\n\r\n  const handleChangeMode= async(value)=>{\r\n        //console.log(value)\r\n       await setPaymentMode(value)\r\n      /*   console.log(paymentOptions)\r\n       let billm= paymentOptions.filter(el=>el.name===value)\r\n       await setBillMode(billm)\r\n        console.log(billm) */\r\n        // at startup\r\n        // check payment mode options from patient financial info\r\n        // load that to select options\r\n        // default to HMO-->company-->family-->cash\r\n        //when chosen\r\n        //append payment mode to order\r\n        //check service contract for pricing info\r\n        // calculate pricing \r\n        // pricing\r\n\r\n\r\n    }\r\n\r\n  const handleRow= async(ProductEntry)=>{\r\n    //console.log(\"b4\",state)\r\n\r\n    //console.log(\"handlerow\",ProductEntry)\r\n\r\n    //await setMedication(ProductEntry)\r\n\r\n    const    newProductEntryModule={\r\n        selectedMedication:ProductEntry,\r\n        show :'detail'\r\n    }\r\n  await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n   //console.log(state)\r\n  // ProductEntry.show=!ProductEntry.show\r\n\r\n        }  \r\n \r\n  const [productEntry,setProductEntry]=useState({\r\n         productitems:[],\r\n         date,\r\n         documentNo,\r\n         type,\r\n         totalamount,\r\n         source,\r\n \r\n     })\r\n  \r\n  const productItemI={\r\n         productId,\r\n         name,\r\n         quantity,\r\n         sellingprice,\r\n         amount:calcamount, //||qamount\r\n         baseunit,\r\n         costprice,\r\n         billingId\r\n \r\n     }\r\n     // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n     //consider baseunoit conversions\r\n  const getSearchfacility=async (obj)=>{\r\n       await setObj(obj)\r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setProductId(\"\")\r\n            setName(\"\")\r\n            setBaseunit(\"\")\r\n            setInventoryId(\"\")\r\n            setSellingPrice(\"\")\r\n            setInvQuantity(\"\")\r\n            setDescription(\"\")\r\n            setCostprice(\"\")\r\n           // setCalcAmount(null)\r\n            return\r\n        }\r\n \r\n         setProductId(obj.productId)\r\n         setName(obj.name)\r\n         setBaseunit(obj.baseunit)\r\n         setInventoryId(obj.inventoryId)\r\n         setSellingPrice(obj.sellingprice) //modify this based on billing mode\r\n         setInvQuantity(obj.quantity)\r\n         setCostprice(obj.costprice)\r\n         setBilllingId(obj.billingId)\r\n\r\n         const contracts=obj.billingDetails.contracts\r\n         //const billingserv=client.service('billing')\r\n        if( billMode.type===\"HMO Cover\"){ //paymentmode\r\n         let contract=contracts.filter(el=>el.source_org===billMode.detail.hmo)\r\n       //  console.log(contract[0].price)\r\n         setSellingPrice(contract[0].price)\r\n       //  console.log(sellingprice)\r\n        \r\n        }\r\n        if( billMode.type===\"Company Cover\"){ //paymentmode\r\n            let contract=contracts.filter(el=>el.source_org===billMode.detail.company)\r\n         //   console.log(contract[0].price)\r\n            setSellingPrice(contract[0].price)\r\n         //   console.log(sellingprice)\r\n           \r\n           }\r\n          \r\n        /*  setValue(\"facility\", obj._id,  {\r\n             shouldValidate: true,\r\n             shouldDirty: true\r\n         }) */\r\n     }\r\n\r\n     useEffect(() => {\r\n       /*  console.log(obj)\r\n        console.log(billMode)\r\n        if( paymentmode!==\"Cash\" && obj){\r\n            const contracts=obj.billingDetails.contracts\r\n            let contract=contracts.filter(el=>el.source_org===billMode.detail.hmo)\r\n           console.log(contract[0].price)\r\n           setSellingPrice(contract[0].price)\r\n           console.log(sellingprice)\r\n       }\r\n         return () => {\r\n            \r\n         } */\r\n     }, [obj])\r\n\r\n     useEffect(() => {\r\n         setCurrentUser(user)\r\n         //console.log(currentUser)\r\n         return () => {\r\n         \r\n         }\r\n     }, [user])\r\n \r\n     const handleUpdateTotal=async ()=>{\r\n        await setTotalamount(prevtotal=>Number(prevtotal) + Number(calcamount))\r\n     }\r\n \r\n     const handleChangeType=async (e)=>{\r\n         //console.log(e.target.value)\r\n         await setType(e.target.value)\r\n     }\r\n \r\n     const handleAmount= async()=>{\r\n         await setDescription(\"\")\r\n        // alert(\"Iam chaning qamount\")\r\n     }\r\n\r\n     const handleClickProd=async()=>{\r\n       /*   console.log(\"amount: \",productItemI.amount)\r\n         console.log(\"qamount: \",qamount)\r\n         console.log(\"calcamount: \",calcamount) */\r\n        if ( quantity===0||quantity===\"\"|| productId===\"\"){\r\n            toast({\r\n                message: 'You need to choose a product and quantity to proceed',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return \r\n        }\r\n\r\n         await setSuccess(false)\r\n         await setProductItem(\r\n             prevProd=>prevProd.concat(productItemI)\r\n         )\r\n        handleUpdateTotal()\r\n            // generate billing info\r\n            const billInfo={\r\n                orderInfo:{\r\n                    orderId:medication._id,\r\n                    orderObj:medication,\r\n                  },\r\n                  serviceInfo:{            \r\n                    price: productItemI.sellingprice,\r\n                    quantity: productItemI.quantity,\r\n                    productId: productItemI.productId,\r\n                    name: productItemI.name,\r\n                    baseunit: productItemI.baseunit,\r\n                    amount:productItemI.amount,\r\n                    billingId:productItemI.billingId,\r\n                    createdby:user._id,\r\n                  },\r\n                  paymentInfo:{},\r\n                  participantInfo:{\r\n                    billingFacility:medication.destination,\r\n                    billingFacilityName:medication.destination_name,\r\n                    locationId:state.StoreModule.selectedStore._id, //selected location,\r\n                    clientId:medication.clientId,\r\n                    client:medication.client,\r\n                    paymentmode:billMode\r\n                  },\r\n                  createdBy:user.id,\r\n                  billing_status:\"Unpaid\"\r\n                }\r\n\r\n        //update order\r\n        \r\n        OrderServ.patch(medication._id,{\r\n            order_status:\"Billed\",\r\n            billInfo,\r\n        }).then((resp)=>{\r\n           // medication=resp\r\n           // console.log(resp)\r\n             handleRow(resp) \r\n            //update dispense\r\n\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n        \r\n        //update status(billed) + action()\r\n        //?attached chosen product to medication\r\n        //dispense helper?\r\n         setName(\"\")\r\n         setBaseunit(\"\")\r\n         setQuantity(\"\")\r\n         setInventoryId(\"\")\r\n         setSellingPrice(\"\")\r\n         setInvQuantity(\"\")\r\n             handleAmount()\r\n        // setCalcAmount(null)\r\n        await setSuccess(true)\r\n        /* console.log(success)\r\n        console.log(qamount)\r\n        console.log(productItem) */\r\n        setChangeAmount(true)\r\n     }\r\n   //check user for facility or get list of facility  \r\n    /*  useEffect(()=>{\r\n         //setFacility(user.activeProductEntry.FacilityId)//\r\n       if (!user.stacker){\r\n           console.log(currentUser)\r\n            /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n             shouldValidate: true,\r\n             shouldDirty: true\r\n         })  \r\n \r\n       }\r\n     }) */\r\n \r\n     const handleQtty=async(e)=>{\r\n         if (invquantity<e.target.value){\r\n             toast({\r\n                 message: 'You can not sell more quantity than exist in inventory ' ,\r\n                 type: 'is-danger',\r\n                 dismissible: true,\r\n                 pauseOnHover: true,\r\n               })\r\n             return\r\n         }\r\n         setQuantity(e.target.value)\r\n         calcamount1=quantity*sellingprice\r\n         await setCalcAmount(calcamount1)\r\n       //  console.log(calcamount)\r\n     }\r\n \r\n     useEffect( () => {\r\n          setProductEntry({\r\n             \r\n             date,\r\n             documentNo,\r\n             type,\r\n             totalamount,\r\n             source,\r\n         })\r\n\r\n        setCalcAmount(quantity*sellingprice) \r\n         return () => {\r\n             \r\n         }\r\n     },[date])\r\n \r\n     const resetform=()=>{\r\n      setType(\"Sales\")\r\n     setDocumentNo(\"\")\r\n     setTotalamount(\"\")\r\n     setProductId(\"\")\r\n     setSource(\"\")\r\n     setDate(\"\")\r\n     setName(\"\")\r\n     setBaseunit()\r\n     setCostprice()\r\n     setProductItem([])\r\n     }\r\n\r\n\r\n     const handleMedicationDone= async()=>{ //handle selected single order\r\n        //console.log(\"b4\",state)\r\n    \r\n        //console.log(\"handlerow\",ProductEntry)\r\n    \r\n       // await setSelectedMedication(\"\")\r\n    \r\n        const    newProductEntryModule={\r\n            selectedMedication:{},\r\n            show :'create'\r\n        }\r\n      await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n       //console.log(state)\r\n      // ProductEntry.show=!ProductEntry.show\r\n    \r\n    }\r\n \r\n     const onSubmit = async(e) =>{\r\n         e.preventDefault();\r\n         setMessage(\"\")\r\n         //setError(false)\r\n         setSuccess(false)\r\n         await setProductEntry({\r\n             \r\n             date,\r\n             documentNo,\r\n             type,\r\n             totalamount,\r\n             source,\r\n         })\r\n         productEntry.productitems=productItem\r\n         productEntry.createdby=user._id\r\n         productEntry.transactioncategory=\"debit\"\r\n        \r\n          // console.log(\"b4 facility\",productEntry);\r\n           if (user.currentEmployee){\r\n          productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n           }else{\r\n             toast({\r\n                 message: 'You can not remove inventory from any organization',\r\n                 type: 'is-danger',\r\n                 dismissible: true,\r\n                 pauseOnHover: true,\r\n               }) \r\n               return\r\n           }\r\n           \r\n           if (state.StoreModule.selectedStore._id){\r\n             productEntry.storeId=state.StoreModule.selectedStore._id\r\n           }else{\r\n             toast({\r\n                 message: 'You need to select a store before removing inventory',\r\n                 type: 'is-danger',\r\n                 dismissible: true,\r\n                 pauseOnHover: true,\r\n               }) \r\n               return\r\n           }\r\n       } \r\n\r\n    const handleChangeAmount=()=>{\r\n        setChangeAmount((rev)=>(!rev))\r\n        \r\n    }\r\n\r\n    const newclient=async ()=>{\r\n        await  setProductItem([])\r\n    }\r\n    const handleAccept=async()=>{\r\n        await setButtonState(true)\r\n        if (paymentmode===\"\"||amountPaid===0|| amountPaid===\"\"){\r\n            toast({\r\n                message: 'Kindly choose payment mode or enter amount' ,\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n              await setButtonState(false)\r\n              return\r\n        }\r\n        let obj={\r\n           // toWallet:{ type: Schema.Types.ObjectId, ref:'facility', }, //receiving money\r\n            //fromWallet:{ type: Schema.Types.ObjectId, ref:'facility', },//sending money\r\n            //subwallet:{ type: Schema.Types.ObjectId, ref:'subwallet', },\r\n            client:medication.participantInfo.client._id,\r\n            organization:user.employeeData[0].facilityDetail._id,\r\n            category:\"credit\", //debit/credit\r\n            amount:amountPaid,\r\n            description: description,\r\n           \r\n            toName:user.employeeData[0].facilityDetail.facilityName,\r\n            fromName:medication.participantInfo.client.firstname + \" \"+ medication.participantInfo.client.lastname,\r\n            createdby: user._id,\r\n            \r\n           // refBill:[{ type: Schema.Types.ObjectId, ref:'bills'  }], //billid to be paid : ref invoice to pay\r\n           // info:{ type: Schema.Types.Mixed},\r\n            paymentmode:paymentmode,\r\n            \r\n            facility: user.employeeData[0].facilityDetail._id,\r\n            locationId: state.LocationModule.selectedLocation._id,\r\n            type: \"Deposit\"\r\n\r\n        }\r\n       SubwalletTxServ.create(obj)\r\n       .then((resp)=>{\r\n          // console.log(resp)\r\n\r\n        toast({\r\n            message: 'Deposit accepted succesfully',\r\n            type: 'is-success',\r\n            dismissible: true,\r\n            pauseOnHover: true,\r\n          })\r\n          setAmountPaid(0)\r\n       })\r\n       .catch((err)=>{\r\n        toast({\r\n            message: 'Error accepting deposit ' + err,\r\n            type: 'is-danger',\r\n            dismissible: true,\r\n            pauseOnHover: true,\r\n          })\r\n\r\n       })\r\n       await setButtonState(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const oldname=medication.participantInfo.client.firstname + \" \"+ medication.participantInfo.client.lastname\r\n       // console.log(\"oldname\",oldname)\r\n        setSource(medication.participantInfo.client.firstname + \" \"+ medication.participantInfo.client.lastname)\r\n\r\n        const newname=source\r\n       // console.log(\"newname\",newname)\r\n        if (oldname!==newname){\r\n            //newdispense\r\n        \r\n        setProductItem([])\r\n        setTotalamount(0)\r\n\r\n        }\r\n        if (state.financeModule.state){\r\n            medication.show=\"none\"\r\n            medication.proposedpayment={\r\n                balance:0,\r\n                paidup:medication.paymentInfo.paidup + medication.paymentInfo.balance,\r\n                amount:medication.paymentInfo.balance\r\n            }\r\n            //no payment detail push\r\n          \r\n         setProductItem(\r\n            prevProd=>prevProd.concat(medication)\r\n        )\r\n        }else{\r\n            if(productItem.length>0){\r\n                setProductItem(\r\n                    prevProd=>prevProd.filter(el=>el._id!==medication._id)\r\n                )\r\n            }\r\n        }\r\n\r\n       // const paymentoptions= []\r\n        //const info = medication.participantInfo.client.paymentinfo\r\n        //let billme={}\r\n        getFacilities()\r\n       \r\n        return () => {\r\n           \r\n        }\r\n    }, [state.financeModule])\r\n\r\n    const getTotal= async()=>{\r\n        setTotalamount(0)\r\n        productItem.forEach(el=>{\r\n            if (el.show===\"none\"){\r\n                setTotalamount(prevtotal=>Number(prevtotal) + Number(el.serviceInfo.amount) )\r\n            }\r\n            if (el.show===\"flex\"){\r\n                setTotalamount(prevtotal=>Number(prevtotal) + Number(el.partPay) )\r\n            }\r\n          \r\n            // \r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(productItem)\r\n       getTotal()\r\n        return () => {\r\n        \r\n        }\r\n    }, [productItem])\r\n\r\n    const getFacilities= async()=>{\r\n       \r\n        // console.log(\"here b4 server\")\r\n        const findProductEntry= await SubwalletServ.find(\r\n        {query: {\r\n           \r\n            client:medication.participantInfo.client._id,\r\n            organization:user.employeeData[0].facilityDetail._id,\r\n            //storeId:state.StoreModule.selectedStore._id,\r\n            //clientId:state.ClientModule.selectedClient._id,\r\n            $limit:100,\r\n            $sort: {\r\n                createdAt: -1\r\n            }\r\n            }})\r\n             console.log(findProductEntry)\r\n\r\n     // console.log(\"balance\", findProductEntry.data[0].amount)\r\n        if (findProductEntry.data.length>0){\r\n            await setBalance(findProductEntry.data[0].amount)\r\n        }else{\r\n            await setBalance(0) \r\n            \r\n        } \r\n\r\n      //  await setState((prevstate)=>({...prevstate, currentClients:findProductEntry.groupedOrder}))\r\n        }   \r\n\r\n\r\n\r\n     useEffect(() => {\r\n       // const medication =state.medicationModule.selectedMedication\r\n         const today=new Date().toLocaleString()\r\n         //console.log(today)\r\n         setDate(today)\r\n         const invoiceNo=random(6,'uppernumeric')\r\n         setDocumentNo(invoiceNo)\r\n\r\n            getFacilities()\r\n            SubwalletServ.on('created', (obj)=>getFacilities())\r\n            SubwalletServ.on('updated', (obj)=>getFacilities())\r\n            SubwalletServ.on('patched', (obj)=>getFacilities())\r\n            SubwalletServ.on('removed', (obj)=>getFacilities())\r\n\r\n         return async() => {\r\n            const    newProductEntryModule={\r\n                selectedFinance:{},\r\n                show :'create'\r\n                }\r\n           await setState((prevstate)=>({...prevstate, financeModule:newProductEntryModule}))\r\n           await setPartPay([])\r\n         }\r\n     }, [])\r\n\r\n  /*   useEffect(() => {\r\n        calcamount1=quantity*sellingprice\r\n         setCalcAmount(calcamount1)\r\n         console.log(calcamount)\r\n         setChangeAmount(true)\r\n        return () => {\r\n            \r\n        }\r\n    }, [quantity]) */\r\n\r\n    \r\n    const handleChangePart= async(bill, e)=>{\r\n        console.log(bill, e.target.value)\r\n        if(e.target.value===\"Part\"){\r\n            bill.show=\"flex\"\r\n        setPartPay((prev)=>prev.concat(bill))\r\n        }\r\n      \r\n        if(e.target.value===\"Full\"){\r\n            bill.show=\"none\"\r\n            \r\n            let item=  await productItem.find(el=>\r\n                el._id===bill._id\r\n            )\r\n            const   payObj={\r\n                amount:  item.paymentInfo.balance,\r\n                mode:\"Full\",\r\n                date: new Date().toLocaleString()\r\n            }\r\n            //item.partPay=\"\"\r\n           // item.paymentInfo.paymentDetails.push(payObj)\r\n            item.proposedpayment={\r\n                balance:Number(item.paymentInfo.balance) - Number(payObj.amount),\r\n                paidup:Number(item.paymentInfo.paidup) + Number(payObj.amount),\r\n                amount:payObj.amount\r\n            }\r\n           // item.paymentInfo.balance=item.paymentInfo.balance - item.paymentInfo.balance\r\n          //  item.paymentInfo.paidup=Number(item.paymentInfo.paidup) + Number(payObj.amount)\r\n            getTotal()\r\n            setPartPay((prev)=>prev.concat(bill))\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    const handlePartAmount= async(bill,e)=>{\r\n        \r\n        let partAmount = e.target.value\r\n       // bill.partPay=partAmount\r\n       //const itemList=productItem\r\n       if (partAmount===\"\" ||partAmount===0  ){\r\n        toast({\r\n            message: 'Please enter an amount as part payment',\r\n            type: 'is-danger',\r\n            dismissible: true,\r\n            pauseOnHover: true,\r\n          })\r\n        return\r\n       }\r\n       let item=  await productItem.find(el=>\r\n        el._id===bill._id\r\n        )\r\n    item.partPay=partAmount\r\n    setPartPay((prev)=>prev.concat(bill))     \r\n        //setProductItem(productItem)\r\n    }\r\n\r\n    const handleUpdate= async(bill,e)=>{\r\n        if (bill.partPay===\"\" ||bill.partPay===0||bill.partPay===undefined  ){\r\n            toast({\r\n                message: 'Please enter an amount as part payment',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n            return\r\n           }\r\n       // console.log(bill)\r\n        let item=  await productItem.find(el=>\r\n            el._id===bill._id\r\n        )\r\n       // console.log(item)\r\n        /* item.partPay=partAmount\r\n        console.log(item)\r\n        console.log(productItem) */\r\n        \r\n        let partAmount= item.partPay\r\n       \r\n        if (bill.show===\"flex\"){\r\n                const  payObj={\r\n                amount:  partAmount,\r\n                mode:\"Part\",\r\n                date: new Date().toLocaleString()\r\n            }\r\n           // item.paymentInfo.paymentDetails.push(payObj)\r\n            item.proposedpayment={\r\n                balance:Number(item.paymentInfo.balance) - Number(payObj.amount),\r\n                paidup:Number(item.paymentInfo.paidup) + Number(payObj.amount),\r\n                amount:payObj.amount\r\n            }\r\n            /* item.paymentInfo.balance=item.paymentInfo.balance-partAmount\r\n            item.paymentInfo.paidup=Number(item.paymentInfo.paidup)+ Number(partAmount) */\r\n\r\n        }\r\n\r\n        /* if (bill.show===\"none\"){\r\n            const   payObj={\r\n                amount:  item.paymentInfo.balance,\r\n                mode:\"Full\",\r\n                date: new Date().toLocaleString()\r\n            }\r\n            item.paymentInfo.paymentDetails.push(payObj)\r\n            item.paymentInfo.balance=item.paymentInfo.balance - item.paymentInfo.balance\r\n            }\r\n            \r\n */\r\n        \r\n        getTotal()\r\n        setPartPay((prev)=>prev.concat(bill))\r\n        toast({\r\n            message: 'Part payment updated successfully',\r\n            type: 'is-success',\r\n            dismissible: true,\r\n            pauseOnHover: true,\r\n          })\r\n\r\n    }\r\n\r\n    const handlePayment= async ()=>{\r\n           //1. check if there is sufficient amount\r\n           if ( totalamount>balance){\r\n            toast({\r\n                message: 'Total amount due greater than money received. Kindly top up account or reduce number of bills to be paid',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n    \r\n              return\r\n           }\r\n          \r\n           \r\n           \r\n    productItem.forEach(el=>{\r\n            if (!el.proposedpayment.amount){\r\n             toast({\r\n                 message: 'one or more bills do not have a payment method selected',\r\n                 type: 'is-danger',\r\n                 dismissible: true,\r\n                 pauseOnHover: true,\r\n               })\r\n             return\r\n             }\r\n            })\r\n\r\n             //transform \r\n    productItem.forEach(el=>{\r\n            if (el.show===\"flex\"){\r\n                    const  payObj={\r\n                    amount:  el.proposedpayment.amount,\r\n                    mode:\"Part\",\r\n                    date: new Date().toLocaleString()\r\n                }\r\n            el.paymentInfo.paymentDetails.push(payObj)\r\n            }\r\n\r\n            if (el.show===\"none\"){\r\n                const  payObj={\r\n                amount:  el.proposedpayment.amount,\r\n                mode:\"Full\",\r\n                date: new Date().toLocaleString()\r\n                }\r\n                el.paymentInfo.paymentDetails.push(payObj)\r\n                }\r\n\r\n            })\r\n\r\n        let allItems=productItem\r\n\r\n           allItems.forEach(el=>{\r\n\r\n            el.paymentInfo.balance = el.proposedpayment.balance\r\n            el.paymentInfo.paidup = el.proposedpayment.paidup\r\n            el.paymentInfo.amountpaid = el.proposedpayment.amount\r\n\r\n            if (el.paymentInfo.balance === 0){\r\n                el.billing_status=\"Fully Paid\"\r\n            }else{\r\n                el.billing_status=\"Part Payment\"\r\n            }\r\n            el.show=\"none\"\r\n            el.checked=false\r\n            delete el.proposedpayment\r\n            delete el.partPay\r\n           })\r\n           \r\n\r\n           const obj ={\r\n            clientId:medication.participantInfo.client._id,//sending money\r\n            clientName: source ,\r\n            client:medication.participantInfo.client,\r\n            facilityId:user.employeeData[0].facilityDetail._id,\r\n            invoiceNo:documentNo,\r\n            totalamount:totalamount,\r\n            createdby:user._id,\r\n            status:\"Fully Paid\", //billid to be paid : ref invoice to pay\r\n            bills:allItems,\r\n            balance:balance,\r\n            facilityName:user.employeeData[0].facilityDetail.facilityName\r\n           }\r\n\r\n           console.log(obj)\r\n\r\n           \r\n            InvoiceServ.create(obj)\r\n            .then( async(resp)=>{\r\n                setProductItem([])\r\n                toast({\r\n                    message: 'payment successful',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  const    newProductEntryModule={\r\n                    selectedFinance:{},\r\n                    show :'create'\r\n                }\r\n              await setState((prevstate)=>({...prevstate, finance:newProductEntryModule}))\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error occurred with payment' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  }) \r\n            })\r\n\r\n        \r\n           \r\n           //2. call single end point for billspayment?\r\n\r\n           //2.1 create subwallet transaction- debit\r\n\r\n           //2.2 update subwallet\r\n\r\n           //2.3 mark orders as paid\r\n\r\n           //2.4 mark bills as paid\r\n\r\n        }\r\n// console.log(\"simpa\")\r\n     return (\r\n         <>\r\n             <div className=\"card card-overflow\">\r\n             <div className=\"card-header\">\r\n                 <p className=\"card-header-title\">\r\n                     Pay Bill\r\n                 </p>\r\n                 <button className=\"button is-success is-small btnheight mt-2\" >\r\n                    Balance: N {balance}\r\n                 </button>\r\n             </div>\r\n             <div className=\"card-content \">\r\n    \r\n            {/*  <form onSubmit={onSubmit}>  */}\r\n             <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n         \r\n             <div className=\"field\">\r\n                     <p className=\"control has-icons-left has-icons-right\">\r\n                         <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"client\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Client\" />\r\n                         <span className=\"icon is-small is-left\">\r\n                             <i className=\"fas fa-hospital\"></i>\r\n                         </span>                    \r\n                     </p>\r\n                 </div>\r\n                 <div className=\"field\">\r\n                 <p className=\"control has-icons-left\">\r\n                     <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-phone-alt\"></i>\r\n                     </span>\r\n                 </p>\r\n             </div>\r\n                 \r\n            \r\n                </div>\r\n             </div>\r\n             <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\" >\r\n             <div className=\"field\">\r\n             <label className=\"label is-small\">Total Amount Due:</label>\r\n             </div>\r\n             <div className=\"field\" style={{width:\"40%\"}}>\r\n                 <p className=\"control has-icons-left \" /* style={{display:\"none\"}} */>\r\n                     <input className=\"input is-small\"  disabled={changeAmount} value={totalamount} name=\"totalamount\"  onChange={e=>setTotalamount(e.target.value)} placeholder=\"Amount\"  />\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-dollar-sign\"></i>\r\n                     </span>\r\n                 </p>\r\n                \r\n \r\n             </div> \r\n            \r\n             </div>\r\n          </div>\r\n                \r\n               {/*   </form>   */} \r\n                \r\n            \r\n          {/* array of ProductEntry items */}\r\n         \r\n         <label className=\"label is-small \">Payment Information:</label>\r\n         <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n             <div className=\"field\">    \r\n                    <div className=\"control\">\r\n                        <div className=\"select is-small \">\r\n                            <select name=\"paymentmode\" value={paymentmode} onChange={(e)=>handleChangeMode(e.target.value)} className=\"selectadd\" >\r\n                                <option value=\"\">Payment Mode </option>\r\n                                <option value=\"Cash\">Cash</option>\r\n                                <option value=\"Wallet\">Wallet </option>\r\n                                <option value=\"Wallet\">Bank Transfer </option>\r\n                                <option value=\"Card\">Card</option>\r\n                                <option value=\"Cheque\">Cheque</option> \r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n             <div className=\"field\" >\r\n                 <p className=\"control has-icons-left\" >\r\n                     <input className=\"input is-small\"  name=\"order\" value={amountPaid} type=\"text\" onChange={ e=> setAmountPaid(e.target.value)} placeholder=\"Amount\"  />\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-hashtag\"></i>\r\n                     </span>\r\n                 </p>\r\n             </div> \r\n             <div className=\"field\">\r\n                <p className=\"control\">\r\n                     <button className=\"button is-info is-small  is-pulled-right selectadd\" disabled={buttonState}>\r\n                       <span className=\"is-small\" onClick={handleAccept} >Accept</span>\r\n                     </button>\r\n                 </p>\r\n             </div>\r\n             </div>\r\n             </div>\r\n            \r\n          \r\n         <div className=\"field is-horizontal pullup\">\r\n             <div className=\"field-body\" >\r\n             <div className=\"field\">\r\n             <label className=\"label is-small\">Payment Details:</label>\r\n             </div>\r\n             <div className=\"field\" >\r\n                 <p className=\"control has-icons-left \" /* style={{display:\"none\"}} */>\r\n                     <input className=\"input is-small\"  name=\"description\"  value={description} type=\"text\"  onChange={async e=> await setDescription(e.target.value)}  placeholder=\"Payment Details\"  />\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-dollar-sign\"></i>\r\n                     </span>\r\n                 </p>\r\n                \r\n \r\n             </div> \r\n            \r\n             </div>\r\n          </div>\r\n             \r\n        {(productItem.length>0) && <>\r\n            <label>Product Items:</label>\r\n        <div className=\"vscrollable-acc\">\r\n             \r\n          <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                 <thead>\r\n                     <tr>\r\n                     <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                     <th><abbr title=\"Category\">Category</abbr></th>\r\n                     <th><abbr title=\"Description\">Description</abbr></th>\r\n                    \r\n                     <th><abbr title=\"Cost Price\">Type</abbr></th>\r\n                     <th><abbr title=\"Amount\">Amount</abbr></th>\r\n                     {/* <th><abbr title=\"Cost Price\">Amount</abbr></th> */}\r\n                     {/* <th><abbr title=\"Actions\">Actions</abbr></th> */}\r\n                     </tr>\r\n                 </thead>\r\n                 <tfoot>\r\n                     \r\n                 </tfoot>\r\n                 <tbody>\r\n                    { productItem.map((ProductEntry, i)=>(\r\n                          <tr key={i}>\r\n                         <th>{i+1}</th>\r\n                         <th>{ProductEntry.orderInfo.orderObj.order_category}</th>\r\n                         <td>{ProductEntry.serviceInfo.name}</td>\r\n                         <td><label className=\" is-small\">\r\n                             <input  type=\"radio\" name={ProductEntry._id} value=\"Full\" checked={ProductEntry.show===\"none\"}  onChange={(e)=>{handleChangePart(ProductEntry,e)}}/>\r\n                               <span > Full</span>\r\n                              </label> <br/>\r\n                              <label className=\" is-small\">\r\n                             <input type=\"radio\" name={ProductEntry._id}  value=\"Part\" onChange={(e)=>handleChangePart(ProductEntry,e)}/>\r\n                             <span> Part </span>\r\n                              </label>\r\n                              <div className=\"field has-addons\" style={{display:`${ProductEntry.show}`}}>\r\n                              <div className=\"control\">\r\n                                  <input  className=\"input selectadd\" type=\"text\" name={ProductEntry._id}  /* value={ProductEntry.partPay}  */  onChange={(e)=>handlePartAmount(ProductEntry,e)} />\r\n                                  </div> \r\n                                  <div className=\"control\">\r\n                                  <button className=\"button is-info selectadd\" onClick={(e)=>handleUpdate(ProductEntry,e)}>Update</button>\r\n                                  </div>\r\n                                  </div>\r\n                             {/*  {ProductEntry.partPay} */}\r\n                              </td>\r\n                         <td>\r\n                            <p><strong>Balance Due:</strong>{ProductEntry.paymentInfo.balance}  ({ProductEntry.proposedpayment.balance})</p>\r\n                            <p><strong>Paid Up:</strong>{ProductEntry.paymentInfo.paidup} ({ProductEntry.proposedpayment.paidup })</p>\r\n                            <p><strong>Amount:</strong>{ProductEntry.paymentInfo.amountDue}</p>\r\n                         </td>\r\n\r\n                          \r\n                        {/* <td>{ProductEntry.amount}</td> */}\r\n                        {/*  <td><span className=\"showAction\"  >x</span></td> */}\r\n                         </tr>\r\n                     ))}\r\n                 </tbody>\r\n                 </table>\r\n                 </div>    \r\n                 <div className=\"field mt-2 is-grouped\">\r\n                    <p className=\"control\">\r\n                        <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={handlePayment}>\r\n                            Pay\r\n                        </button>\r\n                    </p>\r\n                  {/* <p className=\"control\">\r\n                     <button className=\"button is-info is-small\" disabled={!productItem.length>0} onClick={onSubmit} >\r\n                         Generate Invoice\r\n                     </button>\r\n                 </p>  */}\r\n                 </div>\r\n        \r\n            </>\r\n        }   \r\n             \r\n             \r\n             </div>\r\n             </div>\r\n             <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card  modalbkgrnd\">\r\n                                        <header className=\"modal-card-head  btnheight\">\r\n                                        <p className=\"modal-card-title\">Documentation</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body modalcolor\">\r\n                                      \r\n                                         <Encounter standalone=\"true\" />\r\n                                        </section> \r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer>  */}\r\n                                   </div>\r\n                                </div>      \r\n         </>\r\n     )\r\n    \r\n }\r\n\r\n export  function InventorySearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('inventory')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n   const {user} = useContext(UserContext) \r\n   const {state}=useContext(ObjectContext)\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n    }\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 facility: user.currentEmployee.facilityDetail._id,\r\n                 storeId: state.StoreModule.selectedStore._id,\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small  is-expanded\" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu expanded\" style={{width:\"100%\"}}>\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" /* onClick={handleAddproduct} */> <span> {val} is not in your inventory</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <div><span>{facility.name}</span></div>\r\n                                        <div><span><strong>{facility.quantity}</strong></span>\r\n                                        <span>{facility.baseunit}(s) remaining</span>\r\n                                        <span className=\"padleft\"><strong>Price:</strong> N{facility.sellingprice}</span></div>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}",["350","351"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js",["352","353"],"import io from 'socket.io-client'\r\nimport feathers from '@feathersjs/feathers'\r\nimport socketio from '@feathersjs/socketio-client'\r\nimport authentication from '@feathersjs/authentication-client'\r\n\r\nconst herok= 'https://healthstack-backend.herokuapp.com'\r\nconst url= 'http://localhost:3035'\r\nconst API = process.env.NODE_ENV !== 'production' ?  url :'https://healthstack-backend.herokuapp.com' ;\r\nconst socket=io(url, {\r\n    transports: ['websocket'],\r\n    forceNew: true\r\n  })\r\nconst client=feathers()\r\nclient.configure(socketio(socket))\r\nclient.configure(authentication({\r\n    storage:window.localStorage\r\n}))\r\n\r\nexport default client\r\n",["354","355"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js",["356","357","358","359"],"import React, {useState,useContext} from 'react'\r\nimport client from '../feathers'\r\nimport { useForm } from \"react-hook-form\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport {UserContext} from '../context'\r\nimport {toast} from 'bulma-toast'\r\n\r\nexport default function Login() {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [error, setError] =useState(true)\r\n    const [errorMessage,setErrorMessage] = useState(\"\")\r\n   // const userServ=client.service('/users')\r\n    const history = useHistory()\r\n    const {/* user, */setUser} = useContext(UserContext)\r\n\r\n   \r\nconst onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        /* setErrorMessage(\"\")\r\n        setError(false) */\r\n           const  email=data.email\r\n           const password=data.password\r\n         \r\n          \r\n          client.authenticate({\r\n            strategy:'local',\r\n            email,\r\n            password\r\n        }).then(async (res)=>{\r\n               // console.log(JSON.stringify(res.user))\r\n                e.target.reset();\r\n               await setUser(res.user)\r\n              // console.log(user)\r\n               localStorage.setItem(\"user\",JSON.stringify(res.user))\r\n               history.push(\"/app\")\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setErrorMessage(\"Error loggin in User, probable network issues \"+ err )\r\n                toast({\r\n                    message: 'Error loggin in User, probable network issues ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <section className=\"section\">\r\n        <div className=\"container\">\r\n        <div className=\"columns is-centered\">\r\n        <div className=\"column is-4 \">\r\n        <div className=\"card v-centered\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Health Stack\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n           <div className=\"field\">\r\n            <p className=\"control has-icons-left has-icons-right\">\r\n                <input className=\"input\" ref={register({ required: true })}  name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n                  <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-envelope\"></i>\r\n                </span>\r\n                \r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <input className=\"input\" ref={register({ required: true })} name=\"password\" type=\"password\" placeholder=\"Password\"/>\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"fas fa-lock\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control\">\r\n                <button className=\"button is-success is-small\">\r\n                    Login\r\n                </button>\r\n            </p>\r\n        </div>\r\n        { error && <div className=\"message\"> {errorMessage}</div>}\r\n        </form>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js",["360","361"],"import React, {useState} from 'react'\r\nimport client from '../feathers'\r\nimport { useForm } from \"react-hook-form\";\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nexport default function SignUp() {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [error, setError] =useState(true)\r\n    const [errorMessage,setErrorMessage] = useState(\"\")\r\n    const userServ=client.service('/users')\r\n    const history = useHistory()\r\n\r\n   \r\n      const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setErrorMessage(\"\")\r\n        setError(false)\r\n          if (data.password !==data.password2){\r\n              setErrorMessage(\"Passwords not identical\")\r\n              setError(true)\r\n              return\r\n          }\r\n        \r\n          delete data.password2\r\n          console.log(data);\r\n          userServ.create(data)\r\n            .then((res)=>{\r\n                console.log(JSON.stringify(res))\r\n                alert(\"User Created Successfully\")\r\n                e.target.reset();\r\n                history.push(\"/\")\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setErrorMessage(\"Error with creating User, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        \r\n        \r\n\r\n\r\n      } \r\n\r\n    return (\r\n        <section className=\"section\">\r\n            <div className=\"container signupcenter\">\r\n                <div className=\"columns\">\r\n                    <div className=\"column is-4 is-offset-4\">\r\n                        <div className=\"card \">\r\n                            <header className=\"card-header\"> \r\n                                <p className=\"card-header-title\">HealthStack: Sign Up</p>\r\n                            </header>\r\n                        <div className=\"card-content\">\r\n                            <form onSubmit={handleSubmit(onSubmit)}>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small\">First Name\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\"  ref={register({ required: true })}  type=\"text\" placeholder=\"Enter Full Name\" name=\"firstname\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small\">Last Name\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\"  ref={register({ required: true })}  type=\"text\" placeholder=\"Enter Full Name\" name=\"lastname\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Phone Number\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"text\" placeholder=\"Enter Phone Number\" name=\"phone\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Email\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"text\" placeholder=\"Enter email\" name=\"email\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            \r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Password\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"password\" placeholder=\"Password\" name=\"password\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Repeat Password\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"password\" placeholder=\"Password\" name=\"password2\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                    \r\n                        {/* <div className=\"field\">\r\n                            <label className=\"label is-small\">Username\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input is-success  is-small\" type=\"text\" placeholder=\"Text input\" value={\"bulma\"} />\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-user\"></i>\r\n                                </span>\r\n                                <span className=\"icon is-small is-right\">\r\n                                <i className=\"fas fa-check\"></i>\r\n                                </span>\r\n                            </div>\r\n                            </label>\r\n                            <p className=\"help is-success\">This username is available</p>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label className=\"label is-small\">Email</label>\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input is-danger is-small\" type=\"email\" placeholder=\"Email input\" value=\"hello@\" />\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-envelope\"></i>\r\n                                </span>\r\n                                <span className=\"icon is-small is-right\">\r\n                                <i className=\"fas fa-exclamation-triangle\"></i>\r\n                                </span>\r\n                            </div>\r\n                            <p className=\"help is-danger\">This email is invalid</p>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                        <label className=\"label is-small\">Subject</label>\r\n                        <div className=\"control is-small\">\r\n                            <div className=\"select\">\r\n                            <select>\r\n                                <option>Select dropdown</option>\r\n                                <option>With options</option>\r\n                            </select>\r\n                            </div>\r\n                        </div>\r\n                        </div> */}\r\n\r\n                    {/*  <div className=\"field\">\r\n                            <label className=\"label\">Message</label>\r\n                            <div className=\"control\">\r\n                                <textarea className=\"textarea is-small\" placeholder=\"Textarea\"></textarea>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                    {/*  <div className=\"field\">\r\n                            <div className=\"control is-small\">\r\n                                <label className=\"checkbox\">\r\n                                <input type=\"checkbox\"/>\r\n                                I agree to the <a href=\"./terms\">terms and conditions</a>\r\n                                </label>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                    {/*  <div className=\"field\">\r\n                            <div className=\"control\">\r\n                                <label className=\"radio is-small\">\r\n                                <input type=\"radio\" name=\"question\"/>\r\n                                Yes\r\n                                </label>\r\n                                <label className=\"radio is-small\">\r\n                                <input type=\"radio\" name=\"question\" />\r\n                                No\r\n                                </label>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                        <div className=\"field is-grouped\">\r\n                            <div className=\"control\">\r\n                                <button type=\"submit\" className=\"button is-link is-small\">Submit</button>\r\n                            </div>\r\n                           {/*  <div className=\"control\">\r\n                                <button className=\"button is-link is-light is-small\" >Cancel</button>\r\n                            </div> */}\r\n                        </div>\r\n                        { error && \r\n                        <div className=\"message\"> {errorMessage}                            \r\n                        </div>\r\n                        }\r\n                        </form>\r\n\r\n                        </div>\r\n                        </div>\r\n                        </div>\r\n                \r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js",["362","363","364","365","366"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClinicModule.js",["367","368","369","370"],"import React,{useState,useContext,useEffect} from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink} from 'react-router-dom'\r\nimport ClinicReport from './Clinic/ClinicReport'\r\nimport ClinicSetup from './Clinic/ClinicSetup'\r\nimport ClinicStore from './Clinic/ClinicStore'\r\nimport ClinicHome from './Clinic/ClinicHome'\r\nimport Appointments from './Clinic/Appointments'\r\nimport Encounter from './EncounterMgt/Encounter'\r\nimport Patients from './ClientMgt/Patient'\r\nimport Clinic, { ClinicList } from './Clinic/Clinic'\r\nimport {UserContext,ObjectContext} from '../context'\r\n\r\nexport default function ClinicModule() {\r\n    const {state,setState}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedClinic,setSelectedClinic]=useState()\r\n    const [showModal,setShowModal]=useState(false)\r\n\r\n    let { path, url } = useRouteMatch();\r\n    \r\n    useEffect(() => {\r\n       \r\n        console.log(\"starting up Clinic module\")\r\n        if (!selectedClinic){\r\n            handleChangeClinic()\r\n\r\n            }\r\n         return () => {       \r\n            }\r\n        }, [])\r\n   \r\n    useEffect(()=>{\r\n     setSelectedClinic(state.ClinicModule.selectedClinic)\r\n\r\n    },[state.ClinicModule])\r\n\r\n    const handleChangeClinic= async()=>{\r\n        await setShowModal(true)                                                                                                                                                        \r\n       // console.log( showModal)\r\n    }\r\n\r\n    return (\r\n            <section className=\"section has-background-info remPad\">\r\n               \r\n               {/*  <div className=\"\"> */}\r\n                    <nav className=\"navbar minHt z10 has-background-info\">\r\n                        <div className=\"container minHt\">\r\n                            <div className=\"navbar-brand  minHt\">\r\n                                <div className=\"navbar-item \">\r\n                                    <span className=\"is-size-6 has-text-weight-medium\">\r\n                                        Health Stack::Clinic::{selectedClinic?selectedClinic.name:\"\"}</span>\r\n                                        <button className=\"button is-small is-info minHt\" onClick={()=>handleChangeClinic()}>Change Clinic</button> \r\n                                </div>\r\n                                \r\n                            {/* <div className=\"navbar-item\">\r\n                                <img src=\"https://bulma.io/images/bulma-type-white.png\" alt=\"Logo\" />\r\n                            </div> */}\r\n                                <span className=\"navbar-burger\" data-target=\"navbarMenuHeroB\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </span>\r\n                            </div>\r\n                            <div id=\"navbarMenuHeroB\" className=\"navbar-menu\">\r\n                                <div className=\"navbar-end\">\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}`}>Home Page</NavLink> \r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/clinics`}>Clinics</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/clinicsetup`}> Clinic Admin</NavLink>\r\n                                    </div>\r\n                                     <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/appointments`}>Appointments</NavLink>\r\n                                    </div>\r\n                                  {/*   <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/clinicstore`}>Checked In Clients</NavLink>\r\n                                    </div>  */}\r\n                                    {/* <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/encounter`}>Attend to Client</NavLink>\r\n                                    </div> */}\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/patients`}>Clients</NavLink>\r\n                                    </div>\r\n                                    {/* <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/clinicreports`}>Reports</NavLink>\r\n                                    </div> */}\r\n                                {/* <span className=\"navbar-item\">\r\n                                <div className=\"button is-info is-inverted\">\r\n                                    <span className=\"icon\">\r\n                                    <i className=\"fab fa-github\"></i>\r\n                                    </span>\r\n                                    <span>Download</span>\r\n                                </div>\r\n                                </span> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                    \r\n               {/*  </div> */}\r\n                \r\n                {/* <div className=\"section\"> */}\r\n                {/* <div className=\"container mvUp \" > */}\r\n                       \r\n                    <Switch>\r\n                        <Route path={path} exact>\r\n                            <ClinicHome />\r\n                        </Route>\r\n                        <Route path={`${path}/clinicsetup`} exact >\r\n                            <ClinicSetup />\r\n                        </Route>\r\n                        <Route path={`${path}/appointments`} exact>\r\n                            <Appointments/>\r\n                        </Route>\r\n                        <Route path={`${path}/clinicstore`} exact>\r\n                            <ClinicStore />\r\n                        </Route>\r\n                        <Route path={`${path}/encounter`} exact>\r\n                            <Encounter/>\r\n                        </Route>\r\n                        <Route path={`${path}/patients`} exact>\r\n                            <Patients />\r\n                        </Route>\r\n                        <Route path={`${path}/clinicreports`} exact>\r\n                            <ClinicReport />\r\n                        </Route>\r\n                        <Route path={`${path}/clinics`} exact>\r\n                            <Clinic />\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                  \r\n\r\n                    <div className={`modal ${showModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Clinic</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        <ClinicList standalone=\"true\"  closeModal={()=>setShowModal(false)}/>\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>        \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js",[],["371","372"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js",[],["373","374"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js",["375","376"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Employee() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedEmployee,setSelectedEmployee]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Employee  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <EmployeeList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.EmployeeModule.show ==='create')&&<EmployeeCreate />}\r\n                {(state.EmployeeModule.show ==='detail')&&<EmployeeDetail  />}\r\n                {(state.EmployeeModule.show ==='modify')&&<EmployeeModify Employee={selectedEmployee} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function EmployeeCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeEmployee.FacilityId)//\r\n      if (!user.stacker){\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    },[user])\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          if (user.currentEmployee){\r\n         // data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        EmployeeServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Employee successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Employee created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating employee ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Employee\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            { error && <div className=\"is-danger\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"lastname\" type=\"text\" placeholder=\"Last Name\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function EmployeeList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedEmployee, setSelectedEmployee]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Employee)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Employee)\r\n\r\n        await setSelectedEmployee(Employee)\r\n\r\n        const    newEmployeeModule={\r\n            selectedEmployee:Employee,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='firstname'\r\n       console.log(val)\r\n       EmployeeServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Employee  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Employee, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findEmployee= await EmployeeServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findEmployee.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findEmployee= await EmployeeServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findEmployee.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Employee  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Employee, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                EmployeeServ.on('created', (obj)=>getFacilities())\r\n                EmployeeServ.on('updated', (obj)=>getFacilities())\r\n                EmployeeServ.on('patched', (obj)=>getFacilities())\r\n                EmployeeServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Employees </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>First Name</th>\r\n                                        <th><abbr title=\"Last Name\">Last Name</abbr></th>\r\n                                        <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th>\r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Employee, i)=>(\r\n\r\n                                            <tr key={Employee._id} onClick={()=>handleRow(Employee)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Employee.firstname}</th>\r\n                                            <td>{Employee.lastname}</td>\r\n                                            <td>{Employee.profession}</td>\r\n                                            <td>{Employee.phone}</td>\r\n                                            <td>{Employee.email}</td>\r\n                                            <td>{Employee.department}</td>\r\n                                            <td>{Employee.deptunit}</td>\r\n                                            <td>{Employee.facility}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function EmployeeDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const EmployeeServ=client.service('/Employee')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Employee =state.EmployeeModule.selectedEmployee \r\n\r\n    const handleEdit= async()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:Employee,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Employee Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <fieldset>\r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        First Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-medium \"   name=\"EmployeeName\"> {Employee.firstname} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Last Name:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"EmployeeAddress\">{Employee.lastname} </span> \r\n                    </td>\r\n                </tr>\r\n                    <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"EmployeeCity\">{Employee.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-small \"  name=\"EmployeeContactPhone\" >{Employee.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-small \"  name=\"EmployeeEmail\" >{Employee.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"EmployeeOwner\">{Employee.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"EmployeeType\">{Employee.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr>\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-small \"  name= \"EmployeeCategory\">{Employee.EmployeeCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </fieldset>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function EmployeeModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Employee =state.EmployeeModule.selectedEmployee \r\n\r\n        useEffect(() => {\r\n            setValue(\"firstname\", Employee.firstname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"lastname\", Employee.lastname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"profession\", Employee.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Employee.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Employee.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Employee.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Employee.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n          /*   setValue(\"EmployeeCategory\", Employee.EmployeeCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newEmployeeModule={\r\n        selectedEmployee:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Employee._id\r\n        if (conf){\r\n             \r\n        EmployeeServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Employee successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Employee deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Employee, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Employee, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Employee.facility\r\n          //console.log(data);\r\n          \r\n        EmployeeServ.patch(Employee._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Employee successfully\")\r\n                 toast({\r\n                    message: 'Employee updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Employee, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Employee, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Employee Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\">First Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Last Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"lastname\" type=\"text\" placeholder=\"Last Name\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Employee Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"EmployeeCategory\" type=\"text\" placeholder=\"Employee Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            <div className=\"block\">\r\n            <div className=\"field  is-grouped\">\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}",["377","378"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\ProductExit.js",["379","380","381","382","383","384","385","386","387","388","389","390","391"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\nvar random = require('random-string-generator');\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function ProductEntry() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ProductExitList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ProductExitModule.show ==='create')&&<ProductExitCreate />}\r\n                {(state.ProductExitModule.show ==='detail')&&<ProductExitDetail  />}\r\n                {(state.ProductExitModule.show ==='modify')&&<ProductExitModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductExitCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Sales\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(0)\r\n    const [qamount,setQAmount] = useState(null)\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [inventoryId,setInventoryId] = useState(\"\")\r\n    const [baseunit,setBaseunit] = useState(\"\")\r\n    const [quantity,setQuantity] = useState(\"\")\r\n    const [sellingprice,setSellingPrice] = useState(\"\")\r\n    const [costprice,setCostprice] = useState(0)\r\n    const [invquantity,setInvQuantity] = useState(\"\")\r\n    const [calcamount,setCalcAmount] = useState(0)\r\n    const [productItem,setProductItem] = useState([])\r\n    const [billingId,setBilllingId]=useState(\"\")  \r\n    const [changeAmount, setChangeAmount] = useState(true)\r\n    const {state}=useContext(ObjectContext)\r\n    const inputEl = useRef(0);\r\n    let calcamount1\r\n    let hidestatus\r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const productItemI={\r\n        productId,\r\n        name,\r\n        quantity,\r\n        sellingprice,\r\n        amount:calcamount, //qamount||\r\n        baseunit,\r\n        costprice,\r\n        billingId\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setProductId(obj.productId)\r\n        setName(obj.name)\r\n        setBaseunit(obj.baseunit)\r\n        setInventoryId(obj.inventoryId)\r\n        setSellingPrice(obj.sellingprice)\r\n        setInvQuantity(obj.quantity)\r\n        setCostprice(obj.costprice)\r\n        setBilllingId(obj.billingId)\r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setProductId(\"\")\r\n            setName(\"\")\r\n            setBaseunit(\"\")\r\n            setInventoryId(\"\")\r\n            setSellingPrice(\"\")\r\n            setInvQuantity(\"\")\r\n            setQAmount(null)\r\n            setCostprice(\"\")\r\n           // setCalcAmount(null)\r\n\r\n        }\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n    const handleUpdateTotal=()=>{\r\n\r\n        \r\n        setTotalamount(prevtotal=>Number(prevtotal) + Number(calcamount))\r\n    }\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n\r\n    const handleAmount= async()=>{\r\n        await setQAmount(null)\r\n       // alert(\"Iam chaning qamount\")\r\n    }\r\n    const handleClickProd=async()=>{\r\n        console.log(\"amount: \",productItemI.amount)\r\n        console.log(\"qamount: \",qamount)\r\n        console.log(\"calcamount: \",calcamount)\r\n\r\n        if ( quantity===0||quantity===\"\"|| productId===\"\"){\r\n            toast({\r\n                message: 'You need to choose a product and quantity to proceed',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return \r\n        }\r\n\r\n        await setSuccess(false)\r\n        await setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n       handleUpdateTotal()\r\n        setName(\"\")\r\n        setBaseunit(\"\")\r\n        setQuantity(\"\")\r\n        setInventoryId(\"\")\r\n        setSellingPrice(\"\")\r\n        setInvQuantity(\"\")\r\n            handleAmount()\r\n       // setCalcAmount(null)\r\n       await setSuccess(true)\r\n      /*  console.log(success)\r\n       console.log(qamount)\r\n       console.log(productItem) */\r\n       setChangeAmount(true)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const handleQtty=async(e)=>{\r\n        if (invquantity<e.target.value){\r\n            toast({\r\n                message: 'You can not sell more quantity than exist in inventory ' ,\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n            return\r\n        }\r\n        setQuantity(e.target.value)\r\n        calcamount1=quantity*sellingprice\r\n        await setCalcAmount(calcamount1)\r\n        console.log(calcamount)\r\n\r\n       \r\n\r\n    }\r\n\r\n    useEffect( () => {\r\n         setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n       setCalcAmount(quantity*sellingprice) \r\n        return () => {\r\n            \r\n        }\r\n    },[date])\r\n\r\n    const resetform=()=>{\r\n     setType(\"Sales\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setBaseunit()\r\n    setCostprice()\r\n    setProductItem([])\r\n    }\r\n\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        await setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n        productEntry.productitems=productItem\r\n        productEntry.createdby=user._id\r\n        productEntry.transactioncategory=\"debit\"\r\n       \r\n          console.log(\"b4 facility\",productEntry);\r\n          if (user.currentEmployee){\r\n         productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }else{\r\n            toast({\r\n                message: 'You can not remove inventory from any organization',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n          }\r\n          if (state.StoreModule.selectedStore._id){\r\n            productEntry.storeId=state.StoreModule.selectedStore._id\r\n          }else{\r\n            toast({\r\n                message: 'You need to select a store before removing inventory',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n\r\n          }\r\n          console.log(\"b4 create\",productEntry);\r\n        ProductEntryServ.create(productEntry)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                resetform()\r\n               /*  setMessage(\"Created ProductEntry successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'ProductExit created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n                  const today=new Date().toLocaleString()\r\n      \r\n                  setDate(today)\r\n                  const invoiceNo=random(6,'uppernumeric')\r\n                setDocumentNo(invoiceNo)\r\n                setType(\"Sales\")\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductExit ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n      const handleChangeAmount=()=>{\r\n        setChangeAmount((rev)=>(!rev))\r\n        \r\n    }\r\n   // console.log(\"i am rendering\")\r\n\r\n    useEffect(() => {\r\n        const today=new Date().toLocaleString()\r\n        console.log(today)\r\n        setDate(today)\r\n        const invoiceNo=random(6,'uppernumeric')\r\n        setDocumentNo(invoiceNo)\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        calcamount1=quantity*sellingprice\r\n         setCalcAmount(calcamount1)\r\n         console.log(calcamount)\r\n         setChangeAmount(true)\r\n        return () => {\r\n            \r\n        }\r\n    }, [quantity])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Product Exit: Product Exit- Sales, Dispense, Audit, Transfer out\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n            <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n            <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType} className=\"selectadd\">\r\n                           <option value=\"\">Choose Type </option>\r\n                            <option value=\"Sales\">Sales </option>\r\n                            <option value=\"In-house\">In-House </option>\r\n                            <option value=\"Dispense\">Dispense</option>\r\n                            <option value=\"Audit\">Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"client\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Client\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n           \r\n            </div>\r\n            </div> {/* horizontal end */}\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                    <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n               <div className=\"field is-horizontal\">\r\n               <div className=\"field-body\">\r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={e=>setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-coins\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n\r\n                </div> \r\n                </div> \r\n               \r\n                </form>   \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Product Items:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <InventorySearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                 {sellingprice &&   \"N\"}{sellingprice} {sellingprice &&   \"per\"}  {baseunit} {invquantity} {sellingprice &&   \"remaining\"} \r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\" >\r\n                <div className=\"field\" style={{width:\"40%\"}}>\r\n                <p className=\"control has-icons-left\" >\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={ e=> handleQtty(e)} placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hashtag\"></i>\r\n                    </span>\r\n                   \r\n                </p>\r\n        <label >{baseunit}</label>\r\n            </div> \r\n            <div className=\"field\">\r\n            <label>Amount:</label>{/* <p>{quantity*sellingprice}</p> */}\r\n            </div>\r\n            <div className=\"field\" style={{width:\"40%\"}}>\r\n                <p className=\"control has-icons-left \" /* style={{display:\"none\"}} */>\r\n                    <input className=\"input is-small\" name=\"qamount\" disabled={changeAmount} value={calcamount} type=\"text\"  onChange={async e=> await setCalcAmount(e.target.value)}  placeholder=\"Amount\"   />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-dollar-sign\"></i>\r\n                    </span>\r\n                </p>\r\n                <button className=\"button is-small is-success btnheight\" onClick={handleChangeAmount}>Adjust</button>\r\n            </div> \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n            \r\n       {(productItem.length>0) && <div>\r\n            <label>Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Selling Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.sellingprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Sell\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" disabled={!productItem.length>0} /* onClick={onSubmit} */>\r\n                        Clear\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductExitList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProductEntry, setSelectedProductEntry]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedProductEntry(ProductEntry)\r\n\r\n        const    newProductExitModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductEntryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                transactioncategory:\"debit\",\r\n                storeId:state.StoreModule.selectedStore._id,\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProductEntry= await ProductEntryServ.find(\r\n                {query: {\r\n                    transactioncategory:\"debit\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProductEntry.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        /* toast({\r\n                            message: 'You do not qualify to view this',\r\n                            type: 'is-danger',\r\n                            dismissible: true,\r\n                            pauseOnHover: true,\r\n                          }) \r\n                          return */\r\n                        const findProductEntry= await ProductEntryServ.find(\r\n                            {query: {\r\n                                transactioncategory:\"debit\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProductEntry.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" ProductEntry  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n         /*    useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n            useEffect(() => {\r\n               \r\n                if (!state.StoreModule.selectedStore){\r\n                    toast({\r\n                        message: 'kindly select a store',\r\n                        type: 'is-danger',\r\n                        dismissible: true,\r\n                        pauseOnHover: true,\r\n                      }) \r\n                      return\r\n                    getFacilities()\r\n\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductEntryServ.on('created', (obj)=>getFacilities())\r\n                ProductEntryServ.on('updated', (obj)=>getFacilities())\r\n                ProductEntryServ.on('patched', (obj)=>getFacilities())\r\n                ProductEntryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                console.log(\"store changed\")\r\n                return () => {\r\n                   \r\n                }\r\n            }, [state.StoreModule.selectedStore])\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {state.StoreModule.selectedStore?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search ProductEntry\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Product Exits </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th>Client</th>\r\n                                        <th><abbr title=\"Document No\">Document No</abbr></th>\r\n                                        <th><abbr title=\"Total Amount\">Total Amount</abbr></th>\r\n                                        <th><abbr title=\"Enteredby\">Entered By</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{ProductEntry.date}</td>\r\n                                            <th>{ProductEntry.type}</th>\r\n                                            <td>{ProductEntry.source}</td>\r\n                                            <td>{ProductEntry.documentNo}</td>\r\n                                            <td>{ProductEntry.totalamount}</td>\r\n                                            <td>{ProductEntry.enteredby}</td>\r\n                                            <td><span className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading... Choose a Store</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductExitDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductExitModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                    <th><abbr title=\"Amount\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.sellingprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductExitModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductExitModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductExitModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InventorySearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('inventory')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n   const {user} = useContext(UserContext) \r\n   const {state}=useContext(ObjectContext)\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n    }\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 facility: user.currentEmployee.facilityDetail._id,\r\n                 storeId: state.StoreModule.selectedStore._id,\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small  is-expanded\" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu expanded\" style={{width:\"100%\"}}>\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" /* onClick={handleAddproduct} */> <span> {val} is not in your inventory</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <div><span>{facility.name}</span></div>\r\n                                        <div><span><strong>{facility.quantity}</strong></span>\r\n                                        <span>{facility.baseunit}(s) remaining</span>\r\n                                        <span className=\"padleft\"><strong>Price:</strong> N{facility.sellingprice}</span></div>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        <ProductCreate />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicStore.js",["392","393","394","395","396","397","398","399"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Inventory() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedInventory,setSelectedInventory]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Inventory  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <InventoryList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.InventoryModule.show ==='create')&&<InventoryCreate />}\r\n                {(state.InventoryModule.show ==='detail')&&<InventoryDetail  />}\r\n                {(state.InventoryModule.show ==='modify')&&<InventoryModify Inventory={selectedInventory} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function InventoryCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeInventory.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        InventoryServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Inventory successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Inventory created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Inventory ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Inventory: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field\">    \r\n                <div class=\"control\">\r\n                    <div class=\"select is-small\">\r\n                        <select>\r\n                            <option>Purchase Invoice </option>\r\n                            <option>Initialization</option>\r\n                            <option>Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> {/* Audit/initialization/Purchase Invoice */}\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"supplier\" type=\"text\" placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"date\" type=\"text\" placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"totalamount\" type=\"text\" placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n         {/* array of inventory items */}\r\n         <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\"> +</span>\r\n                    </button>\r\n                </p>\r\n           <div className=\"field\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } /* add array no */ name=\"productId\" type=\"text\" placeholder=\"Product Id\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"quantity\" type=\"text\" placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                <label className=\"label is-small\">Base Unit</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"costprice\" type=\"text\" placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function InventoryList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedInventory, setSelectedInventory]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n    }\r\n\r\n    const handleRow= async(Inventory)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Inventory)\r\n\r\n        await setSelectedInventory(Inventory)\r\n\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       InventoryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Inventory  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Inventory, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findInventory= await InventoryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findInventory.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findInventory= await InventoryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findInventory.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Inventory  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                InventoryServ.on('created', (obj)=>getFacilities())\r\n                InventoryServ.on('updated', (obj)=>getFacilities())\r\n                InventoryServ.on('patched', (obj)=>getFacilities())\r\n                InventoryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n        \r\n        useEffect(() => {\r\n            getFacilities()\r\n            return () => {\r\n               \r\n            }\r\n        }, [state.StoreModule.selectedStore])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Inventory\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Inventories </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        {/* <th><abbr title=\"Category\">Category</abbr></th> */}\r\n                                        <th>Product</th>\r\n                                        <th><abbr title=\"Quantity\">Quantity</abbr></th>\r\n                                        <th><abbr title=\"Base Unit\">Base Unit</abbr></th>\r\n                                        <th><abbr title=\"Stock Value\">Stock Value</abbr></th>\r\n                                         <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                                        <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                                        <th><abbr title=\"Re-Order Level\">Re-Order Level</abbr></th>\r\n                                        <th><abbr title=\"Expiry\">Expiry</abbr></th> \r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Inventory, i)=>(\r\n\r\n                                            <tr key={Inventory._id} onClick={()=>handleRow(Inventory)}>\r\n                                            <th>{i+1}</th>\r\n                                            {/* <td>{Inventory.productDetail.category}</td> */}\r\n                                            <th>{Inventory.name}</th>\r\n                                            <td>{Inventory.quantity}</td>\r\n                                            <td>{Inventory.baseunit}</td>\r\n                                            <td>{Inventory.stockvalue}</td>\r\n                                            <td>{Inventory.costprice}</td>\r\n                                            <td>{Inventory.sellingprice}</td>\r\n                                            <td>{Inventory.reorder_level}</td> \r\n                                            <td>{Inventory.expiry}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function InventoryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const InventoryServ=client.service('/Inventory')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const {user} = useContext(UserContext) //,setUser\r\n    \r\n   \r\n\r\n   const Inventory =state.InventoryModule.selectedInventory \r\n   console.log(\"selected\",Inventory)\r\n\r\n   \r\n  const getFacilities= async()=>{\r\n    \r\n    \r\n     const findProductEntry= await client.service('productentry').find(\r\n        {query: {\r\n            'productitems.productId':Inventory.productId,\r\n            facility:user.currentEmployee.facilityDetail._id,\r\n            storeId:state.StoreModule.selectedStore._id,\r\n            $limit:20,\r\n            $sort: {\r\n                createdAt: -1\r\n            }\r\n            }})\r\n\r\n        console.log(findProductEntry)\r\n       }\r\n    \r\n       useEffect(() => {\r\n        getFacilities()\r\n           return () => {\r\n               \r\n           }\r\n       }, [Inventory])\r\n /* await setFacilities(findProductEntry.data)\r\n        }\r\n        else {\r\n            if (user.stacker){ */\r\n                /* toast({\r\n                    message: 'You do not qualify to view this',\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  }) \r\n                  return */\r\n               /*  const findProductEntry= await ProductEntryServ.find(\r\n                    {query: {\r\n                        \r\n                        $limit:20,\r\n                        $sort: {\r\n                            createdAt: -1\r\n                        }\r\n                        }})\r\n    \r\n            await setFacilities(findProductEntry.data)\r\n\r\n            }\r\n        }  */\r\n  /*   .then((res)=>{\r\n        console.log(res)\r\n            setFacilities(res.data)\r\n            setMessage(\" ProductEntry  fetched successfully\")\r\n            setSuccess(true)\r\n        })\r\n        .catch((err)=>{\r\n            setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n            setError(true)\r\n        }) */\r\n    \r\n    \r\n\r\n\r\n\r\n    const handleEdit= async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Inventory Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Product Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"><strong> {Inventory.name} </strong></span>\r\n                        </td>\r\n                    </tr>\r\n                   {/*  <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Inventory Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"InventoryType\">{Inventory.InventoryType} </span> \r\n                    </td>\r\n                </tr> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Set Price\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\"  /*  onClick={handleSetPrice} */>\r\n                        Audit\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-info is-small\" /* onClick={handleEdit} */>\r\n                        Transaction History\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" /* onClick={handleEdit} */>\r\n                        Reorder Level\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function InventoryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    const [billservice,setBillService] = useState()\r\n    // eslint-disable-next-line \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const billServ=client.service('billing')\r\n\r\n    const Inventory =state.InventoryModule.selectedInventory // set inventory\r\n    const handleSetPrice = async()=>{\r\n    \r\n        const service = await  billServ.get(Inventory.billingId) // get the service\r\n            const contractSel= service.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n            \r\n            setValue(\"price\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"oldprice\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            await setBillService(service)\r\n            console.log(contractSel,service)\r\n    }\r\n \r\n        useEffect(() => {\r\n            handleSetPrice()\r\n     \r\n            return () => {\r\n                \r\n            }\r\n        },[])\r\n\r\n   const handleCancel=async()=>{\r\n   \r\n    const    newInventoryModule={\r\n        selectedInventory:{},\r\n        show :'detail'\r\n      }\r\n        await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n            const    newInventoryModule={\r\n                selectedInventory:{},\r\n                show :'detail'\r\n            }\r\n        setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n\r\n        }\r\n\r\n\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Inventory._id\r\n        if (conf){\r\n             \r\n        InventoryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Inventory successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Inventory deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Inventory, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n       // data.facility=Inventory.facility\r\n          //console.log(data);\r\n          const contractSel= billservice.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n          contractSel[0].price=data.price \r\n          billServ.patch(billservice._id,billservice)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Inventory successfully\")\r\n                 toast({\r\n                    message: 'Price updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Price, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            }) \r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Set Price for {Inventory.name} per {Inventory.baseunit}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> New Selling Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"price\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Old Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"oldprice\" type=\"text\" placeholder=\"Inventory Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n           \r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='name' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Clinic.js",["400","401","402","403","404"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Clinic() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedClinic,setSelectedClinic]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Clinic  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <ClinicList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.ClinicModule.show ==='create')&&<ClinicCreate />}\r\n                {(state.ClinicModule.show ==='detail')&&<ClinicDetail  />}\r\n                {(state.ClinicModule.show ==='modify')&&<ClinicModify Clinic={selectedClinic} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ClinicCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClinicServ=client.service('location')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{ // buble-up from inputsearch for creating resource\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClinic.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n          data.locationType=\"Clinic\"\r\n        ClinicServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Clinic successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Clinic created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Clinic ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Clinic\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n               {/*  <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"ClinicType\" type=\"text\" placeholder=\"Type of Clinic\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div> */}\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Clinic\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ClinicList({standalone,closeModal}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ClinicServ=client.service('location')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedClinic, setSelectedClinic]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Clinic)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Clinic)\r\n\r\n        await setSelectedClinic(Clinic)\r\n\r\n        const    newClinicModule={\r\n            selectedClinic:Clinic,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n        closeModal()\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ClinicServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                locationType:\"Clinic\",\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Clinic  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Clinic, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findClinic= await ClinicServ.find(\r\n                {query: {\r\n                    locationType:\"Clinic\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        name: 1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findClinic.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findClinic= await ClinicServ.find(\r\n                            {query: {\r\n                                locationType:\"Clinic\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    name: 1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findClinic.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Clinic  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Clinic, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ClinicServ.on('created', (obj)=>getFacilities())\r\n                ClinicServ.on('updated', (obj)=>getFacilities())\r\n                ClinicServ.on('patched', (obj)=>getFacilities())\r\n                ClinicServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Clinics\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Clinics</span></div>\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        {/* <th><abbr title=\"Last Name\">Clinic Type</abbr></th>\r\n                                       <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                         <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>*/}\r\n                                       { !standalone &&  <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Clinic, i)=>(\r\n\r\n                                            <tr key={Clinic._id} onClick={()=>handleRow(Clinic)}  className={Clinic._id===(selectedClinic?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Clinic.name}</th>\r\n                                            {/*<td>{Clinic.ClinicType}</td>\r\n                                            < td>{Clinic.profession}</td>\r\n                                            <td>{Clinic.phone}</td>\r\n                                            <td>{Clinic.email}</td>\r\n                                            <td>{Clinic.department}</td>\r\n                                            <td>{Clinic.deptunit}</td> \r\n                                            <td>{Clinic.facility}</td>*/}\r\n                                          { !standalone &&   <td><span   className=\"showAction\"  >...</span></td>}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ClinicDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ClinicServ=client.service('/Clinic')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Clinic =state.ClinicModule.selectedClinic \r\n\r\n    const handleEdit= async()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:Clinic,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Clinic Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {Clinic.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Location Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"ClinicType\">{Clinic.locationType} </span> \r\n                    </td>\r\n                </tr>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ClinicCity\">{Clinic.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ClinicContactPhone\" >{Clinic.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ClinicEmail\" >{Clinic.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ClinicOwner\">{Clinic.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ClinicType\">{Clinic.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ClinicCategory\">{Clinic.ClinicCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ClinicModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ClinicServ=client.service('location')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Clinic =state.ClinicModule.selectedClinic \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", Clinic.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"locationType\", Clinic.locationType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", Clinic.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Clinic.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Clinic.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Clinic.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Clinic.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ClinicCategory\", Clinic.ClinicCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newClinicModule={\r\n        selectedClinic:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Clinic._id\r\n        if (conf){\r\n             \r\n        ClinicServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Clinic successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Clinic deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Clinic, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Clinic, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Clinic.facility\r\n          //console.log(data);\r\n          \r\n        ClinicServ.patch(Clinic._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Clinic successfully\")\r\n                 toast({\r\n                    message: 'Clinic updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Clinic, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Clinic, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Clinic Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Location Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ClinicType\" type=\"text\" placeholder=\"Clinic Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Clinic Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ClinicCategory\" type=\"text\" placeholder=\"Clinic Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                {/* <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\ClientBill.js",["405","406","407","408","409","410","411","412","413","414","415","416","417"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\n//import BillDispenseCreate from './BillPrescriptionCreate'\r\nimport PatientProfile from '../ClientMgt/PatientProfile'\r\n/* import {ProductCreate} from './Products' */\r\n// eslint-disable-next-line\r\n//const searchfacility={};\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\n\r\n// Demo styles, see 'Styles' section below for some notes on use.\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\n\r\nexport default function ClientBilledPrescription({selectedClient}){\r\n    // const { register, handleSubmit, watch, errors } = useForm();\r\n     // eslint-disable-next-line\r\n     const [error, setError] =useState(false)\r\n      // eslint-disable-next-line\r\n     const [success, setSuccess] =useState(false)\r\n      // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") \r\n     const OrderServ=client.service('order')\r\n     //const history = useHistory()\r\n    // const {user,setUser} = useContext(UserContext)\r\n     const [clientOrders,setClientOrders]=useState([])\r\n      // eslint-disable-next-line\r\n    const [selectedDispense, setSelectedDispense]=useState() //\r\n     // eslint-disable-next-line\r\n     const {state,setState}=useContext(ObjectContext)\r\n     // eslint-disable-next-line\r\n     const {user,setUser}=useContext(UserContext)\r\n     const [selectedMedication, setSelectedMedication] =useState(\"\")\r\n\r\n\r\n     console.log(selectedClient)\r\n \r\n     const handleSelectedClient= async(Client)=>{\r\n         // await setSelectedClient(Client)\r\n          const    newClientModule={\r\n              selectedClient:Client,\r\n              show :'detail'\r\n          }\r\n         await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n      }\r\n \r\n     const handleMedicationRow= async(ProductEntry)=>{ //handle selected single order\r\n         //console.log(\"b4\",state)\r\n     \r\n         //console.log(\"handlerow\",ProductEntry)\r\n         await handleSelectedClient(ProductEntry.client)\r\n \r\n     \r\n         await setSelectedMedication(ProductEntry)\r\n     \r\n         const    newProductEntryModule={\r\n             selectedMedication:ProductEntry,\r\n             show :'detail'\r\n         }\r\n       await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n        //console.log(state)\r\n       // ProductEntry.show=!ProductEntry.show\r\n     \r\n     }\r\n \r\n     const handleCreateNew = async()=>{\r\n         const    newProductEntryModule={\r\n             selectedDispense:{},\r\n             show :'create'\r\n             }\r\n        await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n        //console.log(state)\r\n         \r\n \r\n     }\r\n   \r\n \r\n     const handleSearch=(val)=>{\r\n        const field='name'\r\n        //console.log(val)\r\n        OrderServ.find({query: {\r\n                 order: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 order_status: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 order_status:\"Billed\",  \r\n                 clientId:selectedClient,\r\n                 order_category:\"Prescription\",\r\n                // storeId:state.StoreModule.selectedStore._id,\r\n                //facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n                // console.log(res)\r\n                setClientOrders(res.data)\r\n                 setMessage(\" ProductEntry  fetched successfully\")\r\n                 setSuccess(true) \r\n             })\r\n             .catch((err)=>{\r\n                // console.log(err)\r\n                 setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                 setError(true)\r\n             })\r\n         }\r\n     const getFacilities= async()=>{\r\n        \r\n             // console.log(\"here b4 server\")\r\n     const findProductEntry= await OrderServ.find(\r\n             {query: {\r\n                 order_category:\"Prescription\",\r\n                 fulfilled:false,\r\n                 destination: user.currentEmployee.facilityDetail._id,\r\n                 order_status:\"Billed\",  \r\n                 clientId:selectedClient,//selectedClient, //\r\n                 // need to set this finally\r\n                 //storeId:state.StoreModule.selectedStore._id,\r\n                 //clientId:state.ClientModule.selectedClient._id,\r\n                 $limit:50,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                 }\r\n                 }})\r\n \r\n             console.log(\"clientorders\", findProductEntry)\r\n             await setClientOrders(findProductEntry.data)\r\n             //await setState((prevstate)=>({...prevstate, currentClients:findProductEntry.groupedOrder}))\r\n             }   \r\n \r\n     //1.consider using props for global data\r\n     useEffect(() => {\r\n         // console.log(\"started\")\r\n             getFacilities()\r\n             OrderServ.on('created', (obj)=>getFacilities())\r\n             OrderServ.on('updated', (obj)=>getFacilities())\r\n             OrderServ.on('patched', (obj)=>getFacilities())\r\n             OrderServ.on('removed', (obj)=>getFacilities())\r\n             return () => {\r\n             \r\n             }\r\n             },[])\r\n \r\n         const handleRow= async(ProductEntry)=>{\r\n     \r\n         await setSelectedDispense(ProductEntry)\r\n \r\n         const    newProductEntryModule={\r\n             selectedDispense:ProductEntry,\r\n             show :'detail'\r\n         }\r\n         await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n         //console.log(state)\r\n         \r\n         }\r\n \r\n \r\n     return(     \r\n             <>  \r\n                 {/* <div className=\"level\">\r\n                     <div className=\"level-left\">\r\n                         <div className=\"level-item\">\r\n                             <div className=\"field\">\r\n                                 <p className=\"control has-icons-left  \">\r\n                                     <DebounceInput className=\"input is-small \" \r\n                                         type=\"text\" placeholder=\"Search Medications\"\r\n                                         minLength={3}\r\n                                         debounceTimeout={400}\r\n                                         onChange={(e)=>handleSearch(e.target.value)} />\r\n                                     <span className=\"icon is-small is-left\">\r\n                                         <i className=\"fas fa-search\"></i>\r\n                                     </span>\r\n                                 </p>\r\n                             </div>\r\n                         </div>\r\n                     </div> */}\r\n                     {/* <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Billed Prescriptions </span></div> */}\r\n                      {/* <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                             <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                         </div> \r\n                     </div>*/}\r\n \r\n                 {/* </div> */}\r\n                 <div className=\" pullupx \">\r\n                     <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                     <Accordion allowZeroExpanded>\r\n                         \r\n                             <AccordionItem  >\r\n                                <AccordionItemHeading >\r\n                                <AccordionItemButton  >\r\n                                       {/*  {i+1}  {Clinic.clientname} with  */ } {clientOrders.length} billed medication(s)  \r\n                                 </AccordionItemButton>\r\n                                 </AccordionItemHeading>\r\n                                 <AccordionItemPanel>\r\n                                     <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable mr-2\">\r\n                                             <thead>\r\n                                                 <tr>\r\n                                                     <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                                     <th><abbr title=\"Date\">Date</abbr></th>\r\n                                                     <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                                     <th>Fulfilled</th>\r\n                                                     <th><abbr title=\"Status\">Status</abbr></th>\r\n                                                     <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                                 </tr>\r\n                                             </thead>\r\n                                             <tbody>\r\n                                             { clientOrders.map((order, i)=>(\r\n \r\n                                                         <tr key={order._id} /* onClick={()=>handleMedicationRow(order)} */ className={order._id===(selectedMedication?._id||null)?\"is-selected\":\"\"}>                                         \r\n                                                         <th>{i+1}</th>\r\n                                                         <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                                         <th>{order.order}</th>\r\n                                                         <td>{order.fulfilled===\"True\"?\"Yes\":\"No\"}</td>\r\n                                                         <td>{order.order_status}</td>\r\n                                                         <td>{order.requestingdoctor_Name}</td>\r\n                                                         </tr>\r\n                                                 ))}\r\n                                             </tbody>\r\n                                             </table>\r\n \r\n                               </AccordionItemPanel>                                          \r\n                                 </AccordionItem>\r\n                           \r\n                             {/* <!-- Add Ref to Load More div --> */}\r\n                             {/*  <div className=\"loading\" ref={loader}>\r\n                                     <h2>Load More</h2>\r\n                         </div> */}\r\n                         </Accordion>\r\n                     </div>                   \r\n                 </div>  \r\n             </>          \r\n     )\r\n     }\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillDispenseCreate.js",["418","419","420","421","422","423","424","425","426"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\EncounterMain.js",["427","428","429","430","431","432","433","434"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {DocumentClassList} from './DocumentClass'\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\nimport  VideoConference  from '../utils/VideoConference';\r\nimport  Prescription, { PrescriptionCreate } from './Prescription';\r\n\r\nexport default function EncounterMain({nopresc}) {\r\n // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ClinicServ=client.service('clinicaldocument')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedClinic, setSelectedClinic]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n    const [showModal,setShowModal]=useState(false)\r\n    const [showPrescriptionModal,setShowPrescriptionModal]=useState(false)\r\n    // tracking on which page we currently are\r\n    const [page, setPage] = useState(0);\r\n    // add loader refrence \r\n    const loader = useRef(null);\r\n    \r\n    const standalone=false\r\n    \r\n\r\n    const handleNewDocument= async()=>{\r\n        await setShowModal(true)                                                                                                                                                        \r\n        console.log( showModal)\r\n    }\r\n    const handleNewPrescription= async()=>{\r\n        await setShowPrescriptionModal(true)                                                                                                                                                        \r\n        console.log( showPrescriptionModal)\r\n    }\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Clinic)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Clinic)\r\n\r\n        await setSelectedClinic(Clinic)\r\n\r\n        const    newClinicModule={\r\n            selectedClinic:Clinic,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n       Clinic.show=!Clinic.show\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='documentname'\r\n       console.log(val)\r\n       ClinicServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n              // facility:user.currentEmployee.facilityDetail._id || \"\",\r\n               // locationType:\"Clinic\",\r\n               client:state.ClientModule.selectedClient._id,\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Clinic  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Clinic, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n    const getFacilities= async(page=0)=>{\r\n            /* const limit=20\r\n            alert(page) */\r\n            if (user.currentEmployee){\r\n            \r\n        const findClinic= await ClinicServ.find(\r\n                {query: {\r\n                    //locationType:\"Clinic\",\r\n                    //facility:user.currentEmployee.facilityDetail._id,\r\n                    client:state.ClientModule.selectedClient._id,\r\n                    $limit:20,\r\n                   /*  $skip:page*limit, */\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n            const total= findClinic.total\r\n            const ulimit=total*page\r\n           /*  if (total>(ulimit)){ //only load if we have not reached the total\r\n                alert(\"skip:\",ulimit )\r\n                console.log(\"skip:\",ulimit ) */\r\n            await setFacilities(findClinic.data)\r\n            console.log(findClinic.data)\r\n           /*  } */\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findClinic= await ClinicServ.find(\r\n                            {query: {\r\n                                client:state.ClientModule.selectedClient._id,\r\n                                    $limit:20,\r\n                                    $sort: {\r\n                                        createdAt: -1\r\n                                    }\r\n                                }})\r\n            \r\n                    await setFacilities(findClinic.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Clinic  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Clinic, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n           /*  useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                if (user){\r\n                    \r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ClinicServ.on('created', (obj)=>getFacilities(page))\r\n                ClinicServ.on('updated', (obj)=>getFacilities(page))\r\n                ClinicServ.on('patched', (obj)=>getFacilities(page))\r\n                ClinicServ.on('removed', (obj)=>getFacilities(page))\r\n\r\n                /* var options = {\r\n                    root: null,\r\n                    rootMargin: \"20px\",\r\n                    threshold: 1.0\r\n                 }; */\r\n                // initialize IntersectionObserver\r\n                // and attaching to Load More div\r\n                /*  const observer = new IntersectionObserver(handleObserver, options);\r\n                 if (loader.current) {\r\n                    observer.observe(loader.current)\r\n                 } */\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n           /*  useEffect(() => {\r\n                // here we simulate adding new posts to List\r\n                getFacilities()\r\n            }, [page]) */\r\n\r\n             // here we handle what happens when user scrolls to Load More div\r\n            // in this case we just update page variable\r\n                /* const handleObserver = (entities) => {\r\n                    const target = entities[0];\r\n                    if (target.isIntersecting) {   \r\n                        setPage((page) => page + 1) //load more \r\n                        \r\n                    }\r\n                } */\r\n\r\n    return (\r\n        <div>\r\n            <VideoConference/>\r\n            <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search documentation\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                   {/*  <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Clinics</span></div> */}\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\">\r\n                           {!nopresc && <div className=\"button is-danger is-small mr-2\" onClick={handleNewPrescription}>Presciption</div>}\r\n                                <div className=\"button is-success is-small\" onClick={handleNewDocument}>New Document</div>\r\n                                </div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                \r\n                <div className=\" pullup \">\r\n                                <div className=\" is-fullwidth vscrollable pr-1\">\r\n                                   \r\n                                        {facilities.map((Clinic, i)=>(\r\n\r\n                                            <div key={Clinic._id}  onClick={()=>handleRow(Clinic)}   className={Clinic._id===(selectedClinic?._id||null)?\"is-selected\":\"\"}>\r\n                                               <div className=\"card mt-1 hovercard\">\r\n                                                    <header className=\"card-header\" onClick={(Clinic)=>Clinic.show=!Clinic.show}>\r\n                                                        <div className=\"card-header-title\">\r\n                                                        <div className=\"docdate\">{formatDistanceToNowStrict(new Date(Clinic.createdAt),{addSuffix: true})} <br/><span>{format(new Date(Clinic.createdAt),'dd-MM-yy')}</span></div> {Clinic.documentname} by {Clinic.createdByname} at {Clinic.location},{Clinic.facilityname} \r\n                                                        <p className=\"right ml-2 mr-0\">{Clinic.status} </p> \r\n                                                        </div>\r\n                                                       {/*  <button className=\"card-header-icon\" aria-label=\"more options\">\r\n                                                        <span className=\"icon\">\r\n                                                            <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                                        </span>\r\n                                                        </button> */}\r\n                                                    </header>\r\n                                                  {Clinic.documentname!==\"Prescription\" &&  <div className={Clinic.show?\"card-content p-1\":\"card-content p-1 is-hidden\"}>\r\n                                                        { Object.entries(Clinic.documentdetail).map(([keys,value],i)=>(\r\n                                                            <div className=\"field is-horizontal\"> \r\n                                                                    <div className=\"field-label\"> \r\n                                                                        <label className=\"label is-size-7\" key={i}>\r\n                                                                            {keys}:\r\n                                                                            </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"field-body\"> \r\n                                                                        <div className=\"field\" >\r\n                                                                            {value}   \r\n                                                                        </div>  \r\n                                                                    </div>                                                 \r\n                                                            </div>\r\n                                                            ))\r\n                                                        }\r\n                                                </div>}\r\n                                                {Clinic.documentname===\"Prescription\" &&  \r\n                                                <div className={Clinic.show?\"card-content p-1\":\"card-content p-1 is-hidden\"}>\r\n                                                        \r\n                                                        {(Clinic.documentdetail.length>0) && <div>\r\n                                                            <label>Medications:</label>\r\n                                                        <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable mr-2\">\r\n                                                                <thead>\r\n                                                                    <tr>\r\n                                                                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                                                \r\n                                                                    <th><abbr title=\"Type\">Medication</abbr></th>\r\n                                                                    <th><abbr title=\"Destination\">Destination</abbr></th>\r\n                                                                    </tr>\r\n                                                                </thead>\r\n                                                                <tfoot>\r\n                                                                    \r\n                                                                </tfoot>\r\n                                                                <tbody>\r\n                                                                { Clinic.documentdetail.map((ProductEntry, i)=>(\r\n\r\n                                                                        <tr key={i}>\r\n                                                                        <th>{i+1}</th>\r\n                                                                        {/* <td>{ProductEntry.name}</td> */}\r\n                                                                        <td>{ProductEntry.medication}<br/>\r\n                                                                        <span className=\"help is-size-7\">{ProductEntry.instruction}</span></td> \r\n                                                                        <td>{ProductEntry.destination}</td>                                                                     \r\n                                                                        </tr>\r\n\r\n                                                                    ))}\r\n                                                                </tbody>\r\n                                                                </table>\r\n                                                                </div>}                                                   \r\n                                                            </div>}\r\n                                                    </div>                                           \r\n                                            </div>\r\n\r\n                                        ))}\r\n                                      {/* <!-- Add Ref to Load More div --> */}\r\n                                       {/*  <div className=\"loading\" ref={loader}>\r\n                                                <h2>Load More</h2>\r\n                                    </div> */}\r\n                                </div>\r\n                                    \r\n                </div> \r\n                <div className={`modal  ${showModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card \">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Document Class</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        <DocumentClassList standalone=\"true\" />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>\r\n                                <div className={`modal ${showPrescriptionModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card larger\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Prescription</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowPrescriptionModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body card-overflow\">\r\n                                        <Prescription standalone=\"true\" />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>                            \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\helpers\\FacilityPopup.js",["435","436"],"import React, {useState,useContext, useEffect} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\n\r\nexport function Facility() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedFacility,setSelectedFacility]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    //console.log(\"facility parent\", state)\r\n    \r\n\r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Facility  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n              {/*   <FacilityList /> */}\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n               {/*  {(state.facilityModule.show ==='create')&&<FacilityCreate />}\r\n                {(state.facilityModule.show ==='detail')&&<FacilityDetail  />}\r\n                {(state.facilityModule.show ==='modify')&&<FacilityModify facility={selectedFacility} />} */}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function FacilityCreate(){\r\n    const { register, handleSubmit} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n\r\n    \r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n                setMessage(\"Created facility successfully\")\r\n                setSuccess(true)\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n        <section className= \"section remPadTop\">\r\n        <div className=\"columns \">\r\n        <div /* className=\"column is-4 \" */>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Facility\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        </section>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport default function FacilityPopup({facilityType,closeModal}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const facilityServ=client.service('facility')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedFacility, setSelectedFacility]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n\r\n   \r\n\r\n  /*   const handleCreateNew = async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    } */\r\n    const handleRow= async(facility)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",facility)\r\n\r\n        await setSelectedFacility(facility)\r\n\r\n        const    newfacilityModule={\r\n            selectedDestination:facility,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DestinationModule:newfacilityModule}))\r\n       //console.log(state)\r\n       closeModal()\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='facilityName'\r\n       console.log(val)\r\n       facilityServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                facilityType,\r\n                $limit:10,\r\n                $sort: {\r\n                    facilityName: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" facility  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n\r\n           /*  if (val.length>2){\r\n                console.log(\"in\")\r\n               \r\n            }\r\n\r\n        }\r\n     */\r\n        const getFacilities=()=>{\r\n            facilityServ.find({query: {\r\n                facilityType,\r\n                $limit:20,\r\n                $sort: {\r\n                    facilityName: 1\r\n                  }\r\n                    }})\r\n            .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" facility  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                    setError(true)\r\n                })\r\n\r\n        }\r\n\r\n    useEffect(() => {\r\n        getFacilities()\r\n\r\n        facilityServ.on('created', (obj)=>getFacilities())\r\n        facilityServ.on('updated', (obj)=>getFacilities())\r\n        facilityServ.on('patched', (obj)=>getFacilities())\r\n        facilityServ.on('removed', (obj)=>getFacilities())\r\n        return () => {\r\n           \r\n        }\r\n    },[])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n            <>  \r\n            <section className= \"section remPadTop\">\r\n            <div /* className=\"columns \" */>\r\n            <div /* className=\"column is-4 \" */>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Facilities </span></div>\r\n                    {/* <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div> */}\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"S/No\">S/No</abbr></th>\r\n                                        <th>Facility Name</th>\r\n                                        <th><abbr title=\"Address\"> Address</abbr></th>\r\n                                        <th><abbr title=\"City\">City</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th><abbr title=\"Category\">Category</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((facility, i)=>(\r\n\r\n                                            <tr key={facility._id} onClick={()=>handleRow(facility)} className={facility._id===(selectedFacility?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{facility.facilityName}</th>\r\n                                            <td>{facility.facilityAddress}</td>\r\n                                            <td>{facility.facilityCity}</td>\r\n                                            <td>{facility.facilityContactPhone}</td>\r\n                                            <td>{facility.facilityEmail}</td>\r\n                                            <td>{facility.facilityType}</td>\r\n                                            <td>{facility.facilityCategory}</td>\r\n                                           \r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div> \r\n                </div> \r\n                </div> \r\n                </section>              \r\n            </>\r\n              \r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillPrescriptionCreate.js",["437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\nimport Encounter from '../EncounterMgt/Encounter';\r\nvar random = require('random-string-generator');\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\nexport default function BillPrescriptionCreate(){\r\n    // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n     //const [error, setError] =useState(false)\r\n     const [success, setSuccess] =useState(false)\r\n     const [message,setMessage] = useState(\"\")\r\n     // eslint-disable-next-line\r\n     const [facility,setFacility] = useState()\r\n     const ProductEntryServ=client.service('productentry')\r\n     const OrderServ=client.service('order')\r\n     //const history = useHistory()\r\n     const {user} = useContext(UserContext) //,setUser\r\n     // eslint-disable-next-line\r\n     const [currentUser,setCurrentUser] = useState()\r\n     const [type,setType] = useState(\"Bill\")\r\n     const [documentNo,setDocumentNo] = useState(\"\")\r\n     const [totalamount,setTotalamount] = useState(0)\r\n     const [qamount,setQAmount] = useState(null)\r\n     const [productId,setProductId] = useState(\"\")\r\n     const [source,setSource] = useState(\"\")\r\n     const [date,setDate] = useState(\"\")\r\n     const [name,setName] = useState(\"\")\r\n     const [inventoryId,setInventoryId] = useState(\"\")\r\n     const [baseunit,setBaseunit] = useState(\"\")\r\n     const [quantity,setQuantity] = useState(\"\")\r\n     const [sellingprice,setSellingPrice] = useState(\"\")\r\n     const [costprice,setCostprice] = useState(0)\r\n     const [invquantity,setInvQuantity] = useState(\"\")\r\n     const [calcamount,setCalcAmount] = useState(0)\r\n     const [productItem,setProductItem] = useState([])\r\n      const [billingId,setBilllingId]=useState(\"\")  \r\n      const [changeAmount, setChangeAmount] = useState(true)\r\n      const [paymentmode, setPaymentMode] = useState(\"\")\r\n      const [paymentOptions, setPaymentOptions]=useState([])\r\n      const [billMode, setBillMode]=useState(\"\")\r\n      const [productModal, setProductModal]=useState(false)\r\n      const [obj, setObj]=useState(\"\")\r\n     \r\n     const {state,setState}=useContext(ObjectContext)\r\n     const inputEl = useRef(0);\r\n     let calcamount1\r\n     let hidestatus\r\n  \r\n\r\n    \r\n  let medication =state.medicationModule.selectedMedication\r\n\r\n\r\n  const showDocumentation = async (value)=>{\r\n    setProductModal(true)\r\n  }\r\n  const handlecloseModal =()=>{\r\n    setProductModal(false)\r\n   // handleSearch(val)\r\n    }\r\n\r\n\r\n    const handleChangeMode= async(value)=>{\r\n        console.log(value)\r\n       await setPaymentMode(value)\r\n        console.log(paymentOptions)\r\n       let billm= paymentOptions.filter(el=>el.name===value)\r\n       await setBillMode(billm)\r\n        console.log(billm)\r\n        // at startup\r\n        // check payment mode options from patient financial info\r\n        // load that to select options\r\n        // default to HMO-->company-->family-->cash\r\n        //when chosen\r\n        //append payment mode to order\r\n        //check service contract for pricing info\r\n        // calculate pricing \r\n        // pricing\r\n\r\n\r\n    }\r\n\r\n    const handleRow= async(ProductEntry)=>{\r\n    //console.log(\"b4\",state)\r\n\r\n    //console.log(\"handlerow\",ProductEntry)\r\n\r\n    //await setMedication(ProductEntry)\r\n\r\n    const    newProductEntryModule={\r\n        selectedMedication:ProductEntry,\r\n        show :'detail'\r\n    }\r\n  await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n   //console.log(state)\r\n  // ProductEntry.show=!ProductEntry.show\r\n\r\n        } \r\n \r\n     const [productEntry,setProductEntry]=useState({\r\n         productitems:[],\r\n         date,\r\n         documentNo,\r\n         type,\r\n         totalamount,\r\n         source,\r\n \r\n     })\r\n  \r\n     const productItemI={\r\n         productId,\r\n         name,\r\n         quantity,\r\n         sellingprice,\r\n         amount:calcamount, //||qamount\r\n         baseunit,\r\n         costprice,\r\n         billingId\r\n \r\n     }\r\n     // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n     //consider baseunoit conversions\r\n     const getSearchfacility=async (obj)=>{\r\n       await setObj(obj)\r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setProductId(\"\")\r\n            setName(\"\")\r\n            setBaseunit(\"\")\r\n            setInventoryId(\"\")\r\n            setSellingPrice(\"\")\r\n            setInvQuantity(\"\")\r\n            setQAmount(null)\r\n            setCostprice(\"\")\r\n           // setCalcAmount(null)\r\n            return\r\n        }\r\n \r\n         setProductId(obj.productId)\r\n         setName(obj.name)\r\n         setBaseunit(obj.baseunit)\r\n         setInventoryId(obj.inventoryId)\r\n         setSellingPrice(obj.sellingprice) //modify this based on billing mode\r\n         setInvQuantity(obj.quantity)\r\n         setCostprice(obj.costprice)\r\n         setBilllingId(obj.billingId)\r\n\r\n         const contracts=obj.billingDetails.contracts\r\n         //const billingserv=client.service('billing')\r\n        if( billMode.type===\"HMO Cover\"){ //paymentmode\r\n         let contract=contracts.filter(el=>el.source_org===billMode.detail.hmo)\r\n         if (contract.length){\r\n            console.log(contract[0].price)\r\n            setSellingPrice(contract[0].price)\r\n            console.log(sellingprice)\r\n         }else{\r\n            toast({\r\n                message: 'Please HMO does not have cover/price for this drug. Either set drug price for HMO or try another drug or bill using cash',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n              setSellingPrice(0)\r\n         }\r\n        \r\n        \r\n        }\r\n        if( billMode.type===\"Company Cover\"){ //paymentmode\r\n            let contract=contracts.filter(el=>el.source_org===billMode.detail.company)\r\n            if (contract.length){\r\n            console.log(contract[0].price)\r\n            setSellingPrice(contract[0].price)\r\n            console.log(sellingprice)\r\n           \r\n           }else{\r\n\r\n            toast({\r\n                message: 'Please company does not have cover/price for this drug. Either set drug price for Company or try another drug or bill using cash',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n              setSellingPrice(0)   \r\n         }\r\n          \r\n        /*  setValue(\"facility\", obj._id,  {\r\n             shouldValidate: true,\r\n             shouldDirty: true\r\n         }) */\r\n     }\r\n    }\r\n     useEffect(() => {\r\n       /*  console.log(obj)\r\n        console.log(billMode)\r\n        if( paymentmode!==\"Cash\" && obj){\r\n            const contracts=obj.billingDetails.contracts\r\n            let contract=contracts.filter(el=>el.source_org===billMode.detail.hmo)\r\n           console.log(contract[0].price)\r\n           setSellingPrice(contract[0].price)\r\n           console.log(sellingprice)\r\n       }\r\n         return () => {\r\n            \r\n         } */\r\n     }, [obj])\r\n\r\n     useEffect(() => {\r\n         setCurrentUser(user)\r\n         //console.log(currentUser)\r\n         return () => {\r\n         \r\n         }\r\n     }, [user])\r\n \r\n     const handleUpdateTotal=async ()=>{\r\n        await setTotalamount(prevtotal=>Number(prevtotal) + Number(calcamount))\r\n     }\r\n \r\n     const handleChangeType=async (e)=>{\r\n         console.log(e.target.value)\r\n         await setType(e.target.value)\r\n     }\r\n \r\n     const handleAmount= async()=>{\r\n         await setQAmount(null)\r\n        // alert(\"Iam chaning qamount\")\r\n     }\r\n\r\n     const handleClickProd=async()=>{\r\n       /*   console.log(\"amount: \",productItemI.amount)\r\n         console.log(\"qamount: \",qamount)\r\n         console.log(\"calcamount: \",calcamount) */\r\n        if ( quantity===0||quantity===\"\"|| productId===\"\"){\r\n            toast({\r\n                message: 'You need to choose a product and quantity to proceed',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return \r\n        }\r\n\r\n         await setSuccess(false)\r\n         await setProductItem(\r\n             prevProd=>prevProd.concat(productItemI)\r\n         )\r\n        handleUpdateTotal()\r\n            // generate billing info\r\n            const billInfo={\r\n                orderInfo:{\r\n                    orderId:medication._id,\r\n                    orderObj:medication,\r\n                  },\r\n                  serviceInfo:{            \r\n                    price: productItemI.sellingprice,\r\n                    quantity: productItemI.quantity,\r\n                    productId: productItemI.productId,\r\n                    name: productItemI.name,\r\n                    baseunit: productItemI.baseunit,\r\n                    amount:productItemI.amount,\r\n                    billingId:productItemI.billingId,\r\n                    createdby:user._id,\r\n                  },\r\n                  paymentInfo:{\r\n                    amountDue:productItemI.amount,\r\n                    paidup:0,\r\n                    balance:productItemI.amount,\r\n                    paymentDetails:[]\r\n              \r\n                  },\r\n                  participantInfo:{\r\n                    billingFacility:medication.destination,\r\n                    billingFacilityName:medication.destination_name,\r\n                    locationId:state.StoreModule.selectedStore._id, //selected location,\r\n                    clientId:medication.clientId,\r\n                    client:medication.client,\r\n                    paymentmode:billMode\r\n                  },\r\n                  createdBy:user.id,\r\n                  billing_status:\"Unpaid\"\r\n                }\r\n\r\n        //update order\r\n        \r\n        OrderServ.patch(medication._id,{\r\n            order_status:\"Billed\", //Billed\r\n            billInfo,\r\n        }).then((resp)=>{\r\n           // medication=resp\r\n           // console.log(resp)\r\n             handleRow(resp) \r\n            //update dispense\r\n\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n        \r\n        //update status(billed) + action()\r\n        //?attached chosen product to medication\r\n        //dispense helper?\r\n         setName(\"\")\r\n         setBaseunit(\"\")\r\n         setQuantity(\"\")\r\n         setInventoryId(\"\")\r\n         setSellingPrice(\"\")\r\n         setInvQuantity(\"\")\r\n             handleAmount()\r\n        // setCalcAmount(null)\r\n        await setSuccess(true)\r\n        /* console.log(success)\r\n        console.log(qamount)\r\n        console.log(productItem) */\r\n        setChangeAmount(true)\r\n     }\r\n   //check user for facility or get list of facility  \r\n    /*  useEffect(()=>{\r\n         //setFacility(user.activeProductEntry.FacilityId)//\r\n       if (!user.stacker){\r\n           console.log(currentUser)\r\n            /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n             shouldValidate: true,\r\n             shouldDirty: true\r\n         })  \r\n \r\n       }\r\n     }) */\r\n \r\n     const handleQtty=async(e)=>{\r\n         if (invquantity<e.target.value){\r\n             toast({\r\n                 message: 'You can not sell more quantity than exist in inventory ' ,\r\n                 type: 'is-danger',\r\n                 dismissible: true,\r\n                 pauseOnHover: true,\r\n               })\r\n             return\r\n         }\r\n         setQuantity(e.target.value)\r\n         calcamount1=quantity*sellingprice\r\n         await setCalcAmount(calcamount1)\r\n         console.log(calcamount)\r\n     }\r\n \r\n     useEffect( () => {\r\n          setProductEntry({\r\n             \r\n             date,\r\n             documentNo,\r\n             type,\r\n             totalamount,\r\n             source,\r\n         })\r\n        setCalcAmount(quantity*sellingprice) \r\n         return () => {\r\n             \r\n         }\r\n     },[date])\r\n \r\n     const resetform=()=>{\r\n      setType(\"Sales\")\r\n     setDocumentNo(\"\")\r\n     setTotalamount(\"\")\r\n     setProductId(\"\")\r\n     setSource(\"\")\r\n     setDate(\"\")\r\n     setName(\"\")\r\n     setBaseunit()\r\n     setCostprice()\r\n     setProductItem([])\r\n     }\r\n\r\n\r\n     const handleMedicationDone= async()=>{ //handle selected single order\r\n        //console.log(\"b4\",state)\r\n    \r\n        //console.log(\"handlerow\",ProductEntry)\r\n    \r\n       // await setSelectedMedication(\"\")\r\n    \r\n        const    newProductEntryModule={\r\n            selectedMedication:{},\r\n            show :'create'\r\n        }\r\n      await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n       //console.log(state)\r\n      // ProductEntry.show=!ProductEntry.show\r\n    \r\n    }\r\n \r\n     const onSubmit = async(e) =>{\r\n         e.preventDefault();\r\n         setMessage(\"\")\r\n         //setError(false)\r\n         setSuccess(false)\r\n         await setProductEntry({\r\n             \r\n             date,\r\n             documentNo,\r\n             type,\r\n             totalamount,\r\n             source,\r\n         })\r\n         productEntry.productitems=productItem\r\n         productEntry.createdby=user._id\r\n         productEntry.transactioncategory=\"debit\"\r\n        \r\n          // console.log(\"b4 facility\",productEntry);\r\n           if (user.currentEmployee){\r\n          productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n           }else{\r\n             toast({\r\n                 message: 'You can not remove inventory from any organization',\r\n                 type: 'is-danger',\r\n                 dismissible: true,\r\n                 pauseOnHover: true,\r\n               }) \r\n               return\r\n           }\r\n           \r\n           if (state.StoreModule.selectedStore._id){\r\n             productEntry.storeId=state.StoreModule.selectedStore._id\r\n           }else{\r\n             toast({\r\n                 message: 'You need to select a store before removing inventory',\r\n                 type: 'is-danger',\r\n                 dismissible: true,\r\n                 pauseOnHover: true,\r\n               }) \r\n               return\r\n \r\n           }\r\n           //console.log(\"b4 create\",productEntry);\r\n        // ProductEntryServ.create(productEntry)\r\n         //.then((res)=>{\r\n                 //console.log(JSON.stringify(res))\r\n           //      resetform()\r\n                /*  setMessage(\"Created ProductEntry successfully\") */\r\n             //    setSuccess(true)\r\n               //  toast({\r\n                  /*    message: 'ProductExit created succesfully',\r\n                     type: 'is-success',\r\n                     dismissible: true,\r\n                     pauseOnHover: true,\r\n                   })\r\n                   setSuccess(false)\r\n                   setProductItem([])\r\n                   const today=new Date().toLocaleString()\r\n       \r\n                   setDate(today)\r\n                   const invoiceNo=random(6,'uppernumeric')\r\n                 setDocumentNo(invoiceNo)\r\n                 setType(\"Sales\")\r\n             })\r\n             .catch((err)=>{\r\n                 toast({\r\n                     message: 'Error creating ProductExit ' + err,\r\n                     type: 'is-danger',\r\n                     dismissible: true,\r\n                     pauseOnHover: true,\r\n                   })\r\n             }) */\r\n \r\n       } \r\n \r\n    // console.log(\"i am rendering\")\r\n   /*   useEffect(() => {\r\n         setMedication(state.medicationModule.selectedMedication)\r\n        // console.log(medication)\r\n         return () => {\r\n             \r\n         }\r\n     }, [state])\r\n  */\r\n    const handleChangeAmount=()=>{\r\n        setChangeAmount((rev)=>(!rev))\r\n        \r\n    }\r\n\r\n    const newclient=async ()=>{\r\n        await  setProductItem([])\r\n    }\r\n\r\n    useEffect(() => {\r\n        const oldname=medication.clientname\r\n        console.log(\"oldname\",oldname)\r\n        setSource(medication.clientname)\r\n\r\n        const newname=source\r\n        console.log(\"newname\",newname)\r\n        if (oldname!==newname){\r\n            //newdispense\r\n        \r\n        setProductItem([])\r\n        setTotalamount(0)\r\n\r\n        }\r\n       \r\n\r\n        const paymentoptions= []\r\n        const info = medication.client.paymentinfo\r\n        let billme={}\r\n       \r\n        if( medication.client.paymentinfo.cash===true){\r\n            const details={}\r\n            details.detail=  info.cashDetails\r\n            details.type=\"Cash\"\r\n            const obj={\r\n                name:\"Cash\",\r\n                value:\"Cash\",\r\n                detail:details,\r\n                type:\"Cash\"\r\n            }\r\n            paymentoptions.push(obj)\r\n            setPaymentMode(\"Cash\")\r\n            billme=obj\r\n        }\r\n        if( medication.client.paymentinfo.familyCover===true){\r\n            const details={}\r\n            details.detail=  info.familyDetails\r\n            details.type=\"Family Cover\"\r\n            const obj={\r\n                name:\"Family Cover\",\r\n                value:\"familyCover\",\r\n                detail:details,\r\n                type:\"Family Cover\"\r\n            }\r\n            paymentoptions.push(obj)\r\n            setPaymentMode(\"Family Cover\")\r\n            billme=obj\r\n            \r\n        }\r\n        if( medication.client.paymentinfo.companyCover===true){\r\n            const details={}\r\n            details.type=\"Company Cover\"\r\n            details.detail=  info.companyDetails.filter(el=>el.active===true)\r\n            details.detail.forEach(el=>{\r\n                const obj={\r\n                    name:\"Company: \" +el.companyName +\"(\"+el.companyPlan+\")\",\r\n                    value:\"companyCover\",\r\n                    detail:el,\r\n                    type:\"Company Cover\" \r\n                }\r\n                paymentoptions.push(obj)\r\n                setPaymentMode(\"Company: \" +el.companyName +\"(\"+el.companyPlan+\")\")\r\n               // console.log(\"Company: \" +el.companyName +\"(\"+el.companyPlan+\")\")\r\n               billme=obj\r\n            })\r\n        }\r\n\r\n        if( medication.client.paymentinfo.hmoCover===true){\r\n            \r\n            const details={}\r\n            details.type=\"HMO Cover\"\r\n            details.detail=  info.hmoDetails.filter(el=>el.active===true)\r\n            details.detail.forEach(el=>{\r\n                const obj={\r\n                    name:\"HMO: \" +el.hmoName +\"(\"+el.hmoPlan+\")\",\r\n                    value:\"hmoCover\",\r\n                    detail:el,\r\n                    type:\"HMO Cover\"\r\n                }\r\n                paymentoptions.push(obj)\r\n                setPaymentMode(\"HMO: \" +el.hmoName +\"(\"+el.hmoPlan+\")\")\r\n                //console.log(\"HMO: \" +el.hmoName +\"(\"+el.hmoPlan+\")\")\r\n                billme=obj\r\n            })\r\n         \r\n        }\r\n        setPaymentOptions(paymentoptions)\r\n        setBillMode(billme)\r\n       console.log(paymentoptions)\r\n        console.log(billMode)\r\n        return () => {\r\n           \r\n        }\r\n    }, [medication])\r\n\r\n     useEffect(() => {\r\n       // const medication =state.medicationModule.selectedMedication\r\n         const today=new Date().toLocaleString()\r\n         console.log(today)\r\n         setDate(today)\r\n         const invoiceNo=random(6,'uppernumeric')\r\n         setDocumentNo(invoiceNo)\r\n         return () => {\r\n             \r\n         }\r\n     }, [])\r\n\r\n     useEffect(() => {\r\n        calcamount1=quantity*sellingprice\r\n         setCalcAmount(calcamount1)\r\n         console.log(calcamount)\r\n         setChangeAmount(true)\r\n        return () => {\r\n            \r\n        }\r\n    }, [quantity])\r\n\r\n// console.log(\"simpa\")\r\n     return (\r\n         <>\r\n             <div className=\"card card-overflow\">\r\n             <div className=\"card-header\">\r\n                 <p className=\"card-header-title\">\r\n                     Bill Product\r\n                 </p>\r\n                 <button className=\"button is-success is-small btnheight mt-2\" onClick={showDocumentation}>Documentation</button>\r\n             </div>\r\n             <div className=\"card-content \">\r\n    \r\n             <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n             <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n            {/*  <div className=\"field\">    \r\n                 <div className=\"control\">\r\n                     <div className=\"select is-small\">\r\n                         <select name=\"type\" value={type} onChange={handleChangeType} className=\"selectadd\">\r\n                            <option value=\"\">Choose Type </option>\r\n                             <option value=\"Dispense\">Dispense</option>\r\n                             <option value=\"Bill\">Bill </option> */}\r\n                             {/* <option value=\"Dispense\">Dispense</option>\r\n                             <option value=\"Audit\">Audit</option> */}\r\n                 {/*         </select>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n */}\r\n             <div className=\"field\">\r\n                     <p className=\"control has-icons-left has-icons-right\">\r\n                         <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"client\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Client\" />\r\n                         <span className=\"icon is-small is-left\">\r\n                             <i className=\"fas fa-hospital\"></i>\r\n                         </span>                    \r\n                     </p>\r\n                 </div>\r\n                 <div className=\"field\">    \r\n                 <div className=\"control\">\r\n                     <div className=\"select is-small \">\r\n                         <select name=\"paymentmode\" value={paymentmode} onChange={(e)=>handleChangeMode(e.target.value)} className=\"selectadd\" >\r\n                         <option value=\"\">Billing Mode </option>\r\n                           {paymentOptions.map((option,i)=>(\r\n                               <option key={i} value={option.details}> {option.name}</option>\r\n                           ))}\r\n                           \r\n                            \r\n                            {/*  <option value=\"Cash\">Cash</option>\r\n                             <option value=\"Family\">Family </option>\r\n                            <option value=\"Company Cover\">Company Cover</option>\r\n                             <option value=\"HMO\">HMO</option> */}\r\n                         </select>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n            \r\n             </div>\r\n             </div> {/* horizontal end */}\r\n            {/*  <div className=\"field\">\r\n                 <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                     <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\" fas fa-user-md \"></i>\r\n                     </span>\r\n                 </p>\r\n             </div> */}\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                 <p className=\"control has-icons-left has-icons-right\">\r\n                     <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                     <span className=\"icon is-small is-left\">\r\n                         <i className=\"fas fa-map-signs\"></i>\r\n                     </span>\r\n                 </p>\r\n             </div>\r\n             <div className=\"field\">\r\n                 <p className=\"control has-icons-left\">\r\n                     <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-phone-alt\"></i>\r\n                     </span>\r\n                 </p>\r\n             </div>\r\n             <div className=\"field\">\r\n                 <p className=\"control has-icons-left\">\r\n                     <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={e=>setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-coins\"></i>\r\n                     </span>\r\n                 </p>\r\n             </div>\r\n \r\n                 </div> \r\n                 </div> \r\n                \r\n                 </form>   \r\n                \r\n            \r\n          {/* array of ProductEntry items */}\r\n         \r\n         <label className=\"label is-small\">Medication:</label>\r\n         <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n             <div className=\"field\" style={{width:\"40%\"}}>\r\n                 <p className=\"control has-icons-left\" >\r\n                     <input className=\"input is-small\"  /* ref={register({ required: true })} */ disabled  name=\"order\" value={medication.order} type=\"text\" onChange={ e=> handleQtty(e)} placeholder=\"Quantity\"  />\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-hashtag\"></i>\r\n                     </span>\r\n                     <span className=\"helper is-size-7\"><strong>Instruction: </strong>{medication.instruction}</span>\r\n                    \r\n                 </p>\r\n                 <span className=\"helper is-size-7\"><strong>Billing Status: </strong>{medication.order_status}</span>\r\n             </div> \r\n            \r\n             </div>\r\n             </div>\r\n             <label className=\"label is-small\">Choose Product Item:</label>\r\n          <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n             <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                     <InventorySearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                     <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                         <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                         <span className=\"icon is-small is-left\">\r\n                         <i className=\"fas  fa-map-marker-alt\"></i>\r\n                         </span>\r\n                     </p>\r\n                  {sellingprice &&   \"N\"}{sellingprice} {sellingprice &&   \"per\"}  {baseunit} {invquantity} {sellingprice &&   \"remaining\"} \r\n                 </div>\r\n             </div>\r\n         </div>\r\n         <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\" >\r\n                 <div className=\"field\" style={{width:\"40%\"}}>\r\n                 <p className=\"control has-icons-left\" >\r\n                     <input className=\"input is-small\"  /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={ e=> handleQtty(e)} placeholder=\"Quantity\"  />\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-hashtag\"></i>\r\n                     </span>\r\n                    \r\n                 </p>\r\n         <label >{baseunit}</label>\r\n             </div> \r\n             <div className=\"field\">\r\n             <label>Amount:</label>{/* <p>{quantity*sellingprice}</p> */}\r\n             </div>\r\n             <div className=\"field\" style={{width:\"40%\"}}>\r\n                 <p className=\"control has-icons-left \" /* style={{display:\"none\"}} */>\r\n                     <input className=\"input is-small\"  name=\"qamount\" disabled={changeAmount} value={calcamount} type=\"text\"  onChange={async e=> await setCalcAmount(e.target.value)}  placeholder=\"Amount\"  />\r\n                     <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-dollar-sign\"></i>\r\n                     </span>\r\n                 </p>\r\n                 <button className=\"button is-small is-success btnheight\" onClick={handleChangeAmount}>Adjust</button>\r\n \r\n             </div> \r\n             <div className=\"field\">\r\n             <p className=\"control\">\r\n                     <button className=\"button is-info is-small  is-pulled-right\">\r\n                       <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                     </button>\r\n                 </p>\r\n             </div>\r\n             </div>\r\n          </div>\r\n             \r\n        {(productItem.length>0) && <div>\r\n             <label>Product Items:</label>\r\n          <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                 <thead>\r\n                     <tr>\r\n                     <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                     <th><abbr title=\"Type\">Name</abbr></th>\r\n                     <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                     <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                     <th><abbr title=\"Cost Price\">Selling Price</abbr></th>\r\n                     <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                     <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                     </tr>\r\n                 </thead>\r\n                 <tfoot>\r\n                     \r\n                 </tfoot>\r\n                 <tbody>\r\n                    { productItem.map((ProductEntry, i)=>(\r\n                          <tr key={i}>\r\n                         <th>{i+1}</th>\r\n                         <td>{ProductEntry.name}</td>\r\n                         <th>{ProductEntry.quantity}</th>\r\n                         <td>{ProductEntry.baseunit}</td>\r\n                         <td>{ProductEntry.sellingprice}</td>\r\n                         <td>{ProductEntry.amount}</td>\r\n                         <td><span className=\"showAction\"  >x</span></td>\r\n                         </tr>\r\n                     ))}\r\n                 </tbody>\r\n                 </table>\r\n                 <div className=\"field mt-2 is-grouped\">\r\n                 <p className=\"control\">\r\n                     <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={handleMedicationDone}>\r\n                        Done\r\n                     </button>\r\n                 </p>\r\n                {/*  <p className=\"control\">\r\n                     <button className=\"button is-warning is-small\" disabled={!productItem.length>0} onClick={onSubmit} >\r\n                         Clear\r\n                     </button>\r\n                 </p> */}\r\n                 </div>\r\n                 </div>\r\n            \r\n             }\r\n             \r\n             \r\n             </div>\r\n             </div>\r\n             <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card  modalbkgrnd\">\r\n                                        <header className=\"modal-card-head  btnheight\">\r\n                                        <p className=\"modal-card-title\">Documentation</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body modalcolor\">\r\n                                      \r\n                                         <Encounter standalone=\"true\" />\r\n                                        </section> \r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer>  */}\r\n                                   </div>\r\n                                </div>      \r\n         </>\r\n     )\r\n    \r\n }\r\n\r\n export  function InventorySearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('inventory')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n   const {user} = useContext(UserContext) \r\n   const {state}=useContext(ObjectContext)\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n    }\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 facility: user.currentEmployee.facilityDetail._id,\r\n                 storeId: state.StoreModule.selectedStore._id,\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small  is-expanded\" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu expanded\" style={{width:\"100%\"}}>\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" /* onClick={handleAddproduct} */> <span> {val} is not in your inventory</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <div><span>{facility.name}</span></div>\r\n                                        <div><span><strong>{facility.quantity}</strong></span>\r\n                                        <span>{facility.baseunit}(s) remaining</span>\r\n                                        <span className=\"padleft\"><strong>Price:</strong> N{facility.sellingprice}</span></div>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}",["454","455"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Dispensary.js",["456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\n//import PaymentCreate from './PaymentCreate'\r\nimport PatientProfile from '../ClientMgt/PatientProfile'\r\n/* import {ProductCreate} from './Products' */\r\n// eslint-disable-next-line\r\n//const searchfacility={};\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemState,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\n\r\n// Demo styles, see 'Styles' section below for some notes on use.\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\nimport { ProductExitCreate } from './DispenseExit';\r\n//import BillPrescriptionCreate from './BillPrescriptionCreate';\r\n\r\n\r\n\r\nexport default function Dispense() {\r\n    //const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line\r\n   const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line\r\n  const [message, setMessage] = useState(\"\") \r\n   const BillServ=client.service('bills')\r\n   //const history = useHistory()\r\n  // const {user,setUser} = useContext(UserContext)\r\n   const [facilities,setFacilities]=useState([])\r\n    // eslint-disable-next-line\r\n  const [selectedOrders, setSelectedOrders]=useState([]) //\r\n   // eslint-disable-next-line\r\n   const {state,setState}=useContext(ObjectContext)\r\n   // eslint-disable-next-line\r\n   const {user,setUser}=useContext(UserContext)\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n                <div className=\"column is-6 \">\r\n                    <DispenseList />\r\n                    </div>\r\n              \r\n                <div className=\"column is-6 \">\r\n                \r\n                {(state.financeModule.show ==='detail')&& <ProductExitCreate />}\r\n                </div>\r\n               {/*  <div className=\"column is-3 \">\r\n                \r\n                {(state.financeModule.show ==='detail')&&<PatientProfile />}\r\n                </div> */}\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function DispenseList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n   const BillServ=client.service('bills')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedDispense, setSelectedDispense]=useState() //\r\n   const [selectedOrders, setSelectedOrders]=useState([]) \r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n    const [selectedFinance, setSelectedFinance] =useState(\"\")\r\n    const [expanded, setExpanded] =useState(\"\")\r\n    const [oldClient, setOldClient] =useState(\"\")\r\n\r\n    const handleSelectedClient= async(Client)=>{\r\n        // await setSelectedClient(Client)\r\n         const    newClientModule={\r\n             selectedClient:Client,\r\n             show :'detail'\r\n         }\r\n        await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n     }\r\n\r\n    const handleChoseClient= async(client,e, order)=>{\r\n        setOldClient(client.clientname)\r\n        let newClient=client.clientname\r\n        if(oldClient!==newClient){\r\n            //alert(\"New Client Onboard\")\r\n            //remove all checked clientsly\r\n            selectedOrders.forEach(el=>el.checked=\"\")\r\n            setSelectedOrders([])\r\n        }\r\n\r\n       // console.log(e.target.checked)\r\n        order.checked=e.target.checked\r\n        await handleSelectedClient(order.participantInfo.client)\r\n        //handleMedicationRow(order)\r\n        await setSelectedFinance(order)\r\n        const    newProductEntryModule={\r\n            selectedFinance:order,\r\n            show :'detail',\r\n            state:e.target.checked\r\n        }\r\n      await setState((prevstate)=>({...prevstate, financeModule:newProductEntryModule}))\r\n      if (e.target.checked){\r\n        await setSelectedOrders((prevstate)=>(prevstate.concat(order)))\r\n      }else{\r\n        setSelectedOrders( prevstate=>prevstate.filter(el=>el._id!==order._id))\r\n      }\r\n    \r\n       // console.log(selectedOrders)\r\n    }\r\n    const handleMedicationRow= async(ProductEntry,e)=>{ //handle selected single order\r\n        //console.log(\"b4\",state)\r\n        alert(\"Header touched\")\r\n    \r\n        //console.log(\"handlerow\",ProductEntry)\r\n       /* alert(ProductEntry.checked)*/\r\n       /*  ProductEntry.checked=!ProductEntry.checked */\r\n    \r\n       /*  await setSelectedFinance(ProductEntry)\r\n    \r\n        const    newProductEntryModule={\r\n            selectedFinance:ProductEntry,\r\n            show :'detail'\r\n\r\n        }\r\n      await setState((prevstate)=>({...prevstate, financeModule:newProductEntryModule})) */\r\n       //console.log(state)\r\n      // ProductEntry.show=!ProductEntry.show\r\n    \r\n    }\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n  \r\n\r\n    const handleSearch=(val)=>{\r\n       const field='name'\r\n       //console.log(val)\r\n       BillServ.find({query: {\r\n                order: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_status: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_category:\"Prescription\",\r\n               // storeId:state.StoreModule.selectedStore._id,\r\n               //facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }``\r\n                    }}).then((res)=>{\r\n               // console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n               // console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n    const getFacilities= async()=>{\r\n       \r\n            // console.log(\"here b4 server\")\r\n    const findProductEntry= await BillServ.find(\r\n            {query: {\r\n                'participantInfo.paymentmode.type':\"Cash\",\r\n                'participantInfo.billingFacility': user.currentEmployee.facilityDetail._id,\r\n                billing_status:{\r\n                    $ne: \"Unpaid\"\r\n                },\r\n               'orderInfo.orderObj.fulfilled':{\r\n                $ne:\"True\"\r\n               },\r\n                //billing_status:\"Fully Paid\",\r\n               // fulfilled:false,  \r\n                $limit:100,\r\n                $sort: {\r\n                    updatedAt: 1\r\n                }\r\n                }})\r\n\r\n            console.log(\"updatedorder\", findProductEntry.groupedOrder)\r\n            await setFacilities(findProductEntry.groupedOrder)\r\n          //  await setState((prevstate)=>({...prevstate, currentClients:findProductEntry.groupedOrder}))\r\n            }   \r\n    const handleRow= async(Client,e)=>{\r\n           // alert(expanded)\r\n              \r\n            }\r\n    //1.consider using props for global data\r\n    useEffect(() => {\r\n        // console.log(\"started\")\r\n            getFacilities()\r\n            BillServ.on('created', (obj)=>getFacilities())\r\n            BillServ.on('updated', (obj)=>getFacilities())\r\n            BillServ.on('patched', (obj)=>getFacilities())\r\n            BillServ.on('removed', (obj)=>getFacilities())\r\n            return () => {\r\n              cleanup()\r\n            \r\n            }\r\n            },[])\r\n\r\n    const cleanup =async ()=>{\r\n        const    newClientModule={\r\n            selectedClient:{},\r\n            show :'create'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n\r\n       const    newProductEntryModule={\r\n        selectedFinance:{},\r\n        show :'create',\r\n        state:\"\"\r\n    }\r\n  await setState((prevstate)=>({...prevstate, financeModule:newProductEntryModule}))\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        //changes with checked box\r\n        console.log(selectedOrders)\r\n        \r\n        return () => {\r\n            \r\n        }\r\n    }, [selectedOrders])\r\n\r\n    useEffect(() => {\r\n       if (state.financeModule.show===\"create\"){\r\n        selectedOrders.forEach(el=>el.checked=\"\")\r\n        setSelectedOrders([])\r\n\r\n       }\r\n        return () => {\r\n           \r\n        }\r\n    }, [state.financeModule.show])\r\n   \r\n \r\n\r\n    return(     \r\n            <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Medications\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Paid Prescriptions </span></div>\r\n                     {/* <div className=\"level-right\">\r\n                       <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div> \r\n                    </div>*/}\r\n\r\n                </div>\r\n                <div className=\" pullup \">\r\n                    <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                    <Accordion allowZeroExpanded >\r\n                        {facilities.map((Clinic, i)=>(\r\n                            <AccordionItem  key={Clinic.client_id}  >\r\n                               <AccordionItemHeading >\r\n                                    <AccordionItemButton  >\r\n                                   {/*  <input type = \"checkbox\" name={Clinic.client_id}  />  */} \r\n                                    <strong> {i+1} {Clinic.clientname} {/* with {Clinic.bills.length} Unpaid bills. */} {/* Grand Total amount: N */}</strong> \r\n                                    </AccordionItemButton>\r\n                                </AccordionItemHeading>\r\n                                <AccordionItemPanel>\r\n                                    <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                                        <Accordion allowZeroExpanded>\r\n                                            {Clinic.bills.map((category, i)=>(\r\n                                                <AccordionItem  key={Clinic.client_id} >\r\n                                                    <AccordionItemHeading >\r\n                                                    <AccordionItemButton  >\r\n                                                   {/*  <input type = \"checkbox\" name={Clinic.client_id} onChange={(e)=>handleMedicationRow(Clinic,e)} />   */}\r\n                                                         {category.catName} with {category.order.length} Paid bill(s). {/* Total amount: N */}\r\n                                                    </AccordionItemButton>\r\n                                                    </AccordionItemHeading>\r\n                                                    <AccordionItemPanel>\r\n                                                        <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable mr-2\">\r\n                                                                <thead>\r\n                                                                    <tr>\r\n                                                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                                                        <th><abbr title=\"Description\">Description</abbr></th>\r\n                                                                    {/*  <th>Fulfilled</th> */}\r\n                                                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                                                        <th><abbr title=\"Amount\">Amount</abbr></th>\r\n                                                                    </tr>\r\n                                                                </thead>\r\n                                                                <tbody>\r\n                                                     { category.order.map((order, i)=>(\r\n\r\n                                                        <tr key={order._id}  /*  onClick={()=>handleMedicationRow(order)} */  className={order._id===(selectedFinance?._id||null)?\"is-selected\":\"\"}>                                         \r\n                                                        <th><input type = \"checkbox\" name={order._id} onChange={(e)=>handleChoseClient(Clinic,e, order)}  checked={order.checked}/>  {i+1}</th>\r\n                                                        <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                                        <th>{order.serviceInfo.name}</th>\r\n                                                       {/*  <td>{order.fulfilled===\"True\"?\"Yes\":\"No\"}</td> */}\r\n                                                        <td>{order.billing_status}</td>\r\n                                                        <td>{order.serviceInfo.amount}</td>\r\n                                                        </tr>\r\n                                                ))}\r\n                                            </tbody>\r\n                                            </table>\r\n\r\n                                                    </AccordionItemPanel>                                          \r\n                                                </AccordionItem>\r\n                                            ))}\r\n                                        </Accordion>\r\n                                    </div>\r\n                                </AccordionItemPanel>                    \r\n                            </AccordionItem >\r\n                        ))}\r\n                    </Accordion >\r\n                    </div>  \r\n                </div>\r\n            </>          \r\n    )\r\n    }\r\n\r\n\r\nexport function DispenseDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    const [selectedMedication, setSelectedMedication] =useState(\"\")\r\n    const [currentOrder, setCurrentOrder] =useState(\"\")\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const BillServ=client.service('order')\r\n    /* const [ProductEntry, setProductEntry] = useState(\"\")\r\n    const [facilities, setFacilities] = useState(\"\") */\r\n\r\n let ProductEntry =state.DispenseModule.selectedDispense\r\n   //const facilities=ProductEntry.orders\r\n\r\n   const handleRow= async(ProductEntry)=>{\r\n    //console.log(\"b4\",state)\r\n\r\n    //console.log(\"handlerow\",ProductEntry)\r\n\r\n    await setSelectedMedication(ProductEntry)\r\n\r\n    const    newProductEntryModule={\r\n        selectedMedication:ProductEntry,\r\n        show :'detail'\r\n    }\r\n  await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n   //console.log(state)\r\n  // ProductEntry.show=!ProductEntry.show\r\n\r\n}\r\n\r\n    const handleEdit= async(ProductEntry)=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n      const client1=  state.currentClients.find(el=>{\r\n            return JSON.stringify(el.client_id)===JSON.stringify(state.DispenseModule.selectedDispense)\r\n        })\r\n\r\n    setCurrentOrder(client1)\r\n   // console.log(client1)\r\n        return () => {\r\n        \r\n        }\r\n    }, [])\r\n   \r\n\r\n /*  \r\n     const setprod=async()=>{\r\n        await setProductEntry(state.DispenseModule.selectedDispense)\r\n    } */\r\n \r\n    useEffect(() => {\r\n        /* BillServ.on('created', (obj)=>getFacilities())\r\n        BillServ.on('updated', (obj)=>getFacilities())\r\n       \r\n        BillServ.on('removed', (obj)=>getFacilities()) */\r\n        BillServ.on('patched',  (obj)=>{\r\n            //update state.DispenseModule.selectedDispense\r\n           // console.log(obj.clientId)\r\n           // console.log(\"currentClients\",state.currentClients)\r\n           const current1=state.currentClients.find(el=>(JSON.stringify(el.client_id)===JSON.stringify(obj.clientId)))\r\n           setCurrentOrder(current1)\r\n          // console.log(\"currentone\",current1)\r\n        })\r\n      \r\n        return () => {\r\n         \r\n        }\r\n    },[])\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Dispense Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* {JSON.stringify(ProductEntry.orders,2,10)} */}\r\n            <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        {/* <th><abbr title=\"Client Name\">Client Name</abbr></th> */}\r\n                                        {/* <th><abbr title=\"Number of Orders\"># of Medication</abbr></th> */}\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                        <th>Fulfilled</th>\r\n                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                        <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                        \r\n                                        {/* <th><abbr title=\"Actions\">Actions</abbr></th> */}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {state.DispenseModule.selectedDispense.orders.map((order, i)=>(\r\n\r\n                                            <tr key={order._id} onClick={()=>handleRow(order)} className={order._id===(selectedMedication?._id||null)?\"is-selected\":\"\"}>\r\n                                            \r\n                                               <th>{i+1}</th>\r\n                                                 {/* <td>{ProductEntry.clientname}</td> \r\n                                                <td>{ProductEntry.orders.length}</td> */}\r\n                                           \r\n                                           \r\n                                            <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                          <th>{order.order}</th>\r\n                                            <td>{order.fulfilled===\"True\"?\"Yes\":\"No\"}</td>\r\n                                            <td>{order.order_status}</td>\r\n                                            <td>{order.requestingdoctor_Name}</td>\r\n                                            \r\n                                           {/*  <td><span className=\"showAction\"  >...</span></td> */}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                        \r\n                </div>              \r\n               \r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js",["480","481","482","483","484","485","486","487","488","489","490","491","492"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\nvar random = require('random-string-generator');\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function ProductEntry() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ProductExitList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ProductExitModule.show ==='create')&&<ProductExitCreate />}\r\n                {(state.ProductExitModule.show ==='detail')&&<ProductExitDetail  />}\r\n                {(state.ProductExitModule.show ==='modify')&&<ProductExitModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductExitCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Sales\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(0)\r\n    const [qamount,setQAmount] = useState(null)\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [inventoryId,setInventoryId] = useState(\"\")\r\n    const [baseunit,setBaseunit] = useState(\"\")\r\n    const [quantity,setQuantity] = useState(\"\")\r\n    const [sellingprice,setSellingPrice] = useState(\"\")\r\n    const [costprice,setCostprice] = useState(0)\r\n    const [invquantity,setInvQuantity] = useState(\"\")\r\n    const [calcamount,setCalcAmount] = useState(0)\r\n    const [productItem,setProductItem] = useState([])\r\n    const [billingId,setBilllingId]=useState(\"\")  \r\n    const [changeAmount, setChangeAmount] = useState(true)\r\n    const {state}=useContext(ObjectContext)\r\n    const inputEl = useRef(0);\r\n    let calcamount1\r\n    let hidestatus\r\n\r\n    let medication =state.financeModule.selectedFinance\r\n    console.log(\"medication\", medication)\r\n\r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const productItemI={\r\n        productId,\r\n        name,\r\n        quantity,\r\n        sellingprice,\r\n        amount:calcamount, //qamount||\r\n        baseunit,\r\n        costprice,\r\n        billingId\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setProductId(obj.productId)\r\n        setName(obj.name)\r\n        setBaseunit(obj.baseunit)\r\n        setInventoryId(obj.inventoryId)\r\n        setSellingPrice(obj.sellingprice)\r\n        setInvQuantity(obj.quantity)\r\n        setCostprice(obj.costprice)\r\n        setBilllingId(obj.billingId)\r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setProductId(\"\")\r\n            setName(\"\")\r\n            setBaseunit(\"\")\r\n            setInventoryId(\"\")\r\n            setSellingPrice(\"\")\r\n            setInvQuantity(\"\")\r\n            setQAmount(null)\r\n            setCostprice(\"\")\r\n           // setCalcAmount(null)\r\n\r\n        }\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n    const handleUpdateTotal=()=>{\r\n\r\n        \r\n        setTotalamount(prevtotal=>Number(prevtotal) + Number(calcamount))\r\n    }\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n\r\n    const handleAmount= async()=>{\r\n        await setQAmount(null)\r\n       // alert(\"Iam chaning qamount\")\r\n    }\r\n    const handleClickProd=async()=>{\r\n        console.log(\"amount: \",productItemI.amount)\r\n        console.log(\"qamount: \",qamount)\r\n        console.log(\"calcamount: \",calcamount)\r\n\r\n        if ( quantity===0||quantity===\"\"|| productId===\"\"){\r\n            toast({\r\n                message: 'You need to choose a product and quantity to proceed',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return \r\n        }\r\n\r\n        await setSuccess(false)\r\n        await setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n       handleUpdateTotal()\r\n        setName(\"\")\r\n        setBaseunit(\"\")\r\n        setQuantity(\"\")\r\n        setInventoryId(\"\")\r\n        setSellingPrice(\"\")\r\n        setInvQuantity(\"\")\r\n            handleAmount()\r\n       // setCalcAmount(null)\r\n       await setSuccess(true)\r\n      /*  console.log(success)\r\n       console.log(qamount)\r\n       console.log(productItem) */\r\n       setChangeAmount(true)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const handleQtty=async(e)=>{\r\n        if (invquantity<e.target.value){\r\n            toast({\r\n                message: 'You can not sell more quantity than exist in inventory ' ,\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n            return\r\n        }\r\n        setQuantity(e.target.value)\r\n        calcamount1=quantity*sellingprice\r\n        await setCalcAmount(calcamount1)\r\n        console.log(calcamount)\r\n\r\n       \r\n\r\n    }\r\n\r\n    useEffect( () => {\r\n         setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n       setCalcAmount(quantity*sellingprice) \r\n        return () => {\r\n            \r\n        }\r\n    },[date])\r\n\r\n    const resetform=()=>{\r\n     setType(\"Sales\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setBaseunit()\r\n    setCostprice()\r\n    setProductItem([])\r\n    }\r\n\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        /* await setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        }) */\r\n        productEntry.date = date\r\n        productEntry.documentNo= documentNo\r\n        productEntry.type=type\r\n        productEntry.totalamount= totalamount\r\n        productEntry.source=source\r\n        productEntry.productitems=productItem\r\n        productEntry.createdby=user._id\r\n        productEntry.transactioncategory=\"debit\"\r\n       \r\n          console.log(\"b4 facility\",productEntry);\r\n          if (user.currentEmployee){\r\n         productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }else{\r\n            toast({\r\n                message: 'You can not remove inventory from any organization',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n          }\r\n          if (state.StoreModule.selectedStore._id){\r\n            productEntry.storeId=state.StoreModule.selectedStore._id\r\n          }else{\r\n            toast({\r\n                message: 'You need to select a store before removing inventory',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n\r\n          }\r\n          console.log(\"b4 create\",productEntry);\r\n        ProductEntryServ.create(productEntry)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                resetform()\r\n               /*  setMessage(\"Created ProductEntry successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'ProductExit created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n                  const today=new Date().toLocaleString()\r\n      \r\n                  setDate(today)\r\n                  const invoiceNo=random(6,'uppernumeric')\r\n                setDocumentNo(invoiceNo)\r\n                setType(\"Sales\")\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductExit ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n      const handleChangeAmount=()=>{\r\n        setChangeAmount((rev)=>(!rev))\r\n        \r\n    }\r\n   // console.log(\"i am rendering\")\r\n\r\n    useEffect(() => {\r\n        const today=new Date().toLocaleString()\r\n        //console.log(today)\r\n        setDate(today)\r\n        const invoiceNo=random(6,'uppernumeric')\r\n        setDocumentNo(invoiceNo)\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        calcamount1=quantity*sellingprice\r\n         setCalcAmount(calcamount1)\r\n         console.log(calcamount)\r\n         setChangeAmount(true)\r\n        return () => {\r\n            \r\n        }\r\n    }, [quantity])\r\n\r\n  \r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                   Point of Sale: Sales, Dispense, Audit, Transfer out\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n            <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n            <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType} className=\"selectadd\">\r\n                           <option value=\"\">Choose Type </option>\r\n                            <option value=\"Sales\">Sales </option>\r\n                            <option value=\"In-house\">In-House </option>\r\n                            <option value=\"Dispense\">Dispense</option>\r\n                            <option value=\"Audit\">Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"client\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Client\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n           \r\n            </div>\r\n            </div> {/* horizontal end */}\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                    <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n               <div className=\"field is-horizontal\">\r\n               <div className=\"field-body\">\r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={e=>setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-coins\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n\r\n                </div> \r\n                </div> \r\n               \r\n                </form>   \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Product Items:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <InventorySearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                 {sellingprice &&   \"N\"}{sellingprice} {sellingprice &&   \"per\"}  {baseunit} {invquantity} {sellingprice &&   \"remaining\"} \r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\" >\r\n                <div className=\"field\" style={{width:\"40%\"}}>\r\n                <p className=\"control has-icons-left\" >\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={ e=> handleQtty(e)} placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hashtag\"></i>\r\n                    </span>\r\n                   \r\n                </p>\r\n        <label >{baseunit}</label>\r\n            </div> \r\n            <div className=\"field\">\r\n            <label>Amount:</label>{/* <p>{quantity*sellingprice}</p> */}\r\n            </div>\r\n            <div className=\"field\" style={{width:\"40%\"}}>\r\n                <p className=\"control has-icons-left \" /* style={{display:\"none\"}} */>\r\n                    <input className=\"input is-small\" name=\"qamount\" disabled={changeAmount} value={calcamount} type=\"text\"  onChange={async e=> await setCalcAmount(e.target.value)}  placeholder=\"Amount\"   />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-dollar-sign\"></i>\r\n                    </span>\r\n                </p>\r\n                <button className=\"button is-small is-success btnheight\" onClick={handleChangeAmount}>Adjust</button>\r\n            </div> \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n            \r\n       {(productItem.length>0) && <div>\r\n            <label>Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Selling Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.sellingprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Sell\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" disabled={!productItem.length>0} /* onClick={onSubmit} */>\r\n                        Clear\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductExitList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProductEntry, setSelectedProductEntry]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedProductEntry(ProductEntry)\r\n\r\n        const    newProductExitModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductEntryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                transactioncategory:\"debit\",\r\n                storeId:state.StoreModule.selectedStore._id,\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProductEntry= await ProductEntryServ.find(\r\n                {query: {\r\n                    transactioncategory:\"debit\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProductEntry.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        /* toast({\r\n                            message: 'You do not qualify to view this',\r\n                            type: 'is-danger',\r\n                            dismissible: true,\r\n                            pauseOnHover: true,\r\n                          }) \r\n                          return */\r\n                        const findProductEntry= await ProductEntryServ.find(\r\n                            {query: {\r\n                                transactioncategory:\"debit\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProductEntry.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" ProductEntry  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n         /*    useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n            useEffect(() => {\r\n               \r\n                if (!state.StoreModule.selectedStore){\r\n                    toast({\r\n                        message: 'kindly select a store',\r\n                        type: 'is-danger',\r\n                        dismissible: true,\r\n                        pauseOnHover: true,\r\n                      }) \r\n                      return\r\n                    getFacilities()\r\n\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductEntryServ.on('created', (obj)=>getFacilities())\r\n                ProductEntryServ.on('updated', (obj)=>getFacilities())\r\n                ProductEntryServ.on('patched', (obj)=>getFacilities())\r\n                ProductEntryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                console.log(\"store changed\")\r\n                return () => {\r\n                   \r\n                }\r\n            }, [state.StoreModule.selectedStore])\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {state.StoreModule.selectedStore?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search ProductEntry\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Product Exits </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th>Client</th>\r\n                                        <th><abbr title=\"Document No\">Document No</abbr></th>\r\n                                        <th><abbr title=\"Total Amount\">Total Amount</abbr></th>\r\n                                        <th><abbr title=\"Enteredby\">Entered By</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{ProductEntry.date}</td>\r\n                                            <th>{ProductEntry.type}</th>\r\n                                            <td>{ProductEntry.source}</td>\r\n                                            <td>{ProductEntry.documentNo}</td>\r\n                                            <td>{ProductEntry.totalamount}</td>\r\n                                            <td>{ProductEntry.enteredby}</td>\r\n                                            <td><span className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading... Choose a Store</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductExitDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductExitModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                    <th><abbr title=\"Amount\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.sellingprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductExitModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductExitModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductExitModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InventorySearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('inventory')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n   const {user} = useContext(UserContext) \r\n   const {state}=useContext(ObjectContext)\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n    }\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 facility: user.currentEmployee.facilityDetail._id,\r\n                 storeId: state.StoreModule.selectedStore._id,\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small  is-expanded\" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu expanded\" style={{width:\"100%\"}}>\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" /* onClick={handleAddproduct} */> <span> {val} is not in your inventory</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <div><span>{facility.name}</span></div>\r\n                                        <div><span><strong>{facility.quantity}</strong></span>\r\n                                        <span>{facility.baseunit}(s) remaining</span>\r\n                                        <span className=\"padleft\"><strong>Price:</strong> N{facility.sellingprice}</span></div>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        <ProductCreate />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicReport.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\DeptUnits.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClientMgt\\Patient.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js",["493","494","495","496","497","498","499"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\FinanceHome.js",["500","501","502","503","504","505"],"import React ,{useState,useEffect,useContext} from 'react'\r\nimport Store, { StoreList } from './Store'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\nexport default function InventoryHome() {\r\n   // const [activeModal, setActiveModal]=useState(\"modal is-active \")\r\n    const {state,setState}=useContext(ObjectContext)\r\n    const handleCloseModal=()=>{\r\n        state.showStoreModal  =  \"modal\"                                                                                                                                                        \r\n        setState(state)\r\n        console.log( state.showStoreModal)\r\n    }\r\n    \r\n       \r\n \r\n    return (\r\n       \r\n            <section className= \"section remPadTop\">\r\n              <section className=\"hero is-info is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                    <h1 className=\"title\">\r\n                      Finance Module\r\n                    </h1>\r\n                    <h2 className=\"subtitle\">\r\n                        Have fun working today!\r\n                    </h2>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n                                         \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\BillPrescription.js",["506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\nimport PaymentCreate from './PaymentCreate'\r\nimport PatientProfile from '../ClientMgt/PatientProfile'\r\n/* import {ProductCreate} from './Products' */\r\n// eslint-disable-next-line\r\n//const searchfacility={};\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\n\r\n// Demo styles, see 'Styles' section below for some notes on use.\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\nimport ClientBilledPrescription from './ClientBill';\r\n\r\n\r\n\r\nexport default function BillPrescription() {\r\n    //const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line\r\n   const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line\r\n  const [message, setMessage] = useState(\"\") \r\n   const OrderServ=client.service('order')\r\n   //const history = useHistory()\r\n  // const {user,setUser} = useContext(UserContext)\r\n   const [facilities,setFacilities]=useState([])\r\n    // eslint-disable-next-line\r\n  const [selectedDispense, setSelectedDispense]=useState() //\r\n   // eslint-disable-next-line\r\n   const {state,setState}=useContext(ObjectContext)\r\n   // eslint-disable-next-line\r\n   const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n\r\n    /*  useEffect(() => {\r\n        const updatedOne= state.currentClients.filter(el=>(JSON.stringify(el.client_id)===JSON.stringify(state.DispenseModule.selectedDispense.client_id)))\r\n        console.log(\"udatedone\", updatedOne)\r\n        console.log(\"state\", state.currentClients)\r\n        handleRow(updatedOne)\r\n         return () => {\r\n             \r\n         }\r\n     }, []) */\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n                <div className=\"column is-5 \">\r\n                    <BillPrescriptionList />\r\n                    </div>\r\n              \r\n                <div className=\"column is-4 \">\r\n                \r\n                {(state.medicationModule.show ==='detail')&&<PaymentCreate />}\r\n                </div>\r\n                <div className=\"column is-3 \">\r\n                \r\n                {(state.medicationModule.show ==='detail')&&<PatientProfile />}\r\n                </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function BillPrescriptionList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const OrderServ=client.service('order')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedDispense, setSelectedDispense]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n    const [selectedMedication, setSelectedMedication] =useState(\"\")\r\n\r\n    const handleSelectedClient= async(Client)=>{\r\n        // await setSelectedClient(Client)\r\n         const    newClientModule={\r\n             selectedClient:Client,\r\n             show :'detail'\r\n         }\r\n        await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n     }\r\n\r\n    const handleMedicationRow= async(ProductEntry)=>{ //handle selected single order\r\n        //console.log(\"b4\",state)\r\n    \r\n        //console.log(\"handlerow\",ProductEntry)\r\n        await handleSelectedClient(ProductEntry.client)\r\n\r\n    \r\n        await setSelectedMedication(ProductEntry)\r\n    \r\n        const    newProductEntryModule={\r\n            selectedMedication:ProductEntry,\r\n            show :'detail'\r\n        }\r\n      await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n       //console.log(state)\r\n      // ProductEntry.show=!ProductEntry.show\r\n    \r\n    }\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n  \r\n\r\n    const handleSearch= async(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       OrderServ.find({query: {\r\n           $or:[\r\n                {order: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                }},\r\n               { order_status: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                }},\r\n                {clientname: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                }}\r\n                ],\r\n                order_category:\"Prescription\",\r\n                fulfilled:false,\r\n                destination: user.currentEmployee.facilityDetail._id,\r\n                order_status:\"Pending\",\r\n               // storeId:state.StoreModule.selectedStore._id,\r\n               //facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:50,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                }}).then( async(res)=>{\r\n               console.log(res)\r\n               setFacilities(res.groupedOrder)\r\n              // await setState((prevstate)=>({...prevstate, currentClients:res.groupedOrder}))\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true)\r\n            })\r\n            .catch((err)=>{\r\n               // console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n    const getFacilities= async()=>{\r\n       \r\n            // console.log(\"here b4 server\")\r\n    const findProductEntry= await OrderServ.find(\r\n            {query: {\r\n                order_category:\"Prescription\",\r\n                fulfilled:false,\r\n                destination: user.currentEmployee.facilityDetail._id,\r\n                order_status:\"Pending\",  // need to set this finally\r\n                //storeId:state.StoreModule.selectedStore._id,\r\n                //clientId:state.ClientModule.selectedClient._id,\r\n                $limit:50,\r\n                $sort: {\r\n                    createdAt: -1\r\n                }\r\n                }})\r\n\r\n           // console.log(\"updatedorder\", findProductEntry.groupedOrder)\r\n            await setFacilities(findProductEntry.groupedOrder)\r\n            await setState((prevstate)=>({...prevstate, currentClients:findProductEntry.groupedOrder}))\r\n            }   \r\n\r\n    //1.consider using props for global data\r\n    useEffect(() => {\r\n        // console.log(\"started\")\r\n            getFacilities()\r\n            OrderServ.on('created', (obj)=>getFacilities())\r\n            OrderServ.on('updated', (obj)=>getFacilities())\r\n            OrderServ.on('patched', (obj)=>getFacilities())\r\n            OrderServ.on('removed', (obj)=>getFacilities())\r\n            return () => {\r\n            \r\n            }\r\n            },[])\r\n\r\n        const handleRow= async(ProductEntry)=>{\r\n    \r\n        await setSelectedDispense(ProductEntry)\r\n\r\n        const    newProductEntryModule={\r\n            selectedDispense:ProductEntry,\r\n            show :'detail'\r\n        }\r\n        await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n        //console.log(state)\r\n        \r\n        }\r\n\r\n\r\n    return(     \r\n            <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Medications\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Pending Prescriptions </span></div>\r\n                     {/* <div className=\"level-right\">\r\n                       <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div> \r\n                    </div>*/}\r\n\r\n                </div>\r\n                <div className=\" pullup\">\r\n                    <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                    <Accordion allowZeroExpanded>\r\n                        {facilities.map((Clinic, i)=>(\r\n                            <AccordionItem  key={Clinic.client_id} >\r\n                               <AccordionItemHeading >\r\n                               <AccordionItemButton  >\r\n                                      <strong> {i+1} {Clinic.clientname} with {Clinic.orders.length} Pending Prescription(s)  </strong>\r\n                                </AccordionItemButton>\r\n                                </AccordionItemHeading>\r\n                                <AccordionItemPanel>\r\n                                    <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable mr-2\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                                    <th><abbr title=\"Date\">Date</abbr></th>\r\n                                                    <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                                    <th>Fulfilled</th>\r\n                                                    <th><abbr title=\"Status\">Status</abbr></th>\r\n                                                    <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                            { Clinic.orders.map((order, i)=>(\r\n\r\n                                                        <tr key={order._id} onClick={()=>handleMedicationRow(order)} className={order._id===(selectedMedication?._id||null)?\"is-selected\":\"\"}>                                         \r\n                                                        <th>{i+1}</th>\r\n                                                        <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                                        <th>{order.order}</th>\r\n                                                        <td>{order.fulfilled===\"True\"?\"Yes\":\"No\"}</td>\r\n                                                        <td>{order.order_status}</td>\r\n                                                        <td>{order.requestingdoctor_Name}</td>\r\n                                                        </tr>\r\n                                                ))}\r\n                                            </tbody>\r\n                                            </table>\r\n                                            {/*   */}<ClientBilledPrescription  selectedClient={Clinic.client_id}/>{/*  } */}\r\n                              </AccordionItemPanel>                                          \r\n                                </AccordionItem>\r\n                            ))}\r\n                            {/* <!-- Add Ref to Load More div --> */}\r\n                            {/*  <div className=\"loading\" ref={loader}>\r\n                                    <h2>Load More</h2>\r\n                        </div> */}\r\n                        </Accordion>\r\n                    </div>                   \r\n                </div>  \r\n            </>          \r\n    )\r\n    }\r\n\r\n\r\nexport function DispenseDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    const [selectedMedication, setSelectedMedication] =useState(\"\")\r\n    const [currentOrder, setCurrentOrder] =useState(\"\")\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const OrderServ=client.service('order')\r\n    /* const [ProductEntry, setProductEntry] = useState(\"\")\r\n    const [facilities, setFacilities] = useState(\"\") */\r\n\r\n let ProductEntry =state.DispenseModule.selectedDispense\r\n   //const facilities=ProductEntry.orders\r\n\r\n   const handleRow= async(ProductEntry)=>{\r\n    //console.log(\"b4\",state)\r\n\r\n    //console.log(\"handlerow\",ProductEntry)\r\n\r\n    await setSelectedMedication(ProductEntry)\r\n\r\n    const    newProductEntryModule={\r\n        selectedMedication:ProductEntry,\r\n        show :'detail'\r\n    }\r\n  await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n   //console.log(state)\r\n  // ProductEntry.show=!ProductEntry.show\r\n\r\n}\r\n\r\n    const handleEdit= async(ProductEntry)=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n      const client1=  state.currentClients.find(el=>{\r\n            return JSON.stringify(el.client_id)===JSON.stringify(state.DispenseModule.selectedDispense)\r\n        })\r\n\r\n    setCurrentOrder(client1)\r\n   // console.log(client1)\r\n        return () => {\r\n        \r\n        }\r\n    }, [])\r\n   \r\n\r\n /*  \r\n     const setprod=async()=>{\r\n        await setProductEntry(state.DispenseModule.selectedDispense)\r\n    } */\r\n \r\n    useEffect(() => {\r\n        /* OrderServ.on('created', (obj)=>getFacilities())\r\n        OrderServ.on('updated', (obj)=>getFacilities())\r\n       \r\n        OrderServ.on('removed', (obj)=>getFacilities()) */\r\n        OrderServ.on('patched',  (obj)=>{\r\n            //update state.DispenseModule.selectedDispense\r\n           // console.log(obj.clientId)\r\n           // console.log(\"currentClients\",state.currentClients)\r\n           const current1=state.currentClients.find(el=>(JSON.stringify(el.client_id)===JSON.stringify(obj.clientId)))\r\n           setCurrentOrder(current1)\r\n          // console.log(\"currentone\",current1)\r\n        })\r\n      \r\n        return () => {\r\n         \r\n        }\r\n    },[])\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Dispense Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* {JSON.stringify(ProductEntry.orders,2,10)} */}\r\n            <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        {/* <th><abbr title=\"Client Name\">Client Name</abbr></th> */}\r\n                                        {/* <th><abbr title=\"Number of Orders\"># of Medication</abbr></th> */}\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                        <th>Fulfilled</th>\r\n                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                        <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                        \r\n                                        {/* <th><abbr title=\"Actions\">Actions</abbr></th> */}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {state.DispenseModule.selectedDispense.orders.map((order, i)=>(\r\n\r\n                                            <tr key={order._id} onClick={()=>handleRow(order)} className={order._id===(selectedMedication?._id||null)?\"is-selected\":\"\"}>\r\n                                            \r\n                                               <th>{i+1}</th>\r\n                                                 {/* <td>{ProductEntry.clientname}</td> \r\n                                                <td>{ProductEntry.orders.length}</td> */}\r\n                                           \r\n                                           \r\n                                            <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                          <th>{order.order}</th>\r\n                                            <td>{order.fulfilled===\"True\"?\"Yes\":\"No\"}</td>\r\n                                            <td>{order.order_status}</td>\r\n                                            <td>{order.requestingdoctor_Name}</td>\r\n                                            \r\n                                           {/*  <td><span className=\"showAction\"  >...</span></td> */}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                        \r\n                </div>              \r\n               \r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\DocumentClass.js",["524","525","526","527","528"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function DocumentClass() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedDocumentClass,setSelectedDocumentClass]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">DocumentClass  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <DocumentClassList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.DocumentClassModule.show ==='create')&&<DocumentClassCreate />}\r\n                {(state.DocumentClassModule.show ==='detail')&&<DocumentClassDetail  />}\r\n                {(state.DocumentClassModule.show ==='modify')&&<DocumentClassModify DocumentClass={selectedDocumentClass} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function DocumentClassCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const DocumentClassServ=client.service('documentclass')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{ // buble-up from inputsearch for creating resource\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeDocumentClass.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n          data.locationType=\"DocumentClass\"\r\n        DocumentClassServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created DocumentClass successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'DocumentClass created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating DocumentClass ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create DocumentClass\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of DocumentClass\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n         \r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n          \r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function DocumentClassList({standalone}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const DocumentClassServ=client.service('documentclass')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedDocumentClass, setSelectedDocumentClass]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n   \r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newDocumentClassModule={\r\n            selectedDocumentClass:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, DocumentClassModule:newDocumentClassModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(DocumentClass)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",DocumentClass)\r\n\r\n        await setSelectedDocumentClass(DocumentClass)\r\n\r\n        const    newDocumentClassModule={\r\n            selectedDocumentClass:DocumentClass,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DocumentClassModule:newDocumentClassModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       DocumentClassServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                locationType:\"DocumentClass\",\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" DocumentClass  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching DocumentClass, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findDocumentClass= await DocumentClassServ.find(\r\n                {query: {\r\n                    /* locationType:\"DocumentClass\",\r\n                    facility:user.currentEmployee.facilityDetail._id, */\r\n                    $limit:20,\r\n                    $sort: {\r\n                        name: 1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findDocumentClass.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findDocumentClass= await DocumentClassServ.find(\r\n                            {query: {\r\n                               /*  locationType:\"DocumentClass\", */\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    name: 1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findDocumentClass.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" DocumentClass  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating DocumentClass, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n          /*   useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n              /*   if (user){\r\n                  \r\n                }else{ */\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n               /*  } */\r\n                DocumentClassServ.on('created', (obj)=>getFacilities())\r\n                DocumentClassServ.on('updated', (obj)=>getFacilities())\r\n                DocumentClassServ.on('patched', (obj)=>getFacilities())\r\n                DocumentClassServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search DocumentClass\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Document Class</span></div>\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        {/* <th><abbr title=\"Last Name\">DocumentClass Type</abbr></th>\r\n                                       <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                         <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>*/}\r\n                                       { !standalone &&  <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((DocumentClass, i)=>(\r\n\r\n                                            <tr key={DocumentClass._id} onClick={()=>handleRow(DocumentClass)}  className={DocumentClass._id===(selectedDocumentClass?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{DocumentClass.name}</th>\r\n                                            {/*<td>{DocumentClass.DocumentClassType}</td>\r\n                                            < td>{DocumentClass.profession}</td>\r\n                                            <td>{DocumentClass.phone}</td>\r\n                                            <td>{DocumentClass.email}</td>\r\n                                            <td>{DocumentClass.department}</td>\r\n                                            <td>{DocumentClass.deptunit}</td> \r\n                                            <td>{DocumentClass.facility}</td>*/}\r\n                                          { !standalone &&   <td><span   className=\"showAction\"  >...</span></td>}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function DocumentClassDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const DocumentClassServ=client.service('/DocumentClass')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const DocumentClass =state.DocumentClassModule.selectedDocumentClass \r\n\r\n    const handleEdit= async()=>{\r\n        const    newDocumentClassModule={\r\n            selectedDocumentClass:DocumentClass,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DocumentClassModule:newDocumentClassModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    DocumentClass Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {DocumentClass.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Location Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"DocumentClassType\">{DocumentClass.locationType} </span> \r\n                    </td>\r\n                </tr>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"DocumentClassCity\">{DocumentClass.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"DocumentClassContactPhone\" >{DocumentClass.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"DocumentClassEmail\" >{DocumentClass.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"DocumentClassOwner\">{DocumentClass.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"DocumentClassType\">{DocumentClass.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-DocumentClass-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"DocumentClassCategory\">{DocumentClass.DocumentClassCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function DocumentClassModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const DocumentClassServ=client.service('documentclass')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const DocumentClass =state.DocumentClassModule.selectedDocumentClass \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", DocumentClass.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"locationType\", DocumentClass.locationType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", DocumentClass.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", DocumentClass.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", DocumentClass.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", DocumentClass.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", DocumentClass.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"DocumentClassCategory\", DocumentClass.DocumentClassCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newDocumentClassModule={\r\n        selectedDocumentClass:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, DocumentClassModule:newDocumentClassModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newDocumentClassModule={\r\n            selectedDocumentClass:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, DocumentClassModule:newDocumentClassModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=DocumentClass._id\r\n        if (conf){\r\n             \r\n        DocumentClassServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted DocumentClass successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'DocumentClass deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting DocumentClass, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting DocumentClass, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=DocumentClass.facility\r\n          //console.log(data);\r\n          \r\n        DocumentClassServ.patch(DocumentClass._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated DocumentClass successfully\")\r\n                 toast({\r\n                    message: 'DocumentClass updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating DocumentClass, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating DocumentClass, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    DocumentClass Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Location Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"DocumentClassType\" type=\"text\" placeholder=\"DocumentClass Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"DocumentClass Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"DocumentClassCategory\" type=\"text\" placeholder=\"DocumentClass Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-DocumentClass-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                {/* <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\Prescription.js",["529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport FacilityPopup from '../helpers/FacilityPopup'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\n/* import {ProductCreate} from './Products' */\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Prescription() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <PrescriptionList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.OrderModule.show ==='create')&&<PrescriptionCreate />}\r\n                {(state.OrderModule.show ==='detail')&&<ProductEntryDetail  />}\r\n                {(state.OrderModule.show ==='modify')&&<ProductEntryModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function PrescriptionCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Purchase Invoice\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(\"\")\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [destination,setDestination] = useState('')\r\n    const [destinationId,setDestinationId] = useState('')\r\n    const [destinationModal,setDestinationModal] = useState(false)\r\n    const [medication,setMedication] = useState()\r\n    const [instruction,setInstruction] = useState()\r\n    const [productItem,setProductItem] = useState([])\r\n    const {state}=useContext(ObjectContext)\r\n    const ClientServ=client.service('clinicaldocument')\r\n    \r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const handlecloseModal =()=>{\r\n        setDestinationModal(false)\r\n        //handleSearch(val)\r\n    }\r\n    const productItemI={\r\n      /*   productId,\r\n        name, */\r\n        medication,\r\n        destination,\r\n        instruction,\r\n        destinationId\r\n        /* costprice,\r\n        amount:quantity*costprice,\r\n        baseunit */\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setInstruction(obj.instruction)\r\n        setMedication(obj.medication)\r\n\r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setInstruction(\"\")\r\n            setMedication(\"\")\r\n           \r\n        }\r\n       // setBaseunit(obj.baseunit)\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n   /*  useEffect(() => {\r\n        setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n        console.log(productItem)\r\n        return () => {\r\n            \r\n        }\r\n    },[productItemI])\r\n */\r\n    useEffect(() => {\r\n        \r\n        setDestination(state.DestinationModule.selectedDestination.facilityName)\r\n        setDestinationId(state.DestinationModule.selectedDestination._id)\r\n        return () => {\r\n           \r\n        }\r\n    }, [state.DestinationModule.selectedDestination])\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n    const handleClickProd=async()=>{\r\n        await setSuccess(false)\r\n        if (!(productItemI.medication && productItemI.medication.length>0 )){\r\n            toast({\r\n                message: 'medication can not be empty ' ,\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n              return\r\n        }\r\n        await setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n        setName(\"\")\r\n        setMedication(\"\")\r\n        setInstruction(\"\")\r\n        setDestination( user.currentEmployee.facilityDetail.facilityName)\r\n        setDestinationId( user.currentEmployee.facilityDetail._id)\r\n       // setDestination(\"\")\r\n       await setSuccess(true)\r\n       console.log(success)\r\n       console.log(productItem)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const handleChangeDestination=()=>{\r\n        setDestinationModal(true)\r\n    }\r\n\r\n    const resetform=()=>{\r\n     setType(\"Purchase Invoice\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setMedication(\"\")\r\n    setInstruction(\"\")\r\n    setProductItem([])\r\n    }\r\n    const onSubmit = () =>{\r\n        //data,e\r\n       // e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        //write document\r\n        let document={}\r\n         // data.createdby=user._id\r\n         // console.log(data);\r\n          if (user.currentEmployee){\r\n          document.facility=user.currentEmployee.facilityDetail._id \r\n          document.facilityname=user.currentEmployee.facilityDetail.facilityName // or from facility dropdown\r\n          }\r\n         document.documentdetail=productItem\r\n         console.log(document.documentdetail)\r\n          document.documentname=\"Prescription\" //state.DocumentClassModule.selectedDocumentClass.name\r\n         // document.documentClassId=state.DocumentClassModule.selectedDocumentClass._id\r\n          document.location=state.ClinicModule.selectedClinic.name+\" \"+state.ClinicModule.selectedClinic.locationType\r\n          document.locationId=state.ClinicModule.selectedClinic._id\r\n          document.client=state.ClientModule.selectedClient._id\r\n          document.clientname=state.ClientModule.selectedClient.firstname+ \" \"+state.ClientModule.selectedClient.middlename+\" \"+state.ClientModule.selectedClient.lastname\r\n          document.clientobj=state.ClientModule.selectedClient\r\n          document.createdBy=user._id\r\n          document.createdByname=user.firstname+ \" \"+user.lastname\r\n          document.status=\"completed\"\r\n          console.log(document)\r\n        ClientServ.create(document)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Presciption created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Prescription ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    useEffect(() => {\r\n        setDestination( user.currentEmployee.facilityDetail.facilityName)\r\n        setDestinationId( user.currentEmployee.facilityDetail._id)\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Prescription\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n           {/*  <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit)  </form>  */}\r\n           \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Medication:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n             <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */  > \r\n                    <MedicationHelperSearch  getSearchfacility={getSearchfacility} clear={success} />  \r\n                  <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\"  /* ref={register ({ required: true }) }  */   value={medication} name=\"medication\" type=\"text\" onChange={e=>setMedication(e.target.value)} placeholder=\"medication\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p> \r\n                </div>\r\n               {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"medication\" value={medication} type=\"text\" onChange={e=>setMedication(e.target.value)} placeholder=\"medication\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n       \r\n            </div>  */}\r\n            \r\n          \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n         <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"instruction\" value={instruction} type=\"text\" onChange={e=>setInstruction(e.target.value)} placeholder=\"Instructions/Note\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n       \r\n            </div>  \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small \" disabled /* ref={register({ required: true })} */ name=\"destination\" value={destination===user.currentEmployee.facilityDetail.facilityName?\"In-house\":destination} type=\"text\" onChange={e=>setDestination(e.target.value)} placeholder=\"Destination Pharmacy\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                <button className=\"button is-small is-success btnheight\" onClick={handleChangeDestination}>Change</button>\r\n       \r\n            </div>  \r\n            </div> \r\n            </div> \r\n\r\n       {(productItem.length>0) && <div>\r\n            <label className=\"label is-size-7\">Medications:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                   {/*  <th><abbr title=\"Type\">Name</abbr></th> */}\r\n                    <th><abbr title=\"Medication\">Medication</abbr></th>\r\n                    <th><abbr title=\"Destination\">Destination</abbr></th>\r\n                     {/*<th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th> */}\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        {/* <td>{ProductEntry.name}</td> */}\r\n                        <td>{ProductEntry.medication}<br/>\r\n                        <span className=\"help\">{ProductEntry.instruction}</span></td>\r\n                       <td>{ProductEntry.destination===user.currentEmployee.facilityDetail.facilityName?\"In-house\":ProductEntry.destination}</td>\r\n                         {/* <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td> */}\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Create\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n            <div className={`modal ${destinationModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Destination</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                            <FacilityPopup facilityType=\"Pharmacy\"  closeModal={handlecloseModal}/>\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                       {/*  <ProductCreate /> */}\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function PrescriptionList({standalone}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const OrderServ=client.service('order')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedOrder, setSelectedOrder]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedOrder:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, OrderModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedOrder(ProductEntry)\r\n\r\n        const    newProductEntryModule={\r\n            selectedOrder:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, OrderModule:newProductEntryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       OrderServ.find({query: {\r\n              $or:[ { order: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                }},\r\n                {order_status: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                }}],\r\n                order_category:\"Prescription\",\r\n               // storeId:state.StoreModule.selectedStore._id,\r\n               //facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n const getFacilities= async()=>{\r\n       \r\n            console.log(\"here b4 server\")\r\n            console.log(state.ClientModule.selectedClient._id)\r\n             const findProductEntry= await OrderServ.find(\r\n                {query: {\r\n                    order_category:\"Prescription\",\r\n                    //destination: user.currentEmployee.facilityDetail._id,\r\n                   \r\n                    //storeId:state.StoreModule.selectedStore._id,\r\n                    clientId:state.ClientModule.selectedClient._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n         await setFacilities(findProductEntry.data)\r\n         }   \r\n\r\n            useEffect(() => {\r\n                console.log(\"started\")\r\n                getFacilities()\r\n              \r\n               \r\n               OrderServ.on('created', (obj)=>getFacilities())\r\n                OrderServ.on('updated', (obj)=>getFacilities())\r\n                OrderServ.on('patched', (obj)=>getFacilities())\r\n                OrderServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            \r\n    return(\r\n        \r\n            <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Medications\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                   {!standalone && (<><div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Prescriptions </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div></>)}\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                        <th>Fulfilled</th>\r\n                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                        <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                        {/* <th><abbr title=\"Client Name\">Client Name</abbr></th> */}\r\n                                        {!standalone &&     <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)} className={ProductEntry._id===(selectedOrder?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */}<span>{format(new Date(ProductEntry.createdAt),'dd-MM-yy')}</span></td>\r\n                                            <th>{ProductEntry.order}</th>\r\n                                            <td>{ProductEntry.fulfilled===\"True\"?\"Yes\":\"No\"}</td>\r\n                                            <td>{ProductEntry.order_status}</td>\r\n                                            <td>{ProductEntry.requestingdoctor_Name}</td>\r\n                                            {/* <td>{ProductEntry.clientId}</td> */}\r\n                                          {!standalone &&  <td><span className=\"showAction\"  >...</span></td>}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductEntryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductEntryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductEntryModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function MedicationHelperSearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('medicationhelper')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n    const [productModal,setProductModal]=useState(false)\r\n   let value\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n  \r\n       \r\n       await  setSimpa(obj.medication)\r\n      \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='medication' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res) \r\n                    if(res.total>0){\r\n                        setFacilities(res.data)\r\n                        setSearchMessage(\" product  fetched successfully\")\r\n                        setShowPanel(true)\r\n                    }else{\r\n                        setShowPanel(false)\r\n                        getSearchfacility({\r\n                            medication:value,\r\n                            instruction:\"\"\r\n                        })\r\n                    }\r\n               \r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error fetching medication ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n       // setDestinationModal(false)\r\n        //handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n        setSimpa(value)\r\n        return () => {\r\n            \r\n        }\r\n    }, [simpa])\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                               /*  onBlur={(e)=>handleBlur(e)} */\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu\" style={{width:\"100%\"}} >\r\n                            <div className=\"dropdown-content\">\r\n                         {/*  { facilities.length>0?\"\":<div className=\"dropdown-item\" onClick={handleAddproduct}> <span>Add {val} to product list</span> </div>} */}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.medication}</span> // <span>{facility.instruction}</span>\r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\DispenseExit.js",["550","551","552","553","554","555","556","557","558","559","560","561","562","563","564"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\nvar random = require('random-string-generator');\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function ProductEntry() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ProductExitList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ProductExitModule.show ==='create')&&<ProductExitCreate />}\r\n                {(state.ProductExitModule.show ==='detail')&&<ProductExitDetail  />}\r\n                {(state.ProductExitModule.show ==='modify')&&<ProductExitModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductExitCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Sales\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(0)\r\n    const [qamount,setQAmount] = useState(null)\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [inventoryId,setInventoryId] = useState(\"\")\r\n    const [baseunit,setBaseunit] = useState(\"\")\r\n    const [quantity,setQuantity] = useState(\"\")\r\n    const [sellingprice,setSellingPrice] = useState(\"\")\r\n    const [costprice,setCostprice] = useState(0)\r\n    const [invquantity,setInvQuantity] = useState(\"\")\r\n    const [calcamount,setCalcAmount] = useState(0)\r\n    const [productItem,setProductItem] = useState([])\r\n    const [billingId,setBilllingId]=useState(\"\")  \r\n    const [changeAmount, setChangeAmount] = useState(true)\r\n    const {state}=useContext(ObjectContext)\r\n    const inputEl = useRef(0);\r\n    let calcamount1\r\n    let hidestatus\r\n\r\n    let medication =state.financeModule.selectedFinance\r\n    console.log(\"medication\", medication)\r\n\r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const productItemI={\r\n        productId,\r\n        name,\r\n        quantity,\r\n        sellingprice,\r\n        amount:calcamount, //qamount||\r\n        baseunit,\r\n        costprice,\r\n        billingId\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setProductId(obj.productId)\r\n        setName(obj.name)\r\n        setBaseunit(obj.baseunit)\r\n        setInventoryId(obj.inventoryId)\r\n        setSellingPrice(obj.sellingprice)\r\n        setInvQuantity(obj.quantity)\r\n        setCostprice(obj.costprice)\r\n        setBilllingId(obj.billingId)\r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setProductId(\"\")\r\n            setName(\"\")\r\n            setBaseunit(\"\")\r\n            setInventoryId(\"\")\r\n            setSellingPrice(\"\")\r\n            setInvQuantity(\"\")\r\n            setQAmount(null)\r\n            setCostprice(\"\")\r\n           // setCalcAmount(null)\r\n\r\n        }\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n    const handleUpdateTotal=()=>{\r\n\r\n        \r\n        setTotalamount(prevtotal=>Number(prevtotal) + Number(calcamount))\r\n    }\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n\r\n    const handleAmount= async()=>{\r\n        await setQAmount(null)\r\n       // alert(\"Iam chaning qamount\")\r\n    }\r\n    const handleClickProd=async()=>{\r\n        console.log(\"amount: \",productItemI.amount)\r\n        console.log(\"qamount: \",qamount)\r\n        console.log(\"calcamount: \",calcamount)\r\n\r\n        if ( quantity===0||quantity===\"\"|| productId===\"\"){\r\n            toast({\r\n                message: 'You need to choose a product and quantity to proceed',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return \r\n        }\r\n\r\n        await setSuccess(false)\r\n        await setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n       handleUpdateTotal()\r\n        setName(\"\")\r\n        setBaseunit(\"\")\r\n        setQuantity(\"\")\r\n        setInventoryId(\"\")\r\n        setSellingPrice(\"\")\r\n        setInvQuantity(\"\")\r\n            handleAmount()\r\n       // setCalcAmount(null)\r\n       await setSuccess(true)\r\n      /*  console.log(success)\r\n       console.log(qamount)\r\n       console.log(productItem) */\r\n       setChangeAmount(true)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const handleQtty=async(e)=>{\r\n        if (invquantity<e.target.value){\r\n            toast({\r\n                message: 'You can not sell more quantity than exist in inventory ' ,\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n            return\r\n        }\r\n        setQuantity(e.target.value)\r\n        calcamount1=quantity*sellingprice\r\n        await setCalcAmount(calcamount1)\r\n        console.log(calcamount)\r\n\r\n       \r\n\r\n    }\r\n\r\n    useEffect( () => {\r\n         setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n       setCalcAmount(quantity*sellingprice) \r\n        return () => {\r\n            \r\n        }\r\n    },[date])\r\n\r\n    const resetform=()=>{\r\n     setType(\"Sales\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setBaseunit()\r\n    setCostprice()\r\n    setProductItem([])\r\n    }\r\n\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        /* await setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        }) */\r\n        productEntry.date = date\r\n        productEntry.documentNo= documentNo\r\n        productEntry.type=type\r\n        productEntry.totalamount= totalamount\r\n        productEntry.source=source\r\n        productEntry.productitems=productItem\r\n        productEntry.createdby=user._id\r\n        productEntry.transactioncategory=\"debit\"\r\n       \r\n          console.log(\"b4 facility\",productEntry);\r\n          if (user.currentEmployee){\r\n         productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }else{\r\n            toast({\r\n                message: 'You can not remove inventory from any organization',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n          }\r\n          if (state.StoreModule.selectedStore._id){\r\n            productEntry.storeId=state.StoreModule.selectedStore._id\r\n          }else{\r\n            toast({\r\n                message: 'You need to select a store before removing inventory',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n\r\n          }\r\n          console.log(\"b4 create\",productEntry);\r\n        ProductEntryServ.create(productEntry)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                resetform()\r\n               /*  setMessage(\"Created ProductEntry successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'ProductExit created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n                  const today=new Date().toLocaleString()\r\n      \r\n                  setDate(today)\r\n                  const invoiceNo=random(6,'uppernumeric')\r\n                setDocumentNo(invoiceNo)\r\n                setType(\"Sales\")\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductExit ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n      const handleChangeAmount=()=>{\r\n        setChangeAmount((rev)=>(!rev))\r\n        \r\n    }\r\n   // console.log(\"i am rendering\")\r\n\r\n    useEffect(() => {\r\n        const today=new Date().toLocaleString()\r\n        //console.log(today)\r\n        setDate(today)\r\n        const invoiceNo=random(6,'uppernumeric')\r\n        setDocumentNo(invoiceNo)\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        calcamount1=quantity*sellingprice\r\n         setCalcAmount(calcamount1)\r\n         console.log(calcamount)\r\n         setChangeAmount(true)\r\n        return () => {\r\n            \r\n        }\r\n    }, [quantity])\r\n\r\n    useEffect(() => {\r\n        if (!!medication){\r\n\r\n      \r\n        const oldname=medication.participantInfo.client.firstname + \" \"+ medication.participantInfo.client.lastname\r\n       // console.log(\"oldname\",oldname)\r\n        setSource(medication.participantInfo.client.firstname + \" \"+ medication.participantInfo.client.lastname)\r\n\r\n        const newname=source\r\n       // console.log(\"newname\",newname)\r\n        if (oldname!==newname){\r\n            //newdispense\r\n        \r\n        setProductItem([])\r\n        setTotalamount(0)\r\n\r\n        }\r\n        setType(\"Dispense\")\r\n        if (state.financeModule.state){\r\n           /*  medication.show=\"none\"\r\n            medication.proposedpayment={\r\n                balance:0,\r\n                paidup:medication.paymentInfo.paidup + medication.paymentInfo.balance,\r\n                amount:medication.paymentInfo.balance\r\n            } */\r\n            //no payment detail push\r\n            getTotal()\r\n          medication.serviceInfo.sellingprice=medication.serviceInfo.price\r\n          medication.serviceInfo.billinfo={\r\n              billid:medication._id,\r\n              bill_status:medication.billing_status,\r\n              orderId:medication.orderInfo.orderId\r\n          }\r\n          \r\n         setProductItem(\r\n            prevProd=>prevProd.concat(medication.serviceInfo)\r\n        )\r\n        }else{\r\n            if(productItem.length>0){\r\n                setProductItem(\r\n                    prevProd=>prevProd.filter(el=>el.productId!==medication.serviceInfo.productId)\r\n                )\r\n            }\r\n        }\r\n\r\n       // const paymentoptions= []\r\n        //const info = medication.participantInfo.client.paymentinfo\r\n        //let billme={}\r\n        getTotal()\r\n        \r\n    }\r\n        return () => {\r\n           \r\n        }\r\n    }, [state.financeModule])\r\n\r\n        const getTotal= async()=>{\r\n            setTotalamount(0)\r\n            productItem.forEach(el=>{\r\n                    setTotalamount(prevtotal=>Number(prevtotal) + Number(el.amount) )\r\n                })\r\n        }\r\n\r\n    useEffect(() => {\r\n     getTotal()\r\n    console.log(totalamount)\r\n        return () => {\r\n           \r\n        }\r\n    }, [productItem])\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                   Point of Sale: Sales, Dispense, Audit, Transfer out\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n            <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n            <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType} className=\"selectadd\">\r\n                           <option value=\"\">Choose Type </option>\r\n                            <option value=\"Sales\">Sales </option>\r\n                            <option value=\"In-house\">In-House </option>\r\n                            <option value=\"Dispense\">Dispense</option>\r\n                            <option value=\"Audit\">Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"client\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Client\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n           \r\n            </div>\r\n            </div> {/* horizontal end */}\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                    <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n               <div className=\"field is-horizontal\">\r\n               <div className=\"field-body\">\r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={e=>setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-coins\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n\r\n                </div> \r\n                </div> \r\n               \r\n                </form>   \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Product Items:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <InventorySearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                 {sellingprice &&   \"N\"}{sellingprice} {sellingprice &&   \"per\"}  {baseunit} {invquantity} {sellingprice &&   \"remaining\"} \r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\" >\r\n                <div className=\"field\" style={{width:\"40%\"}}>\r\n                <p className=\"control has-icons-left\" >\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={ e=> handleQtty(e)} placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hashtag\"></i>\r\n                    </span>\r\n                   \r\n                </p>\r\n        <label >{baseunit}</label>\r\n            </div> \r\n            <div className=\"field\">\r\n            <label>Amount:</label>{/* <p>{quantity*sellingprice}</p> */}\r\n            </div>\r\n            <div className=\"field\" style={{width:\"40%\"}}>\r\n                <p className=\"control has-icons-left \" /* style={{display:\"none\"}} */>\r\n                    <input className=\"input is-small\" name=\"qamount\" disabled={changeAmount} value={calcamount} type=\"text\"  onChange={async e=> await setCalcAmount(e.target.value)}  placeholder=\"Amount\"   />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-dollar-sign\"></i>\r\n                    </span>\r\n                </p>\r\n                <button className=\"button is-small is-success btnheight\" onClick={handleChangeAmount}>Adjust</button>\r\n            </div> \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n            \r\n       {(productItem.length>0) && <div>\r\n            <label>Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Selling Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.sellingprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Sell\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" disabled={!productItem.length>0} /* onClick={onSubmit} */>\r\n                        Clear\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductExitList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProductEntry, setSelectedProductEntry]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedProductEntry(ProductEntry)\r\n\r\n        const    newProductExitModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductEntryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                transactioncategory:\"debit\",\r\n                storeId:state.StoreModule.selectedStore._id,\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProductEntry= await ProductEntryServ.find(\r\n                {query: {\r\n                    transactioncategory:\"debit\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProductEntry.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        /* toast({\r\n                            message: 'You do not qualify to view this',\r\n                            type: 'is-danger',\r\n                            dismissible: true,\r\n                            pauseOnHover: true,\r\n                          }) \r\n                          return */\r\n                        const findProductEntry= await ProductEntryServ.find(\r\n                            {query: {\r\n                                transactioncategory:\"debit\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProductEntry.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" ProductEntry  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n         /*    useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n            useEffect(() => {\r\n               \r\n                if (!state.StoreModule.selectedStore){\r\n                    toast({\r\n                        message: 'kindly select a store',\r\n                        type: 'is-danger',\r\n                        dismissible: true,\r\n                        pauseOnHover: true,\r\n                      }) \r\n                      return\r\n                    getFacilities()\r\n\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductEntryServ.on('created', (obj)=>getFacilities())\r\n                ProductEntryServ.on('updated', (obj)=>getFacilities())\r\n                ProductEntryServ.on('patched', (obj)=>getFacilities())\r\n                ProductEntryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                console.log(\"store changed\")\r\n                return () => {\r\n                   \r\n                }\r\n            }, [state.StoreModule.selectedStore])\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {state.StoreModule.selectedStore?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search ProductEntry\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Product Exits </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th>Client</th>\r\n                                        <th><abbr title=\"Document No\">Document No</abbr></th>\r\n                                        <th><abbr title=\"Total Amount\">Total Amount</abbr></th>\r\n                                        <th><abbr title=\"Enteredby\">Entered By</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{ProductEntry.date}</td>\r\n                                            <th>{ProductEntry.type}</th>\r\n                                            <td>{ProductEntry.source}</td>\r\n                                            <td>{ProductEntry.documentNo}</td>\r\n                                            <td>{ProductEntry.totalamount}</td>\r\n                                            <td>{ProductEntry.enteredby}</td>\r\n                                            <td><span className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading... Choose a Store</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductExitDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductExitModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                    <th><abbr title=\"Amount\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.sellingprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductExitModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductExitModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductExitModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InventorySearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('inventory')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n   const {user} = useContext(UserContext) \r\n   const {state}=useContext(ObjectContext)\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n    }\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 facility: user.currentEmployee.facilityDetail._id,\r\n                 storeId: state.StoreModule.selectedStore._id,\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small  is-expanded\" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu expanded\" style={{width:\"100%\"}}>\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" /* onClick={handleAddproduct} */> <span> {val} is not in your inventory</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <div><span>{facility.name}</span></div>\r\n                                        <div><span><strong>{facility.quantity}</strong></span>\r\n                                        <span>{facility.baseunit}(s) remaining</span>\r\n                                        <span className=\"padleft\"><strong>Price:</strong> N{facility.sellingprice}</span></div>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        <ProductCreate />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FacilityModule.js",["565"],"import React from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink} from 'react-router-dom'\r\nimport CareTeam from './facility/CareTeam'\r\nimport Department from './facility/Department'\r\nimport DeptUnits from './facility/DeptUnits'\r\nimport FacilityHome from './facility/FacilityHome'\r\nimport Employee from './facility/Employee'\r\nimport Facility from './facility/Facility'\r\nimport HSModules from './facility/HSModules'\r\nimport Location from './facility/Location'\r\nimport Roaster from './facility/Roaster'\r\nimport Workspace from './facility/Workspace'\r\nimport Accessibility from './facility/Accessibility'\r\n\r\nexport default function FacilityModule() {\r\n    let { path, url } = useRouteMatch();\r\n    return (\r\n            <section className=\"section has-background-info remPad\">\r\n               {/*  <div className=\"\"> */}\r\n                    <nav className=\"navbar minHt z10 has-background-info\">\r\n                        <div className=\"container minHt \">\r\n                            <div className=\"navbar-brand minHt \">\r\n                                <div className=\"navbar-item \">\r\n                                    <span className=\"is-size-6 has-text-weight-medium\">Health Stack::Facility</span> \r\n                                </div>\r\n                            {/* <div className=\"navbar-item\">\r\n                                <img src=\"https://bulma.io/images/bulma-type-white.png\" alt=\"Logo\" />\r\n                            </div> */}\r\n                                <span className=\"navbar-burger\" data-target=\"navbarMenuHeroB\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </span>\r\n                            </div>\r\n                            <div id=\"navbarMenuHeroB\" className=\"navbar-menu\">\r\n                                <div className=\"navbar-end\">\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}`}>Home Page</NavLink> \r\n                                    </div>\r\n                                      {/*  <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/accessibility`}>User Access</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/careteam`}>Care Teams</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/department`}>Department</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/dept-unit`}>Department Units</NavLink>\r\n                                    </div> \r\n                                     <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/hsmodules`}>Modules</NavLink>\r\n                                    </div>*/}\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/employees`}>Employees</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/location`}>Locations</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/facility`}>Facility</NavLink>\r\n                                    </div>\r\n                                    {/* <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/roaster`}>Roaster</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/workspace`}>Workspace</NavLink>\r\n                                    </div> */}\r\n                                    \r\n                                {/* <span className=\"navbar-item\">\r\n                                <div className=\"button is-info is-inverted\">\r\n                                    <span className=\"icon\">\r\n                                    <i className=\"fab fa-github\"></i>\r\n                                    </span>\r\n                                    <span>Download</span>\r\n                                </div>\r\n                                </span> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n               {/*  </div> */}\r\n                \r\n                {/* <div className=\"section\"> */}\r\n                {/* <div className=\"container mvUp \" > */}\r\n                       \r\n                    <Switch>\r\n                        <Route path={path} exact>\r\n                            <FacilityHome />\r\n                        </Route>\r\n                        <Route path={`${path}/accessibility`} exact >\r\n                            <Accessibility />\r\n                        </Route>\r\n                      \r\n                        <Route path={`${path}/careteam`} exact>\r\n                            <CareTeam />\r\n                        </Route>\r\n                        <Route path={`${path}/department`} exact>\r\n                            <Department/>\r\n                        </Route>\r\n                        <Route path={`${path}/dept-unit`} exact>\r\n                            <DeptUnits />\r\n                        </Route>\r\n                        <Route path={`${path}/employees`} >\r\n                            <Employee />\r\n                        </Route>\r\n                        <Route path={`${path}/facility`} exact >\r\n                            <Facility />\r\n                        </Route>\r\n                        <Route path={`${path}/hsmodules`} exact>\r\n                            <HSModules />\r\n                        </Route>\r\n                        <Route path={`${path}/location`} exact>\r\n                            <Location/>\r\n                        </Route>\r\n                        <Route path={`${path}/roaster`} exact>\r\n                            <Roaster/>\r\n                        </Route>\r\n                        <Route path={`${path}/Workspace`} exact>\r\n                            <Workspace />\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                  \r\n\r\n                \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Facility.js",["566"],"import React, {useState,useContext, useEffect} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\n\r\nexport default function Facility() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedFacility,setSelectedFacility]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    //console.log(\"facility parent\", state)\r\n    \r\n\r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Facility  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <FacilityList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.facilityModule.show ==='create')&&<FacilityCreate />}\r\n                {(state.facilityModule.show ==='detail')&&<FacilityDetail  />}\r\n                {(state.facilityModule.show ==='modify')&&<FacilityModify facility={selectedFacility} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function FacilityCreate(){\r\n    const { register, handleSubmit} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n\r\n    \r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n                setMessage(\"Created facility successfully\")\r\n                setSuccess(true)\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Facility\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function FacilityList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const facilityServ=client.service('facility')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedFacility, setSelectedFacility]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n\r\n   \r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(facility)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",facility)\r\n\r\n        await setSelectedFacility(facility)\r\n\r\n        const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='facilityName'\r\n       console.log(val)\r\n       facilityServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" facility  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n\r\n           /*  if (val.length>2){\r\n                console.log(\"in\")\r\n               \r\n            }\r\n\r\n        }\r\n     */\r\n        const getFacilities=()=>{\r\n            facilityServ.find({query: {\r\n              \r\n                $limit:20,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }})\r\n            .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" facility  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                    setError(true)\r\n                })\r\n\r\n        }\r\n\r\n    useEffect(() => {\r\n        getFacilities()\r\n\r\n        facilityServ.on('created', (obj)=>getFacilities())\r\n        facilityServ.on('updated', (obj)=>getFacilities())\r\n        facilityServ.on('patched', (obj)=>getFacilities())\r\n        facilityServ.on('removed', (obj)=>getFacilities())\r\n        return () => {\r\n           \r\n        }\r\n    },[])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n            <>   \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Facilities </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"S/No\">S/No</abbr></th>\r\n                                        <th>Facility Name</th>\r\n                                        <th><abbr title=\"Address\"> Address</abbr></th>\r\n                                        <th><abbr title=\"City\">City</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th><abbr title=\"Category\">Category</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((facility, i)=>(\r\n\r\n                                            <tr key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{facility.facilityName}</th>\r\n                                            <td>{facility.facilityAddress}</td>\r\n                                            <td>{facility.facilityCity}</td>\r\n                                            <td>{facility.facilityContactPhone}</td>\r\n                                            <td>{facility.facilityEmail}</td>\r\n                                            <td>{facility.facilityType}</td>\r\n                                            <td>{facility.facilityCategory}</td>\r\n                                           \r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>               \r\n            </>\r\n              \r\n    )\r\n}\r\n\r\nexport function FacilityDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const facility =state.facilityModule.selectedFacility \r\n\r\n    const handleEdit= async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Facility Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <fieldset>\r\n                <div className=\"field \">\r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: <span className=\"is-small \"   name=\"facilityName\"> {facility.facilityName} </span>\r\n                        </label>\r\n                \r\n                        \r\n             \r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Address:\r\n                   \r\n                    <span className=\"is-small \"  name=\"facilityAddress\">{facility.facilityAddress} </span> \r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>City: \r\n                \r\n                    <span className=\"is-small \"  name=\"facilityCity\">{facility.facilityCity}</span> \r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    <span className=\"is-small \"  name=\"facilityContactPhone\" >{facility.facilityContactPhone}</span>\r\n                        </label>\r\n \r\n                \r\n                \r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     <span className=\"is-small \"  name=\"facilityEmail\" >{facility.facilityEmail}</span>\r\n                    \r\n                         </label>\r\n\r\n               \r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>CEO:\r\n                    <span className=\"is-small \"  name=\"facilityOwner\">{facility.facilityOwner}</span>\r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Type:              \r\n                    <span className=\"is-small \"  name=\"facilityType\">{facility.facilityType}</span>\r\n                </label>\r\n \r\n                </div>\r\n            <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-small \"  name= \"facilityCategory\">{facility.facilityCategory}</span>\r\n                </label>\r\n\r\n\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </fieldset>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function FacilityModify(){\r\n    const { register, handleSubmit, setValue,reset } = useForm(); //watch, errors,\r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const facility =state.facilityModule.selectedFacility \r\n\r\n        useEffect(() => {\r\n            setValue(\"facilityName\", facility.facilityName,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityAddress\", facility.facilityAddress,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityCity\", facility.facilityCity,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityContactPhone\", facility.facilityContactPhone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityEmail\", facility.facilityEmail,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityOwner\", facility.facilityOwner,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityType\", facility.facilityType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityCategory\", facility.facilityCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newfacilityModule={\r\n        selectedFacility:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=facility._id\r\n        if (conf){\r\n             \r\n        facilityServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n                setMessage(\"Deleted facility successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200);\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error deleting facility, probable network issues \"+ err )\r\n                setError(true)\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 200);\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        console.log(data)\r\n          //data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.update(facility._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n                setMessage(\"updated facility successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Facility Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\">Name \r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Address\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">City\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">CEO\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Type\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div>\r\n            <div className=\"field  is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={handleDelete}>\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   ","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Location.js",["567","568","569","570"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\FinanceSetup.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Products.js",["571","572","573","574","575","576","577"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Product() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProduct,setSelectedProduct]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Product  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <ProductList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.ProductModule.show ==='create')&&<ProductCreate />}\r\n                {(state.ProductModule.show ==='detail')&&<ProductDetail  />}\r\n                {(state.ProductModule.show ==='modify')&&<ProductModify Product={selectedProduct} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductServ=client.service('products')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeProduct.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n        // data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        ProductServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Product successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Product created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Product ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Product\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            <p className=\" is-small\">\r\n                    Kindly search product list before creating new products!\r\n                </p>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"category\" type=\"text\" placeholder=\"Category of Product\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Product\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"baseunit\" type=\"text\" placeholder=\"Base unit of product\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n             {/*<div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n          {/*  <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductServ=client.service('products')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProduct, setSelectedProduct]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductModule={\r\n            selectedProduct:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductModule:newProductModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Product)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Product)\r\n\r\n        await setSelectedProduct(Product)\r\n\r\n        const    newProductModule={\r\n            selectedProduct:Product,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductModule:newProductModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n              // facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Product  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Product, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProduct= await ProductServ.find(\r\n                {query: {\r\n                   // facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProduct.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findProduct= await ProductServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProduct.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Product  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Product, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductServ.on('created', (obj)=>getFacilities())\r\n                ProductServ.on('updated', (obj)=>getFacilities())\r\n                ProductServ.on('patched', (obj)=>getFacilities())\r\n                ProductServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Products\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Products </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        \r\n                                       <th><abbr title=\"Base Unit\">Base Unit</abbr></th>\r\n                                         {/* <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                        <th><abbr title=\"Facility\">facility</abbr></th>*/}\r\n                                        <th><abbr title=\"Last Name\">Product Category</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Product, i)=>(\r\n\r\n                                            <tr key={Product._id} onClick={()=>handleRow(Product)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Product.name}</th>\r\n                                            <td>{Product.baseunit}</td>\r\n                                           < td>{Product.category}</td>\r\n                                             {/*<td>{Product.phone}</td>\r\n                                            <td>{Product.email}</td>\r\n                                            <td>{Product.department}</td>\r\n                                            <td>{Product.deptunit}</td> \r\n                                            <td>{Product.facility}</td>*/}\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductServ=client.service('/Product')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Product =state.ProductModule.selectedProduct \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductModule={\r\n            selectedProduct:Product,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductModule:newProductModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Product Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {Product.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Base Unit:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"ProductType\">{Product.baseunit} </span> \r\n                    </td>\r\n                </tr>\r\n                   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Product Category: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductCity\">{Product.category}</span> \r\n                </td>\r\n                </tr>\r\n             {/*         <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductContactPhone\" >{Product.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEmail\" >{Product.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductOwner\">{Product.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductType\">{Product.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductCategory\">{Product.ProductCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductServ=client.service('products')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Product =state.ProductModule.selectedProduct \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", Product.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"baseunit\", Product.baseunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"category\", Product.category,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /* setValue(\"phone\", Product.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Product.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Product.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Product.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductCategory\", Product.ProductCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductModule={\r\n        selectedProduct:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductModule:newProductModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductModule={\r\n            selectedProduct:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductModule:newProductModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Product._id\r\n        if (conf){\r\n             \r\n        ProductServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Product successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Product deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Product, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Product, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n       // console.log(data)\r\n      //  data.facility=Product.facility\r\n          //console.log(data);\r\n          \r\n        ProductServ.patch(Product._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Product successfully\")\r\n                 toast({\r\n                    message: 'Product updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Product, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Product, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Product Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Base Unit\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })}  name=\"baseunit\" type=\"text\" placeholder=\"Base Unit\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Product Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  disabled name=\"category\" type=\"text\" placeholder=\"Product Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n             {/*<div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Product Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductCategory\" type=\"text\" placeholder=\"Product Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    const ProductServ=client.service('products')\r\n   // const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            ProductServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicHome.js",["578","579","580","581","582","583"],"import React ,{useState,useEffect,useContext} from 'react'\r\nimport Store, { StoreList } from './Clinic'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\nexport default function InventoryHome() {\r\n   // const [activeModal, setActiveModal]=useState(\"modal is-active \")\r\n    const {state,setState}=useContext(ObjectContext)\r\n    const handleCloseModal=()=>{\r\n        state.showStoreModal  =  \"modal\"                                                                                                                                                        \r\n        setState(state)\r\n        console.log( state.showStoreModal)\r\n    }\r\n    \r\n       \r\n \r\n    return (\r\n       \r\n            <section className= \"section remPadTop\">\r\n              {/*  <div className=\"is-1\"> Appointment sdchedule for patients for this clinic</div>\r\n               <div className=\"is-1\"> Communication Command Center</div>     */}  \r\n               <section className=\"hero is-info is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                    <h1 className=\"title\">\r\n                      Clinic Module\r\n                    </h1>\r\n                    <h2 className=\"subtitle\">\r\n                        Have fun working today!\r\n                    </h2>\r\n                    </div>\r\n                </div>\r\n            </section>                  \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Appointments.js",["584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink, useHistory} from 'react-router-dom'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport { formatDistanceToNowStrict, format } from 'date-fns'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Appointments() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedClient,setSelectedClient]=useState()\r\n    const [selectedAppointment,setSelectedAppointment]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n            <div className=\"columns \">\r\n           \r\n            <div className=\"column is-8 \">\r\n                <ClientList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.AppointmentModule.show ==='create')&&<AppointmentCreate />}\r\n                {(state.AppointmentModule.show ==='detail')&&<ClientDetail  />}\r\n                {(state.AppointmentModule.show ==='modify')&&<ClientModify Client={selectedClient} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function AppointmentCreate(){\r\n    const {state,setState}=useContext(ObjectContext) \r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const [clientId,setClientId] = useState()\r\n    const [type,setType] = useState()\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('appointments')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [selectedClient,setSelectedClient]=useState()\r\n    const [selectedAppointment,setSelectedAppointment]=useState()\r\n   // const [appointment_reason,setAppointment_reason]= useState()\r\n    const [appointment_status,setAppointment_status]=useState(\"\")\r\n    const [appointment_type, setAppointment_type]=useState(\"\")\r\n    const [chosen, setChosen]=useState()\r\n\r\n\r\n   /*  const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    } */\r\n    const handleChangeType=async (e)=>{\r\n        await setAppointment_type(e.target.value)\r\n    }\r\n\r\n    const handleChangeStatus=async (e)=>{\r\n        await setAppointment_status(e.target.value)\r\n    }\r\n\r\n    const getSearchfacility=(obj)=>{\r\n\r\n       setClientId(obj._id)\r\n       setChosen(obj)\r\n       \r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setClientId()\r\n            setChosen()\r\n           \r\n        }\r\n    \r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n          data.locationId=state.ClinicModule.selectedClinic._id\r\n          data.appointment_type=appointment_type\r\n         // data.appointment_reason=appointment_reason\r\n          data.appointment_status=appointment_status\r\n          data.clientId=clientId\r\n          data.firstname=chosen.firstname\r\n            data.middlename=chosen.middlename\r\n            data.lastname=chosen.lastname\r\n            data.dob=chosen.dob\r\n            data.gender=chosen.gender\r\n            data.phone=chosen.phone\r\n            data.email=chosen.email\r\n          data.actions=[{\r\n              action:appointment_status,\r\n              actor:user.currentEmployee._id\r\n          }]\r\n\r\n        ClientServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               setAppointment_type(\"\")\r\n               setAppointment_status(\"\")\r\n               setClientId(\"\")\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Appointment created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Appointment ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            \r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Client\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           {/*  <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p> */}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <input name=\"start_time\" ref={register ({ required: true })} type=\"datetime-local\" />\r\n           \r\n            <label className=\"label is-small\">Client:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <ClientSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\"  /* ref={register ({ required: true }) } */  /* add array no */  value={clientId} name=\"ClientId\" type=\"text\" onChange={e=>setClientId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                 {/* {sellingprice &&   \"N\"}{sellingprice} {sellingprice &&   \"per\"}  {baseunit} {invquantity} {sellingprice &&   \"remaining\"}  */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType}>\r\n                           <option value=\"\">Choose Appointment Type  </option>\r\n                            <option value=\"New\">New</option>\r\n                            <option value=\"Followup\">Followup</option>\r\n                            <option value=\"Readmission with 24hrs\">Readmission with 24hrs</option>\r\n                            <option value=\"Annual Checkup\">Annual Checkup</option>\r\n                            <option value=\"Walk in\">Walk-in</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"appointment_status\" value={appointment_status} onChange={handleChangeStatus}>\r\n                           <option value=\"\">Appointment Status  </option>\r\n                            <option value=\"Scheduled\">Scheduled</option>\r\n                            <option value=\"Confirmed\">Confirmed</option>\r\n                            <option value=\"Checked In\">Checked In</option>\r\n                            <option value=\"Vitals Taken\">Vitals Taken</option>\r\n                            <option value=\"With Nurse\">With Nurse</option>\r\n                            <option value=\"With Doctor\">With Doctor</option>\r\n                            <option value=\"No Show\">No Show</option>\r\n                            <option value=\"Cancelled\">Cancelled</option>\r\n                            <option value=\"Billed\">Billed</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left has-icons-right\">\r\n                <input className=\"input is-small\" ref={register()}  name=\"appointment_reason\" type=\"text\" placeholder=\"Reason For Appointment\" />\r\n                <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital\"></i>\r\n                </span>                    \r\n            </p>\r\n        </div>\r\n        <div className=\"field \" style={{display:\"none\"}} >\r\n            <p className=\"control has-icons-left has-icons-right\">\r\n                <input className=\"input is-small\" ref={register()}  name=\"billingservice\" type=\"text\" placeholder=\"Billing service\" />\r\n                <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital\"></i>\r\n                </span>                    \r\n            </p>\r\n        </div>\r\n           \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 {/*  <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n         {/*   <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ClientList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ClientServ=client.service('appointments')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedClient, setSelectedClient]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n    \r\n    const [selectedAppointment,setSelectedAppointment]=useState()\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const newClientModule={\r\n            selectedAppointment:{},\r\n            show :'create'\r\n            }\r\n        await setState((prevstate)=>({...prevstate, AppointmentModule:newClientModule}))\r\n       //console.log(state)\r\n        } \r\n\r\n    \r\n    const handleRow= async(Client)=>{\r\n        await setSelectedAppointment(Client)\r\n        const    newClientModule={\r\n            selectedAppointment:Client,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, AppointmentModule:newClientModule}))\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='firstname'\r\n       console.log(val)\r\n       ClientServ.find({query: {\r\n                $or:[\r\n                    { firstname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { lastname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { middlename: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { phone: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { clientTags: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { mrn: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { specificDetails: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                ],\r\n              \r\n              facility:user.currentEmployee.facilityDetail._id, // || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Client  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Client, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n    const getFacilities= async()=>{\r\n            if (user.currentEmployee){      \r\n            const findClient= await ClientServ.find(\r\n                {query: {\r\n                   // facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findClient.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findClient= await ClientServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findClient.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Client  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Client, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n    /* useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n    useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ClientServ.on('created', (obj)=>getFacilities())\r\n                ClientServ.on('updated', (obj)=>getFacilities())\r\n                ClientServ.on('patched', (obj)=>getFacilities())\r\n                ClientServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Appointments\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Appointments </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Time\">Date/Time</abbr></th>\r\n                                        <th>First Name</th>\r\n                                        <th><abbr title=\"Middle Name\">Middle Name</abbr></th>\r\n                                       <th><abbr title=\"Last Name\">Last Name</abbr></th>\r\n                                       <th><abbr title=\"Age\">Age</abbr></th>\r\n                                        <th><abbr title=\"Gender\">Gender</abbr></th> \r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                        <th><abbr title=\"Reason\">Reason</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Client, i)=>(\r\n\r\n                                            <tr key={Client._id} onClick={()=>handleRow(Client)}  className={Client._id===(selectedAppointment?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <td><strong>{format(new Date(Client.start_time),\"dd-MM-yy HH:mm:ss\")}</strong></td>\r\n                                            <th>{Client.firstname}</th>\r\n                                            <td>{Client.middlename}</td>\r\n                                           < td>{Client.lastname}</td>\r\n                                           < td>{formatDistanceToNowStrict(new Date(Client.dob))}</td>\r\n                                            <td>{Client.gender}</td>\r\n                                             <td>{Client.phone}</td>\r\n                                            <td>{Client.email}</td>\r\n                                            <td>{Client.appointment_type}</td>\r\n                                            <td>{Client.appointment_status}</td>\r\n                                            <td>{Client.appointment_reason}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\n\r\nexport function ClientDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const history =useHistory()\r\n    let { path, url } = useRouteMatch();\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ClientServ=client.service('/Client')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const [selectedClient,setSelectedClient]=useState()\r\n    const [selectedAppointment,setSelectedAppointment]=useState()\r\n\r\n   \r\n\r\n   const Client =state.AppointmentModule.selectedAppointment \r\n    //const client=Client\r\n    const handleEdit= async()=>{\r\n        const    newClientModule={\r\n            selectedAppointment:Client,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, AppointmentModule:newClientModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n    const handleAttend=async()=>{\r\n        \r\n        const patient = await client.service('client').get(Client.clientId)\r\n        await setSelectedClient(patient)\r\n        const    newClientModule={\r\n            selectedClient:patient, \r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n        history.push('/app/clinic/encounter')\r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Client Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.firstname &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <label className=\"label is-size-7 my-0 \"   name=\"firstname\" type=\"text\">First Name </label><label className=\"is-size-7 my-0 \">{Client.firstname }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>}\r\n\r\n\r\n                    {Client.middlename &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <label className=\"label is-size-7 my-0\"   name=\"middlename\" type=\"text\"> Middle Name </label><label className=\"is-size-7 my-0\">{Client.middlename }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>}\r\n             {Client.lastname &&\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"lastname\" type=\"text\">Last Name</label><label className=\"is-size-7 my-0\">{Client.lastname }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" nop-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                </div>  \r\n                </div>\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.dob &&<div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"dob\" type=\"text\">Date of Birth </label><label className=\"is-size-7 my-0\">{ new Date(Client.dob).toLocaleDateString('en-GB')}</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.gender &&<div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"gender\" type=\"text\">Gender </label><label className=\"is-size-7 my-0\">{Client.gender }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.maritalstatus && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"maritalstatus\" type=\"text\">Marital Status </label><label className=\"is-size-7 my-0\">{Client.maritalstatus }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.mrn && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"mrn\" type=\"text\">Medical Records Number  </label><label className=\"is-size-7 my-0\">{Client.mrn }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                </div>\r\n                </div>\r\n                <div className=\"field is-horizontal\">\r\n                    <div className=\"field-body\">\r\n                    {Client.religion && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"religion\" type=\"text\">Religion  </label><label className=\"is-size-7 my-0\">{Client.religion }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.profession &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"profession\" type=\"text\">Profession  </label><label className=\"is-size-7 my-0\">{Client.profession }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.phone &&<div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                            <label className=\"label is-size-7 my-0\"  name=\"phone\" type=\"text\"> Phone No</label><label className=\"is-size-7 my-0\">{Client.phone }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-phone-alt\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n\r\n                    {Client.email && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"email\" type=\"email\">Email  </label><label className=\"is-size-7 my-0\">{Client.email }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    </div>\r\n                </div>\r\n\r\n                {Client.address &&<div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n\r\n                    <label className=\"label is-size-7 my-0\"  name=\"address\" type=\"text\">Residential Address  </label><label className=\"is-size-7 my-0\">{Client.address }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div>} \r\n                <div className=\"field is-horizontal\">\r\n                    <div className=\"field-body\">\r\n                        {Client.city && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                            \r\n                                <label className=\"label is-size-7 my-0\"  name=\"city\" type=\"text\">Town/City  </label><label className=\"is-size-7 my-0\">{Client.city }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.lga && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                            \r\n                                <label className=\"label is-size-7 my-0\"  name=\"lga\" type=\"text\">Local Govt Area  </label><label className=\"is-size-7 my-0\">{Client.lga }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.state && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                                <label className=\"label is-size-7 my-0\"  name=\"state\" type=\"text\">State  </label><label className=\"is-size-7 my-0\">{Client.state }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.country &&<div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"country\" type=\"text\">Country  </label><label className=\"is-size-7 my-0\">{Client.country }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n                    </div>\r\n                </div> \r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                     {Client.bloodgroup &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"bloodgroup\" type=\"text\">Blood Group </label><label className=\"is-size-7 my-0\">{Client.bloodgroup }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n                   \r\n                    {Client.genotype && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"genotype\" type=\"text\">Genotype  </label><label className=\"is-size-7 my-0\">{Client.genotype }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.disabilities && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"disabilities\" type=\"text\">Disabilities  </label><label className=\"is-size-7 my-0\">{Client.disabilities }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                </div> \r\n                </div>  \r\n\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n\r\n                {Client.allergies && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"allergies\" type=\"text\">Allergies  </label><label className=\"is-size-7 my-0\">{Client.allergies }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.comorbidities && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"comorbidities\" type=\"text\">Co-mobidities  </label><label className=\"is-size-7 my-0\">{Client.comorbidities }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                </div>\r\n                </div>\r\n               {Client.clientTags && <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n\r\n                    <label className=\"label is-size-7 my-0\"  name=\"clientTags\" type=\"text\">Tags </label><label className=\"is-size-7 my-0\">{Client.clientTags }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div> }\r\n                {Client.specificDetails && <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <label className=\"label is-size-7 my-0\"  name=\"specificDetails\" type=\"text\">Specific Details about Client </label><label className=\"is-size-7 my-0\">{Client.specificDetails }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div> }\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.nok_name && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_name\" type=\"text\">Next of Kin Full Name</label><label className=\"is-size-7 my-0\">{Client.nok_name }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                {Client.nok_phoneno && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_phoneno\" type=\"text\">Next of Kin Phone Number</label><label className=\"is-size-7 my-0\">{Client.nok_phoneno }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.nok_email && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_email\" type=\"email\">Next of Kin Email </label><label className=\"is-size-7 my-0\">{Client.nok_email }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                {Client.nok_relationship && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_relationship\" type=\"text\">Next of Kin Relationship\"  </label><label className=\"is-size-7 my-0\">{Client.nok_relationship }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                </div>\r\n                </div> \r\n            <div className=\"field is-grouped  mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit Details\r\n                    </button>\r\n                </p>\r\n              {/*   <p className=\"control\">\r\n                    <button className=\"button is-info is-small\" >\r\n                        Financial Info\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" >\r\n                        Schedule appointment\r\n                    </button>\r\n                </p> */}\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" >\r\n                        Check into Clinic \r\n                    </button>\r\n                </p> */}\r\n                <p className=\"control\">\r\n                    <button className=\"button is-link is-small\" onClick={()=>handleAttend()} >\r\n                        Attend to Client\r\n                    </button>\r\n                </p>\r\n\r\n            </div>\r\n            \r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ClientModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ClientServ=client.service('client')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const [selectedClient,setSelectedClient]=useState()\r\n    const [selectedAppointment,setSelectedAppointment]=useState()\r\n\r\n    const Client =state.AppointmentModule.selectedAppointment\r\n\r\n        useEffect(() => {\r\n            setValue(\"firstname\", Client.firstname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"middlename\", Client.middlename,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"lastname\", Client.lastname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Client.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Client.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"dob\", Client.dob,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"gender\", Client.gender,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"profession\", Client.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n            setValue(\"address\", Client.address,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"city\", Client.city,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"state\", Client.state,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"country\", Client.country,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_name\", Client.nok_name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_email\", Client.nok_email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_phoneno\", Client.nokphoneno,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"lga\", Client.lga,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n            setValue(\"bloodgroup\", Client.bloodgroup,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"genotype\", Client.genotype,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"disabilities\", Client.disabilities,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"specificDetails\", Client.specificDetails,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"clientTags\", Client.clientTags,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"mrn\", Client.mrn,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"comorbidities\", Client.comorbidities,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"allergies\", Client.allergies,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n           \r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newClientModule={\r\n        selectedAppointment:{},\r\n        show :'create'\r\n      }\r\n         await setState((prevstate)=>({...prevstate, AppointmentModule:newClientModule}))\r\n            //console.log(state)\r\n           }\r\n\r\n\r\n    const changeState =()=>{\r\n        const    newClientModule={\r\n            selectedAppointment:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, AppointmentModule:newClientModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Client._id\r\n        if (conf){\r\n             \r\n        ClientServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Client successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Client deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Client, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Client, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n       // console.log(data)\r\n      //  data.facility=Client.facility\r\n          //console.log(data);\r\n          \r\n        ClientServ.patch(Client._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Client successfully\")\r\n                 toast({\r\n                    message: 'Client updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Client, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Client, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Client Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <label className=\"label is-size-7\"   >First Name </label> <input className=\"input is-small\" ref={register()} name=\"firstname\" type=\"text\"placeholder=\"First Name \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-hospital\"></i>\r\n                    </span>                    \r\n                </p>\r\n            </div>\r\n\r\n\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                <label className=\"label is-size-7\"   > Middle Name </label><input className=\"input is-small\" ref={register()} name=\"middlename\" type=\"text\" placeholder=\"Middle Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-map-signs\"></i>\r\n                </span>\r\n                \r\n                </p>\r\n            </div>\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  >Last Name</label><input className=\"input is-small\" ref={register()} name=\"lastname\" type=\"text\"placeholder=\"Last Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\" nop-user-md \"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>  \r\n        </div>\r\n        \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Date of Birth  </label><input className=\"input is-small\" ref={register()} name=\"dob\" type=\"text\"placeholder=\"Date of Birth \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Gender  </label><input className=\"input is-small\" ref={register()} name=\"gender\" type=\"text\"placeholder=\"Gender  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Marital Status  </label><input className=\"input is-small\" ref={register()} name=\"maritalstatus\" type=\"text\"placeholder=\"Marital Status  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  > Records Number </label><input className=\"input is-small\" ref={register()} name=\"mrn\" type=\"text\"placeholder=\"Records Number  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Religion</label><input className=\"input is-small\" ref={register()} name=\"religion\" type=\"text\"placeholder=\"Religion \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Profession  </label><input className=\"input is-small\" ref={register()} name=\"profession\" type=\"text\" placeholder=\"Profession\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  > Phone No</label><input className=\"input is-small\" ref={register()} name=\"phone\" type=\"text\" placeholder=\" Phone No \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-phone-alt\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Email  </label><input className=\"input is-small\" ref={register()} name=\"email\" type=\"email\"placeholder=\"Email  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n\r\n            <label className=\"label is-size-7\"  >Residential Address  </label><input className=\"input is-small\" ref={register()} name=\"address\" type=\"text\" placeholder=\"Residential Address  \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Town/City  </label><input className=\"input is-small\" ref={register()} name=\"city\" type=\"text\" placeholder=\"Town/City  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Local Govt Area  </label><input className=\"input is-small\" ref={register()} name=\"lga\" type=\"text\"placeholder=\"Local Govt Area  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >State  </label><input className=\"input is-small\" ref={register()} name=\"state\" type=\"text\"placeholder=\"State\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Country  </label><input className=\"input is-small\" ref={register()} name=\"country\" type=\"text\" placeholder=\"Country  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\"  >Blood Group </label><input className=\"input is-small\" ref={register()} name=\"bloodgroup\" type=\"text\"placeholder=\"Blood Group \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\"  >Genotype  </label><input className=\"input is-small\" ref={register()} name=\"genotype\" type=\"text\" placeholder=\"Genotype \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\" >Disabilities  </label><input className=\"input is-small\" ref={register()}  name=\"disabilities\" type=\"text\"placeholder=\"Disabilities  \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n        </div> \r\n        </div>  \r\n\r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Allergies  </label><input className=\"input is-small\" ref={register()} name=\"allergies\" type=\"text\"placeholder=\"Allergies  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Co-mobidities </label><input className=\"input is-small\" ref={register()} name=\"comorbidities\" type=\"text\"placeholder=\"Co-mobidities \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n\r\n            <label className=\"label is-size-7\"  >Tags  </label><input className=\"input is-small\" ref={register()} name=\"clientTags\" type=\"text\" placeholder=\"Tags \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n            <label className=\"label is-size-7\"  >Specific Details about client  </label><input className=\"input is-small\" ref={register()} name=\"specificDetails\" type=\"text\"placeholder=\"Specific Details about client \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  >Next of Kin Full Name</label><input className=\"input is-small\" ref={register()} name=\"nok_name\" type=\"text\"placeholder=\"Next of Kin Full Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-clinic-medical\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\" >Phone Number</label><input className=\"input is-small\" ref={register()}  name=\"nok_phoneno\" type=\"text\"placeholder=\" \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-clinic-medical\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Next of Kin Email  </label><input className=\"input is-small\" ref={register()} name=\"nok_email\" type=\"email\"placeholder=\"Next of Kin Email  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  > Relationship  </label><input className=\"input is-small\" ref={register()} name=\"nok_relationship\" type=\"text\" placeholder=\"Next of Kin Relationship\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>\r\n        </div> \r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ClientSearch({getSearchfacility,clear}) {\r\n    \r\n    const ClientServ=client.service('client')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n   const {user} = useContext(UserContext) \r\n   const {state}=useContext(ObjectContext)\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.firstname + \" \"+ obj.middlename+ \" \"+obj.lastname + \" \"+obj.gender+\" \"+obj.phone )\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n    }\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        setVal(val)\r\n        if (val===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (val.length>=3 ){\r\n            ClientServ.find({query: {\r\n                $or:[\r\n                    { firstname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { lastname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { middlename: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { phone: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { clientTags: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { mrn: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { specificDetails: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                ],\r\n              \r\n                 //facility: user.currentEmployee.facilityDetail._id,\r\n                 //storeId: state.StoreModule.selectedStore._id,\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small  is-expanded mb-0\" \r\n                                type=\"text\" placeholder=\"Search for Client\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu expanded\" style={{width:\"100%\"}}>\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" /* onClick={handleAddproduct} */> <span> {val} is not yet your client</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <div><span>{facility.firstname}</span>\r\n                                        <span className=\"padleft\">{facility.middlename}</span>\r\n                                        <span className=\"padleft\">{facility.lastname}</span>\r\n                                        <span className=\"padleft\"> {formatDistanceToNowStrict(new Date(facility.dob))}</span>\r\n                                        <span className=\"padleft\">{facility.gender}</span>\r\n                                        <span className=\"padleft\">{facility.profession}</span>\r\n                                        <span className=\"padleft\">{facility.phone}</span>\r\n                                        <span className=\"padleft\">{facility.email}</span>\r\n                                        </div>\r\n                                       \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        {/* <ProductCreate /> */}\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FinanceModule.js",["618","619","620","621","622","623","624","625","626","627","628"],"import React,{useState,useContext,useEffect} from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink} from 'react-router-dom'\r\nimport FinanceReport from './Finance/FinanceReport'\r\nimport FinanceSetup from './Finance/FinanceSetup'\r\nimport Collections from './Finance/Collections'\r\nimport FinanceHome from './Finance/FinanceHome'\r\nimport ProductEntry from './Finance/Services'\r\nimport ProductExit from './Finance/ProductExit'\r\nimport Payment from './Finance/Payment'\r\nimport Products from './Finance/Products'\r\nimport Store, { StoreList, StoreListStandalone } from './Finance/Store'\r\nimport {UserContext,ObjectContext} from '../context'\r\nimport BillPrescription from './Finance/BillPrescription'\r\nimport Services from './Finance/Services'\r\n\r\nexport default function FinanceModule() {\r\n    const {state,setState}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedStore,setSelectedStore]=useState()\r\n    const [showModal,setShowModal]=useState(false)\r\n\r\n    let { path, url } = useRouteMatch();\r\n    \r\n    useEffect(() => {\r\n       \r\n        console.log(\"starting up Finance module\")\r\n        if (!selectedStore){\r\n            handleChangeStore()\r\n\r\n            }\r\n         return () => {       \r\n            }\r\n        }, [])\r\n   \r\n    useEffect(()=>{\r\n     setSelectedStore(state.StoreModule.selectedStore)\r\n\r\n    },[state.StoreModule])\r\n\r\n    const handleChangeStore= async()=>{\r\n        await setShowModal(true)                                                                                                                                                        \r\n        console.log( showModal)\r\n    }\r\n\r\n    return (\r\n            <section className=\"section has-background-info remPad\">\r\n               \r\n               {/*  <div className=\"\"> */}\r\n                    <nav className=\"navbar minHt z10 has-background-info\">\r\n                        <div className=\"container minHt \">\r\n                            <div className=\"navbar-brand minHt\">\r\n                                <div className=\"navbar-item \">\r\n                                    <span className=\"is-size-6 has-text-weight-medium\">\r\n                                        Health Stack::Finance::{selectedStore?selectedStore.name:\"\"}</span>\r\n                                        <button className=\"button is-small is-info selectadd\" onClick={()=>handleChangeStore()}>Change Location</button> \r\n                                </div>\r\n                                \r\n                            {/* <div className=\"navbar-item\">\r\n                                <img src=\"https://bulma.io/images/bulma-type-white.png\" alt=\"Logo\" />\r\n                            </div> */}\r\n                                <span className=\"navbar-burger\" data-target=\"navbarMenuHeroB\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </span>\r\n                            </div>\r\n                            <div id=\"navbarMenuHeroB\" className=\"navbar-menu\">\r\n                                <div className=\"navbar-end\">\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/payment`}>Payment</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/location`}>Finance Locations</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}`}>Home Page</NavLink> \r\n                                    </div>\r\n                                    \r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/collections`}>Collections</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/services`}>Services</NavLink>\r\n                                    </div>\r\n                                    {/* <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-entry`}>Product Entry</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-exit`}>Product Exit</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-products`}>Products</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-reports`}>Reports</NavLink>\r\n                                    </div> */}\r\n                                {/* <span className=\"navbar-item\">\r\n                                <div className=\"button is-info is-inverted\">\r\n                                    <span className=\"icon\">\r\n                                    <i className=\"fab fa-github\"></i>\r\n                                    </span>\r\n                                    <span>Download</span>\r\n                                </div>\r\n                                </span> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                    \r\n               {/*  </div> */}\r\n                \r\n                {/* <div className=\"section\"> */}\r\n                {/* <div className=\"container mvUp \" > */}\r\n                       \r\n                    <Switch>\r\n                        <Route path={path} exact>\r\n                            <FinanceHome />\r\n                        </Route>\r\n                        <Route path={`${path}/payment`} exact >\r\n                            <Payment />\r\n                        </Route>\r\n                        <Route path={`${path}/collections`} exact >\r\n                            <Collections />\r\n                        </Route>\r\n                       <Route path={`${path}/services`} exact >\r\n                            <Services />\r\n                        </Route>\r\n                          {/*<Route path={`${path}/inv-Finance`} exact>\r\n                            <FinanceStore />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-entry`} exact>\r\n                            <ProductEntry />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-exit`} exact>\r\n                            <ProductExit/>\r\n                        </Route>\r\n                        <Route path={`${path}/inv-products`} exact>\r\n                            <Products />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-reports`} exact>\r\n                            <FinanceReport />\r\n                        </Route> */}\r\n                        <Route path={`${path}/location`} exact>\r\n                            <Store />\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                  \r\n\r\n                    <div className={`modal ${showModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Location</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        <StoreListStandalone standalone=\"true\" closeModal={()=>setShowModal(false)} />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>        \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Store.js",["629","630","631","632","633","634"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Store() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedStore,setSelectedStore]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Store  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <StoreList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.StoreModule.show ==='create')&&<StoreCreate />}\r\n                {(state.StoreModule.show ==='detail')&&<StoreDetail  />}\r\n                {(state.StoreModule.show ==='modify')&&<StoreModify Store={selectedStore} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function StoreCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{ // buble-up from inputsearch for creating resource\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeStore.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n          data.locationType=\"Store\"\r\n        StoreServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Store successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Store created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Store ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Location\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n               {/*  <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"StoreType\" type=\"text\" placeholder=\"Type of Store\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div> */}\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Location\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function StoreList({standalone,closeModal}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedStore, setSelectedStore]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newStoreModule={\r\n            selectedStore:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Store)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Store)\r\n\r\n        await setSelectedStore(Store)\r\n\r\n        const    newStoreModule={\r\n            selectedStore:Store,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n       //closeModal()\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       StoreServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                locationType:\"Finance\",\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Store  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Store, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findStore= await StoreServ.find(\r\n                {query: {\r\n                    locationType:\"Finance\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        name: 1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findStore.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findStore= await StoreServ.find(\r\n                            {query: {\r\n                                locationType:\"Finance\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    name: 1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findStore.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Store  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Store, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                StoreServ.on('created', (obj)=>getFacilities())\r\n                StoreServ.on('updated', (obj)=>getFacilities())\r\n                StoreServ.on('patched', (obj)=>getFacilities())\r\n                StoreServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Stores\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Locations </span></div>\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        {/* <th><abbr title=\"Last Name\">Store Type</abbr></th>\r\n                                       <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                         <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>*/}\r\n                                       { !standalone &&  <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Store, i)=>(\r\n\r\n                                            <tr key={Store._id} onClick={()=>handleRow(Store)} className={Store._id===(selectedStore?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Store.name}</th>\r\n                                            {/*<td>{Store.StoreType}</td>\r\n                                            < td>{Store.profession}</td>\r\n                                            <td>{Store.phone}</td>\r\n                                            <td>{Store.email}</td>\r\n                                            <td>{Store.department}</td>\r\n                                            <td>{Store.deptunit}</td> \r\n                                            <td>{Store.facility}</td>*/}\r\n                                          { !standalone &&   <td><span   className=\"showAction\"  >...</span></td>}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\n    export function StoreListStandalone({standalone,closeModal}){\r\n        // const { register, handleSubmit, watch, errors } = useForm();\r\n         // eslint-disable-next-line\r\n         const [error, setError] =useState(false)\r\n          // eslint-disable-next-line\r\n         const [success, setSuccess] =useState(false)\r\n          // eslint-disable-next-line\r\n        const [message, setMessage] = useState(\"\") \r\n         const StoreServ=client.service('location')\r\n         //const history = useHistory()\r\n        // const {user,setUser} = useContext(UserContext)\r\n         const [facilities,setFacilities]=useState([])\r\n          // eslint-disable-next-line\r\n        const [selectedStore, setSelectedStore]=useState() //\r\n         // eslint-disable-next-line\r\n         const {state,setState}=useContext(ObjectContext)\r\n         // eslint-disable-next-line\r\n         const {user,setUser}=useContext(UserContext)\r\n     \r\n     \r\n     \r\n         const handleCreateNew = async()=>{\r\n             const    newStoreModule={\r\n                 selectedStore:{},\r\n                 show :'create'\r\n                 }\r\n            await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n            //console.log(state)\r\n             \r\n     \r\n         }\r\n         const handleRow= async(Store)=>{\r\n             //console.log(\"b4\",state)\r\n     \r\n             //console.log(\"handlerow\",Store)\r\n     \r\n             await setSelectedStore(Store)\r\n     \r\n             const    newStoreModule={\r\n                 selectedStore:Store,\r\n                 show :'detail'\r\n             }\r\n            await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n            //console.log(state)\r\n            closeModal()\r\n     \r\n         }\r\n     \r\n        const handleSearch=(val)=>{\r\n            const field='name'\r\n            console.log(val)\r\n            StoreServ.find({query: {\r\n                     [field]: {\r\n                         $regex:val,\r\n                         $options:'i'\r\n                        \r\n                     },\r\n                    facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                     locationType:\"Finance\",\r\n                    $limit:10,\r\n                     $sort: {\r\n                         name: 1\r\n                       }\r\n                         }}).then((res)=>{\r\n                     console.log(res)\r\n                    setFacilities(res.data)\r\n                     setMessage(\" Store  fetched successfully\")\r\n                     setSuccess(true) \r\n                 })\r\n                 .catch((err)=>{\r\n                     console.log(err)\r\n                     setMessage(\"Error fetching Store, probable network issues \"+ err )\r\n                     setError(true)\r\n                 })\r\n             }\r\n        \r\n             const getFacilities= async()=>{\r\n                 if (user.currentEmployee){\r\n                 \r\n             const findStore= await StoreServ.find(\r\n                     {query: {\r\n                         locationType:\"Finance\",\r\n                         facility:user.currentEmployee.facilityDetail._id,\r\n                         $limit:20,\r\n                         $sort: {\r\n                             name: 1\r\n                         }\r\n                         }})\r\n     \r\n              await setFacilities(findStore.data)\r\n                     }\r\n                     else {\r\n                         if (user.stacker){\r\n                             const findStore= await StoreServ.find(\r\n                                 {query: {\r\n                                     locationType:\"Finance\",\r\n                                     $limit:20,\r\n                                     $sort: {\r\n                                         name: 1\r\n                                     }\r\n                                     }})\r\n                 \r\n                         await setFacilities(findStore.data)\r\n     \r\n                         }\r\n                     }\r\n               /*   .then((res)=>{\r\n                     console.log(res)\r\n                         setFacilities(res.data)\r\n                         setMessage(\" Store  fetched successfully\")\r\n                         setSuccess(true)\r\n                     })\r\n                     .catch((err)=>{\r\n                         setMessage(\"Error creating Store, probable network issues \"+ err )\r\n                         setError(true)\r\n                     }) */\r\n                 }\r\n                 \r\n                 useEffect(() => {\r\n                     setTimeout(() => {\r\n                         console.log(\"happy birthday\")\r\n                         //getFacilities(user)\r\n                     }, 200);\r\n     \r\n                     return () => {\r\n                         \r\n     \r\n                     }\r\n                 },[])\r\n     \r\n                 useEffect(() => {\r\n                    \r\n                     if (user){\r\n                         getFacilities()\r\n                     }else{\r\n                         /* const localUser= localStorage.getItem(\"user\")\r\n                         const user1=JSON.parse(localUser)\r\n                         console.log(localUser)\r\n                         console.log(user1)\r\n                         fetchUser(user1)\r\n                         console.log(user)\r\n                         getFacilities(user) */\r\n                     }\r\n                     StoreServ.on('created', (obj)=>getFacilities())\r\n                     StoreServ.on('updated', (obj)=>getFacilities())\r\n                     StoreServ.on('patched', (obj)=>getFacilities())\r\n                     StoreServ.on('removed', (obj)=>getFacilities())\r\n                     return () => {\r\n                     \r\n                     }\r\n                 },[])\r\n     \r\n     \r\n         //todo: pagination and vertical scroll bar\r\n     \r\n         return(\r\n             <>\r\n                {user?( <>  \r\n                     <div className=\"level\">\r\n                         <div className=\"level-left\">\r\n                             <div className=\"level-item\">\r\n                                 <div className=\"field\">\r\n                                     <p className=\"control has-icons-left  \">\r\n                                         <DebounceInput className=\"input is-small \" \r\n                                             type=\"text\" placeholder=\"Search Stores\"\r\n                                             minLength={3}\r\n                                             debounceTimeout={400}\r\n                                             onChange={(e)=>handleSearch(e.target.value)} />\r\n                                         <span className=\"icon is-small is-left\">\r\n                                             <i className=\"fas fa-search\"></i>\r\n                                         </span>\r\n                                     </p>\r\n                                 </div>\r\n                             </div>\r\n                         </div>\r\n                         <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Stores </span></div>\r\n                         <div className=\"level-right\">\r\n                     { !standalone &&   <div className=\"level-item\"> \r\n                                 <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                             </div>}\r\n                         </div>\r\n     \r\n                     </div>\r\n                     <div className=\"table-container pullup \">\r\n                                     <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                                         <thead>\r\n                                             <tr>\r\n                                             <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                             <th>Name</th>\r\n                                             {/* <th><abbr title=\"Last Name\">Store Type</abbr></th>\r\n                                            <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                              <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                             <th><abbr title=\"Email\">Email</abbr></th>\r\n                                             <th><abbr title=\"Department\">Department</abbr></th>\r\n                                             <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                             <th><abbr title=\"Facility\">Facility</abbr></th>*/}\r\n                                            { !standalone &&  <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                             </tr>\r\n                                         </thead>\r\n                                         <tfoot>\r\n                                             \r\n                                         </tfoot>\r\n                                         <tbody>\r\n                                             {facilities.map((Store, i)=>(\r\n     \r\n                                                 <tr key={Store._id} onClick={()=>handleRow(Store)} className={Store._id===(selectedStore?._id||null)?\"is-selected\":\"\"}>\r\n                                                 <th>{i+1}</th>\r\n                                                 <th>{Store.name}</th>\r\n                                                 {/*<td>{Store.StoreType}</td>\r\n                                                 < td>{Store.profession}</td>\r\n                                                 <td>{Store.phone}</td>\r\n                                                 <td>{Store.email}</td>\r\n                                                 <td>{Store.department}</td>\r\n                                                 <td>{Store.deptunit}</td> \r\n                                                 <td>{Store.facility}</td>*/}\r\n                                               { !standalone &&   <td><span   className=\"showAction\"  >...</span></td>}\r\n                                                \r\n                                                 </tr>\r\n     \r\n                                             ))}\r\n                                         </tbody>\r\n                                         </table>\r\n                                         \r\n                     </div>              \r\n                 </>):<div>loading</div>}\r\n                 </>\r\n                   \r\n         )\r\n         }\r\n\r\nexport function StoreDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const StoreServ=client.service('/Store')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Store =state.StoreModule.selectedStore \r\n\r\n    const handleEdit= async()=>{\r\n        const    newStoreModule={\r\n            selectedStore:Store,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Store Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {Store.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Location Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"StoreType\">{Store.locationType} </span> \r\n                    </td>\r\n                </tr>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"StoreCity\">{Store.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"StoreContactPhone\" >{Store.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"StoreEmail\" >{Store.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"StoreOwner\">{Store.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"StoreType\">{Store.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"StoreCategory\">{Store.StoreCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function StoreModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Store =state.StoreModule.selectedStore \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", Store.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"locationType\", Store.locationType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", Store.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Store.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Store.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Store.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Store.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"StoreCategory\", Store.StoreCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newStoreModule={\r\n        selectedStore:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newStoreModule={\r\n            selectedStore:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Store._id\r\n        if (conf){\r\n             \r\n        StoreServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Store successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Store deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Store, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Store, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Store.facility\r\n          //console.log(data);\r\n          \r\n        StoreServ.patch(Store._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Store successfully\")\r\n                 toast({\r\n                    message: 'Store updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Store, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Store, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Store Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Location Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"StoreType\" type=\"text\" placeholder=\"Store Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Store Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"StoreCategory\" type=\"text\" placeholder=\"Store Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                {/* <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)} >\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Store.js",["635","636","637","638","639","640"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Store() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedStore,setSelectedStore]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Store  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <StoreList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.StoreModule.show ==='create')&&<StoreCreate />}\r\n                {(state.StoreModule.show ==='detail')&&<StoreDetail  />}\r\n                {(state.StoreModule.show ==='modify')&&<StoreModify Store={selectedStore} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function StoreCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{ // buble-up from inputsearch for creating resource\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeStore.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n          data.locationType=\"Store\"\r\n        StoreServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Store successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Store created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Store ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Store\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n               {/*  <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"StoreType\" type=\"text\" placeholder=\"Type of Store\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div> */}\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Store\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function StoreList({standalone,closeModal}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedStore, setSelectedStore]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newStoreModule={\r\n            selectedStore:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Store)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Store)\r\n\r\n        await setSelectedStore(Store)\r\n\r\n        const    newStoreModule={\r\n            selectedStore:Store,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n       //closeModal()\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       StoreServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                locationType:\"Store\",\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Store  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Store, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findStore= await StoreServ.find(\r\n                {query: {\r\n                    locationType:\"Store\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        name: 1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findStore.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findStore= await StoreServ.find(\r\n                            {query: {\r\n                                locationType:\"Store\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    name: 1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findStore.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Store  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Store, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                StoreServ.on('created', (obj)=>getFacilities())\r\n                StoreServ.on('updated', (obj)=>getFacilities())\r\n                StoreServ.on('patched', (obj)=>getFacilities())\r\n                StoreServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Stores\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Stores </span></div>\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        {/* <th><abbr title=\"Last Name\">Store Type</abbr></th>\r\n                                       <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                         <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>*/}\r\n                                       { !standalone &&  <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Store, i)=>(\r\n\r\n                                            <tr key={Store._id} onClick={()=>handleRow(Store)} className={Store._id===(selectedStore?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Store.name}</th>\r\n                                            {/*<td>{Store.StoreType}</td>\r\n                                            < td>{Store.profession}</td>\r\n                                            <td>{Store.phone}</td>\r\n                                            <td>{Store.email}</td>\r\n                                            <td>{Store.department}</td>\r\n                                            <td>{Store.deptunit}</td> \r\n                                            <td>{Store.facility}</td>*/}\r\n                                          { !standalone &&   <td><span   className=\"showAction\"  >...</span></td>}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n    export function StoreListStandalone({standalone,closeModal}){\r\n        // const { register, handleSubmit, watch, errors } = useForm();\r\n         // eslint-disable-next-line\r\n         const [error, setError] =useState(false)\r\n          // eslint-disable-next-line\r\n         const [success, setSuccess] =useState(false)\r\n          // eslint-disable-next-line\r\n        const [message, setMessage] = useState(\"\") \r\n         const StoreServ=client.service('location')\r\n         //const history = useHistory()\r\n        // const {user,setUser} = useContext(UserContext)\r\n         const [facilities,setFacilities]=useState([])\r\n          // eslint-disable-next-line\r\n        const [selectedStore, setSelectedStore]=useState() //\r\n         // eslint-disable-next-line\r\n         const {state,setState}=useContext(ObjectContext)\r\n         // eslint-disable-next-line\r\n         const {user,setUser}=useContext(UserContext)\r\n     \r\n     \r\n     \r\n         const handleCreateNew = async()=>{\r\n             const    newStoreModule={\r\n                 selectedStore:{},\r\n                 show :'create'\r\n                 }\r\n            await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n            //console.log(state)\r\n             \r\n     \r\n         }\r\n         const handleRow= async(Store)=>{\r\n             //console.log(\"b4\",state)\r\n     \r\n             //console.log(\"handlerow\",Store)\r\n     \r\n             await setSelectedStore(Store)\r\n     \r\n             const    newStoreModule={\r\n                 selectedStore:Store,\r\n                 show :'detail'\r\n             }\r\n            await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n            //console.log(state)\r\n            closeModal()\r\n     \r\n         }\r\n     \r\n        const handleSearch=(val)=>{\r\n            const field='name'\r\n            console.log(val)\r\n            StoreServ.find({query: {\r\n                     [field]: {\r\n                         $regex:val,\r\n                         $options:'i'\r\n                        \r\n                     },\r\n                    facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                     locationType:\"Store\",\r\n                    $limit:10,\r\n                     $sort: {\r\n                         name: 1\r\n                       }\r\n                         }}).then((res)=>{\r\n                     console.log(res)\r\n                    setFacilities(res.data)\r\n                     setMessage(\" Store  fetched successfully\")\r\n                     setSuccess(true) \r\n                 })\r\n                 .catch((err)=>{\r\n                     console.log(err)\r\n                     setMessage(\"Error fetching Store, probable network issues \"+ err )\r\n                     setError(true)\r\n                 })\r\n             }\r\n        \r\n             const getFacilities= async()=>{\r\n                 if (user.currentEmployee){\r\n                 \r\n             const findStore= await StoreServ.find(\r\n                     {query: {\r\n                         locationType:\"Store\",\r\n                         facility:user.currentEmployee.facilityDetail._id,\r\n                         $limit:20,\r\n                         $sort: {\r\n                             name: 1\r\n                         }\r\n                         }})\r\n     \r\n              await setFacilities(findStore.data)\r\n                     }\r\n                     else {\r\n                         if (user.stacker){\r\n                             const findStore= await StoreServ.find(\r\n                                 {query: {\r\n                                     locationType:\"Store\",\r\n                                     $limit:20,\r\n                                     $sort: {\r\n                                         name: 1\r\n                                     }\r\n                                     }})\r\n                 \r\n                         await setFacilities(findStore.data)\r\n     \r\n                         }\r\n                     }\r\n               /*   .then((res)=>{\r\n                     console.log(res)\r\n                         setFacilities(res.data)\r\n                         setMessage(\" Store  fetched successfully\")\r\n                         setSuccess(true)\r\n                     })\r\n                     .catch((err)=>{\r\n                         setMessage(\"Error creating Store, probable network issues \"+ err )\r\n                         setError(true)\r\n                     }) */\r\n                 }\r\n                 \r\n                 useEffect(() => {\r\n                     setTimeout(() => {\r\n                         console.log(\"happy birthday\")\r\n                         //getFacilities(user)\r\n                     }, 200);\r\n     \r\n                     return () => {\r\n                         \r\n     \r\n                     }\r\n                 },[])\r\n     \r\n                 useEffect(() => {\r\n                    \r\n                     if (user){\r\n                         getFacilities()\r\n                     }else{\r\n                         /* const localUser= localStorage.getItem(\"user\")\r\n                         const user1=JSON.parse(localUser)\r\n                         console.log(localUser)\r\n                         console.log(user1)\r\n                         fetchUser(user1)\r\n                         console.log(user)\r\n                         getFacilities(user) */\r\n                     }\r\n                     StoreServ.on('created', (obj)=>getFacilities())\r\n                     StoreServ.on('updated', (obj)=>getFacilities())\r\n                     StoreServ.on('patched', (obj)=>getFacilities())\r\n                     StoreServ.on('removed', (obj)=>getFacilities())\r\n                     return () => {\r\n                     \r\n                     }\r\n                 },[])\r\n     \r\n     \r\n         //todo: pagination and vertical scroll bar\r\n     \r\n         return(\r\n             <>\r\n                {user?( <>  \r\n                     <div className=\"level\">\r\n                         <div className=\"level-left\">\r\n                             <div className=\"level-item\">\r\n                                 <div className=\"field\">\r\n                                     <p className=\"control has-icons-left  \">\r\n                                         <DebounceInput className=\"input is-small \" \r\n                                             type=\"text\" placeholder=\"Search Stores\"\r\n                                             minLength={3}\r\n                                             debounceTimeout={400}\r\n                                             onChange={(e)=>handleSearch(e.target.value)} />\r\n                                         <span className=\"icon is-small is-left\">\r\n                                             <i className=\"fas fa-search\"></i>\r\n                                         </span>\r\n                                     </p>\r\n                                 </div>\r\n                             </div>\r\n                         </div>\r\n                         <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Stores </span></div>\r\n                         <div className=\"level-right\">\r\n                     { !standalone &&   <div className=\"level-item\"> \r\n                                 <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                             </div>}\r\n                         </div>\r\n     \r\n                     </div>\r\n                     <div className=\"table-container pullup \">\r\n                                     <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                                         <thead>\r\n                                             <tr>\r\n                                             <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                             <th>Name</th>\r\n                                             {/* <th><abbr title=\"Last Name\">Store Type</abbr></th>\r\n                                            <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                              <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                             <th><abbr title=\"Email\">Email</abbr></th>\r\n                                             <th><abbr title=\"Department\">Department</abbr></th>\r\n                                             <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                             <th><abbr title=\"Facility\">Facility</abbr></th>*/}\r\n                                            { !standalone &&  <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                             </tr>\r\n                                         </thead>\r\n                                         <tfoot>\r\n                                             \r\n                                         </tfoot>\r\n                                         <tbody>\r\n                                             {facilities.map((Store, i)=>(\r\n     \r\n                                                 <tr key={Store._id} onClick={()=>handleRow(Store)} className={Store._id===(selectedStore?._id||null)?\"is-selected\":\"\"}>\r\n                                                 <th>{i+1}</th>\r\n                                                 <th>{Store.name}</th>\r\n                                                 {/*<td>{Store.StoreType}</td>\r\n                                                 < td>{Store.profession}</td>\r\n                                                 <td>{Store.phone}</td>\r\n                                                 <td>{Store.email}</td>\r\n                                                 <td>{Store.department}</td>\r\n                                                 <td>{Store.deptunit}</td> \r\n                                                 <td>{Store.facility}</td>*/}\r\n                                               { !standalone &&   <td><span   className=\"showAction\"  >...</span></td>}\r\n                                                \r\n                                                 </tr>\r\n     \r\n                                             ))}\r\n                                         </tbody>\r\n                                         </table>\r\n                                         \r\n                     </div>              \r\n                 </>):<div>loading</div>}\r\n                 </>\r\n                   \r\n         )\r\n         }\r\nexport function StoreDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const StoreServ=client.service('/Store')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Store =state.StoreModule.selectedStore \r\n\r\n    const handleEdit= async()=>{\r\n        const    newStoreModule={\r\n            selectedStore:Store,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Store Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {Store.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Location Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"StoreType\">{Store.locationType} </span> \r\n                    </td>\r\n                </tr>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"StoreCity\">{Store.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"StoreContactPhone\" >{Store.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"StoreEmail\" >{Store.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"StoreOwner\">{Store.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"StoreType\">{Store.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"StoreCategory\">{Store.StoreCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function StoreModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Store =state.StoreModule.selectedStore \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", Store.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"locationType\", Store.locationType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", Store.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Store.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Store.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Store.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Store.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"StoreCategory\", Store.StoreCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newStoreModule={\r\n        selectedStore:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newStoreModule={\r\n            selectedStore:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Store._id\r\n        if (conf){\r\n             \r\n        StoreServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Store successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Store deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Store, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Store, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Store.facility\r\n          //console.log(data);\r\n          \r\n        StoreServ.patch(Store._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Store successfully\")\r\n                 toast({\r\n                    message: 'Store updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Store, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Store, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Store Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Location Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"StoreType\" type=\"text\" placeholder=\"Store Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Store Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"StoreCategory\" type=\"text\" placeholder=\"Store Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                {/* <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)} >\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillPrescription.js",["641","642","643","644","645","646","647","648","649","650","651","652","653","654","655","656","657","658"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Roaster.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryReport.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\FinanceReport.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\EncounterRight.js",["659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {DocumentClassList} from './DocumentClass'\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n\r\nexport default function EncounterRight() {\r\n    const {state,setState}=useContext(ObjectContext)\r\n    return (\r\n        <div>\r\n          {(state.DocumentClassModule.selectedDocumentClass.name==='Vital Signs') &&  <VitalSignCreate />}\r\n          {(state.DocumentClassModule.selectedDocumentClass.name==='Clinical Note') &&   <ClinicalNoteCreate />}\r\n          {(state.DocumentClassModule.selectedDocumentClass.name==='Prescription') &&   <PrescriptionCreate />}\r\n          {(state.DocumentClassModule.selectedDocumentClass.name==='Diagnostic Request') &&   <LabrequestCreate />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function VitalSignCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('clinicaldocument')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const {state}=useContext(ObjectContext)\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        let document={}\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          document.facility=user.currentEmployee.facilityDetail._id \r\n          document.facilityname=user.currentEmployee.facilityDetail.facilityName // or from facility dropdown\r\n          }\r\n         document.documentdetail=data\r\n          document.documentname=state.DocumentClassModule.selectedDocumentClass.name\r\n          document.documentClassId=state.DocumentClassModule.selectedDocumentClass._id\r\n          document.location=state.ClinicModule.selectedClinic.name+\" \"+state.ClinicModule.selectedClinic.locationType\r\n          document.locationId=state.ClinicModule.selectedClinic._id\r\n          document.client=state.ClientModule.selectedClient._id\r\n          document.createdBy=user._id\r\n          document.createdByname=user.firstname+ \" \"+user.lastname\r\n          document.status=\"completed\"\r\n          console.log(document)\r\n        ClientServ.create(document)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Documentation created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Documentation ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    {state?.DocumentClassModule.selectedDocumentClass.name||\"\"}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p> */}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <input className=\"input is-small\" ref={register()}  name=\"temperature\" type=\"text\" placeholder=\"temperature\" />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>\r\n                \r\n                \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register()}  name=\"pulse\" type=\"text\" placeholder=\"pulse\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">   \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"respiratory_rate\" type=\"text\" placeholder=\"Respiratory rate\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" fas fa-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"random_glucose\" type=\"text\" placeholder=\"Blood Glucose\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>  \r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"systolic_BP\" type=\"text\" placeholder=\"Systolic BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"diastolic_BP\" type=\"text\" placeholder=\"Diastolic_BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                </div> \r\n                </div> \r\n            <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"SPO2\" type=\"text\" placeholder=\"SPO2\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"pain\" type=\"text\" placeholder=\"Pain\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                \r\n            </div> \r\n        </div> \r\n               \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               \r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 \r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ClinicalNoteCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('clinicaldocument')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const {state}=useContext(ObjectContext)\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        let document={}\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          document.facility=user.currentEmployee.facilityDetail._id \r\n          document.facilityname=user.currentEmployee.facilityDetail.facilityName // or from facility dropdown\r\n          }\r\n         document.documentdetail=data\r\n          document.documentname=state.DocumentClassModule.selectedDocumentClass.name\r\n          document.documentClassId=state.DocumentClassModule.selectedDocumentClass._id\r\n          document.location=state.ClinicModule.selectedClinic.name+\" \"+state.ClinicModule.selectedClinic.locationType\r\n          document.locationId=state.ClinicModule.selectedClinic._id\r\n          document.client=state.ClientModule.selectedClient._id\r\n          document.createdBy=user._id\r\n          document.createdByname=user.firstname+ \" \"+user.lastname\r\n          document.status=\"completed\"\r\n          console.log(document)\r\n\r\n          if (\r\n            document.location===undefined ||!document.createdByname || !document.facilityname ){\r\n            toast({\r\n                message: ' Documentation data missing, requires location and facility details' ,\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n              return\r\n          }\r\n        ClientServ.create(document)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Documentation created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Documentation ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    {state?.DocumentClassModule.selectedDocumentClass.name||\"\"}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p> */}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <textarea className=\"textarea is-small\" ref={register()}  name=\"Symptoms\" type=\"text\" placeholder=\"Symptoms\" />\r\n                           {/*  <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-hospital\"></i>\r\n                            </span>   */}                  \r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <div className=\"control has-icons-left has-icons-right\">\r\n                        <textarea className=\"textarea is-small\" ref={register()}  name=\"Clinical Findings\" type=\"text\" placeholder=\"Clinical Findings\" />\r\n                        {/* <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span> */}\r\n                        \r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">   \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <textarea className=\"textarea is-small\" ref={register()} name=\"Diagnosis\" type=\"text\" placeholder=\"Diagnosis\"/>\r\n                        {/* <span className=\"icon is-small is-left\">\r\n                        <i className=\" fas fa-user-md \"></i>\r\n                        </span> */}\r\n                    </p>\r\n                </div>\r\n                </div>\r\n                </div>\r\n        {/* <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\"> */}       \r\n                <div className=\"field\">\r\n                    <div className=\"control has-icons-left\">\r\n                    \r\n                        <textarea className=\"textarea is-small \" ref={register()} name=\"Plan\" type=\"text\" placeholder=\"Plan\"  />\r\n                        {/* <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span> */}\r\n                    </div>\r\n              {/*   </div> \r\n            </div>   */}\r\n        </div>\r\n       {/*  <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"systolic_BP\" type=\"text\" placeholder=\"Systolic BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"diastolic_BP\" type=\"text\" placeholder=\"Diastolic_BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                </div> \r\n                </div> \r\n            <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"SPO2\" type=\"text\" placeholder=\"SPO2\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"pain\" type=\"text\" placeholder=\"Pain\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div> */}\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                \r\n            </div> \r\n        </div> \r\n               \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               \r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 \r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function PrescriptionCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('clinicaldocument')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const {state}=useContext(ObjectContext)\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        let document={}\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          document.facility=user.currentEmployee.facilityDetail._id \r\n          document.facilityname=user.currentEmployee.facilityDetail.facilityName // or from facility dropdown\r\n          }\r\n         document.documentdetail=data\r\n          document.documentname=state.DocumentClassModule.selectedDocumentClass.name\r\n          document.documentClassId=state.DocumentClassModule.selectedDocumentClass._id\r\n          document.location=state.ClinicModule.selectedClinic.name+\" \"+state.ClinicModule.selectedClinic.locationType\r\n          document.locationId=state.ClinicModule.selectedClinic._id\r\n          document.client=state.ClientModule.selectedClient._id\r\n          document.createdBy=user._id\r\n          document.createdByname=user.firstname+ \" \"+user.lastname\r\n          document.status=\"completed\"\r\n          console.log(document)\r\n        ClientServ.create(document)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Documentation created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Documentation ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    {state?.DocumentClassModule.selectedDocumentClass.name||\"\"}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p> */}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <input className=\"input is-small\" ref={register()}  name=\"temperature\" type=\"text\" placeholder=\"temperature\" />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>\r\n                \r\n                \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register()}  name=\"pulse\" type=\"text\" placeholder=\"pulse\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">   \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"respiratory_rate\" type=\"text\" placeholder=\"Respiratory rate\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" fas fa-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"random_glucose\" type=\"text\" placeholder=\"Blood Glucose\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>  \r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"systolic_BP\" type=\"text\" placeholder=\"Systolic BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"diastolic_BP\" type=\"text\" placeholder=\"Diastolic_BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                </div> \r\n                </div> \r\n            <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"SPO2\" type=\"text\" placeholder=\"SPO2\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"pain\" type=\"text\" placeholder=\"Pain\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                \r\n            </div> \r\n        </div> \r\n               \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               \r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 \r\n        </>\r\n    )\r\n   \r\n}\r\nexport function LabrequestCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('clinicaldocument')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const {state}=useContext(ObjectContext)\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        let document={}\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          document.facility=user.currentEmployee.facilityDetail._id \r\n          document.facilityname=user.currentEmployee.facilityDetail.facilityName // or from facility dropdown\r\n          }\r\n         document.documentdetail=data\r\n          document.documentname=state.DocumentClassModule.selectedDocumentClass.name\r\n          document.documentClassId=state.DocumentClassModule.selectedDocumentClass._id\r\n          document.location=state.ClinicModule.selectedClinic.name+\" \"+state.ClinicModule.selectedClinic.locationType\r\n          document.locationId=state.ClinicModule.selectedClinic._id\r\n          document.client=state.ClientModule.selectedClient._id\r\n          document.createdBy=user._id\r\n          document.createdByname=user.firstname+ \" \"+user.lastname\r\n          document.status=\"completed\"\r\n          console.log(document)\r\n        ClientServ.create(document)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Documentation created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Documentation ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    {state?.DocumentClassModule.selectedDocumentClass.name||\"\"}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p> */}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <input className=\"input is-small\" ref={register()}  name=\"temperature\" type=\"text\" placeholder=\"temperature\" />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>\r\n                \r\n                \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register()}  name=\"pulse\" type=\"text\" placeholder=\"pulse\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">   \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"respiratory_rate\" type=\"text\" placeholder=\"Respiratory rate\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" fas fa-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"random_glucose\" type=\"text\" placeholder=\"Blood Glucose\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>  \r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"systolic_BP\" type=\"text\" placeholder=\"Systolic BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"diastolic_BP\" type=\"text\" placeholder=\"Diastolic_BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                </div> \r\n                </div> \r\n            <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"SPO2\" type=\"text\" placeholder=\"SPO2\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"pain\" type=\"text\" placeholder=\"Pain\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                \r\n            </div> \r\n        </div> \r\n               \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               \r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 \r\n        </>\r\n    )\r\n   \r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ClientPrescription.js",["679","680","681","682","683","684","685","686","687","688","689","690","691","692"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\nimport BillDispenseCreate from './BillPrescriptionCreate'\r\nimport PatientProfile from '../ClientMgt/PatientProfile'\r\n/* import {ProductCreate} from './Products' */\r\n// eslint-disable-next-line\r\n//const searchfacility={};\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\n\r\n// Demo styles, see 'Styles' section below for some notes on use.\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\n\r\nexport default function ClientBilledPrescription({selectedClient}){\r\n    // const { register, handleSubmit, watch, errors } = useForm();\r\n     // eslint-disable-next-line\r\n     const [error, setError] =useState(false)\r\n      // eslint-disable-next-line\r\n     const [success, setSuccess] =useState(false)\r\n      // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") \r\n     const OrderServ=client.service('order')\r\n     //const history = useHistory()\r\n    // const {user,setUser} = useContext(UserContext)\r\n     const [clientOrders,setClientOrders]=useState([])\r\n      // eslint-disable-next-line\r\n    const [selectedDispense, setSelectedDispense]=useState() //\r\n     // eslint-disable-next-line\r\n     const {state,setState}=useContext(ObjectContext)\r\n     // eslint-disable-next-line\r\n     const {user,setUser}=useContext(UserContext)\r\n     const [selectedMedication, setSelectedMedication] =useState(\"\")\r\n\r\n\r\n     console.log(selectedClient)\r\n \r\n     const handleSelectedClient= async(Client)=>{\r\n         // await setSelectedClient(Client)\r\n          const    newClientModule={\r\n              selectedClient:Client,\r\n              show :'detail'\r\n          }\r\n         await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n      }\r\n \r\n     const handleMedicationRow= async(ProductEntry)=>{ //handle selected single order\r\n         //console.log(\"b4\",state)\r\n     \r\n         //console.log(\"handlerow\",ProductEntry)\r\n         await handleSelectedClient(ProductEntry.client)\r\n \r\n     \r\n         await setSelectedMedication(ProductEntry)\r\n     \r\n         const    newProductEntryModule={\r\n             selectedMedication:ProductEntry,\r\n             show :'detail'\r\n         }\r\n       await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n        //console.log(state)\r\n       // ProductEntry.show=!ProductEntry.show\r\n     \r\n     }\r\n \r\n     const handleCreateNew = async()=>{\r\n         const    newProductEntryModule={\r\n             selectedDispense:{},\r\n             show :'create'\r\n             }\r\n        await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n        //console.log(state)\r\n         \r\n \r\n     }\r\n   \r\n \r\n     const handleSearch=(val)=>{\r\n        const field='name'\r\n        //console.log(val)\r\n        OrderServ.find({query: {\r\n                 order: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 order_status: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 order_status:\"Billed\",  \r\n                 clientId:selectedClient,\r\n                 order_category:\"Prescription\",\r\n                // storeId:state.StoreModule.selectedStore._id,\r\n                //facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n                // console.log(res)\r\n                setClientOrders(res.data)\r\n                 setMessage(\" ProductEntry  fetched successfully\")\r\n                 setSuccess(true) \r\n             })\r\n             .catch((err)=>{\r\n                // console.log(err)\r\n                 setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                 setError(true)\r\n             })\r\n         }\r\n     const getFacilities= async()=>{\r\n        \r\n             // console.log(\"here b4 server\")\r\n     const findProductEntry= await OrderServ.find(\r\n             {query: {\r\n                 order_category:\"Prescription\",\r\n                 fulfilled:\"False\",\r\n                 destination: user.currentEmployee.facilityDetail._id,\r\n                 order_status:\"Billed\",  \r\n                 clientId:selectedClient,//selectedClient, //\r\n                 // need to set this finally\r\n                 //storeId:state.StoreModule.selectedStore._id,\r\n                 //clientId:state.ClientModule.selectedClient._id,\r\n                 $limit:50,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                 }\r\n                 }})\r\n \r\n             console.log(\"clientorders\", findProductEntry)\r\n             await setClientOrders(findProductEntry.data)\r\n             //await setState((prevstate)=>({...prevstate, currentClients:findProductEntry.groupedOrder}))\r\n             }   \r\n \r\n     //1.consider using props for global data\r\n     useEffect(() => {\r\n         // console.log(\"started\")\r\n             getFacilities()\r\n             OrderServ.on('created', (obj)=>getFacilities())\r\n             OrderServ.on('updated', (obj)=>getFacilities())\r\n             OrderServ.on('patched', (obj)=>getFacilities())\r\n             OrderServ.on('removed', (obj)=>getFacilities())\r\n             return () => {\r\n             \r\n             }\r\n             },[])\r\n \r\n         const handleRow= async(ProductEntry)=>{\r\n     \r\n         await setSelectedDispense(ProductEntry)\r\n \r\n         const    newProductEntryModule={\r\n             selectedDispense:ProductEntry,\r\n             show :'detail'\r\n         }\r\n         await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n         //console.log(state)\r\n         \r\n         }\r\n \r\n \r\n     return(     \r\n             <>  \r\n                 {/* <div className=\"level\">\r\n                     <div className=\"level-left\">\r\n                         <div className=\"level-item\">\r\n                             <div className=\"field\">\r\n                                 <p className=\"control has-icons-left  \">\r\n                                     <DebounceInput className=\"input is-small \" \r\n                                         type=\"text\" placeholder=\"Search Medications\"\r\n                                         minLength={3}\r\n                                         debounceTimeout={400}\r\n                                         onChange={(e)=>handleSearch(e.target.value)} />\r\n                                     <span className=\"icon is-small is-left\">\r\n                                         <i className=\"fas fa-search\"></i>\r\n                                     </span>\r\n                                 </p>\r\n                             </div>\r\n                         </div>\r\n                     </div> */}\r\n                     {/* <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Billed Prescriptions </span></div> */}\r\n                      {/* <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                             <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                         </div> \r\n                     </div>*/}\r\n \r\n                 {/* </div> */}\r\n                 <div className=\" pullupx \">\r\n                     <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                     <Accordion allowZeroExpanded>\r\n                         \r\n                             <AccordionItem  >\r\n                                <AccordionItemHeading >\r\n                                <AccordionItemButton  >\r\n                                       {/*  {i+1}  {Clinic.clientname} with  */ } {clientOrders.length} billed medication(s)  \r\n                                 </AccordionItemButton>\r\n                                 </AccordionItemHeading>\r\n                                 <AccordionItemPanel>\r\n                                     <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable mr-2\">\r\n                                             <thead>\r\n                                                 <tr>\r\n                                                     <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                                     <th><abbr title=\"Date\">Date</abbr></th>\r\n                                                     <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                                     <th>Fulfilled</th>\r\n                                                     <th><abbr title=\"Status\">Status</abbr></th>\r\n                                                     <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                                 </tr>\r\n                                             </thead>\r\n                                             <tbody>\r\n                                             { clientOrders.map((order, i)=>(\r\n \r\n                                                         <tr key={order._id} /* onClick={()=>handleMedicationRow(order)} */ className={order._id===(selectedMedication?._id||null)?\"is-selected\":\"\"}>                                         \r\n                                                         <th>{i+1}</th>\r\n                                                         <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                                         <th>{order.order}</th>\r\n                                                         <td>{order.fulfilled===\"True\"?\"Yes\":\"No\"}</td>\r\n                                                         <td>{order.order_status}</td>\r\n                                                         <td>{order.requestingdoctor_Name}</td>\r\n                                                         </tr>\r\n                                                 ))}\r\n                                             </tbody>\r\n                                             </table>\r\n \r\n                               </AccordionItemPanel>                                          \r\n                                 </AccordionItem>\r\n                           \r\n                             {/* <!-- Add Ref to Load More div --> */}\r\n                             {/*  <div className=\"loading\" ref={loader}>\r\n                                     <h2>Load More</h2>\r\n                         </div> */}\r\n                         </Accordion>\r\n                     </div>                   \r\n                 </div>  \r\n             </>          \r\n     )\r\n     }\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Accessibility.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClientMgt\\PatientProfile.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\Encounter.js",["693","694","695","696","697"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ClientCreate, ClientDetail, ClientList} from '../ClientMgt/Patient'\r\n\r\nimport EncounterMain from './EncounterMain';\r\nimport EncounterRight from './EncounterRight';\r\nimport PatientProfile from '../ClientMgt/PatientProfile';\r\nvar random = require('random-string-generator');\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Encounter({standalone}) {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    //const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    //const {state,setState}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedClient,setSelectedClient]=useState()\r\n    const [showModal,setShowModal]=useState(false)\r\n\r\n    //let { path, url } = useRouteMatch();\r\n    \r\n    useEffect(() => {\r\n       \r\n        console.log(\"starting up Encounter module\")\r\n        console.log(state.ClientModule.selectedClient)\r\n        if (Object.keys(state.ClientModule.selectedClient).length === 0 && state.ClientModule.selectedClient.constructor === Object){\r\n            handleChangeClient()\r\n\r\n            }\r\n         return () => {       \r\n            }\r\n        }, [])\r\n   \r\n    useEffect(()=>{\r\n     setSelectedClient(state.ClientModule.selectedClient)\r\n\r\n    },[state.ClientModule])\r\n\r\n    const handleChangeClient= async()=>{\r\n        await setShowModal(true)                                                                                                                                                        \r\n        console.log( showModal)\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            {!standalone && <div className=\"column is-2 \">\r\n                   <PatientProfile  />\r\n                    </div>}\r\n\r\n            {!standalone &&     <div className= {(state.DocumentClassModule.show ==='detail')?\"column is-6\":\"column is-10 \"}>\r\n                   <EncounterMain client={selectedClient}/>\r\n                </div>}\r\n                {standalone &&     <div className= {(state.DocumentClassModule.show ==='detail')?\"column is-8\":\"column is-12 \"}>\r\n                   <EncounterMain client={selectedClient} nopresc={standalone}/>\r\n                </div>}\r\n              <div className=\"column is-4 \" >\r\n                {(state.DocumentClassModule.show ==='detail')&& <EncounterRight  client={selectedClient}/>}\r\n               {/*  <DocumentClassCreate /> */}\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${showModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head btnheight\">\r\n                                        <p className=\"modal-card-title\">Choose Client</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body \">\r\n                                        <ClientList standalone=\"true\" />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>                                    \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\n\r\n   \r\n                \r\n  \r\n\r\nexport  function InventorySearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('inventory')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n   const {user} = useContext(UserContext) \r\n   const {state}=useContext(ObjectContext)\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n    }\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 facility: user.currentEmployee.facilityDetail._id,\r\n                 storeId: state.StoreModule.selectedStore._id,\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small  is-expanded\" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu expanded\" style={{width:\"100%\"}}>\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" /* onClick={handleAddproduct} */> <span> {val} is not in your inventory</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <div><span>{facility.name}</span></div>\r\n                                        <div><span><strong>{facility.quantity}</strong></span>\r\n                                        <span>{facility.baseunit}(s) remaining</span>\r\n                                        <span className=\"padleft\"><strong>Price:</strong> N{facility.sellingprice}</span></div>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        <ClientCreate />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryHome.js",["698","699","700","701","702","703"],"import React ,{useState,useEffect,useContext} from 'react'\r\nimport Store, { StoreList } from './Store'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\nexport default function InventoryHome() {\r\n   // const [activeModal, setActiveModal]=useState(\"modal is-active \")\r\n    const {state,setState}=useContext(ObjectContext)\r\n    const handleCloseModal=()=>{\r\n        state.showStoreModal  =  \"modal\"                                                                                                                                                        \r\n        setState(state)\r\n        console.log( state.showStoreModal)\r\n    }\r\n    \r\n       \r\n \r\n    return (\r\n       \r\n            <section className= \"section remPadTop\">\r\n              <section className=\"hero is-info is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                    <h1 className=\"title\">\r\n                      Inventory Module\r\n                    </h1>\r\n                    <h2 className=\"subtitle\">\r\n                        Have fun working today!\r\n                    </h2>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n                                         \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicSetup.js",["704","705","706","707","708","709"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Products.js",["710","711","712","713","714","715","716"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\utils\\VideoConference.js",["717","718","719","720"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js",["721","722","723","724","725","726","727","728"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Inventory() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedInventory,setSelectedInventory]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Inventory  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <InventoryList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.InventoryModule.show ==='create')&&<InventoryCreate />}\r\n                {(state.InventoryModule.show ==='detail')&&<InventoryDetail  />}\r\n                {(state.InventoryModule.show ==='modify')&&<InventoryModify Inventory={selectedInventory} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function InventoryCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeInventory.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        InventoryServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Inventory successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Inventory created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Inventory ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Inventory: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field\">    \r\n                <div class=\"control\">\r\n                    <div class=\"select is-small\">\r\n                        <select>\r\n                            <option>Purchase Invoice </option>\r\n                            <option>Initialization</option>\r\n                            <option>Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> {/* Audit/initialization/Purchase Invoice */}\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"supplier\" type=\"text\" placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"date\" type=\"text\" placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"totalamount\" type=\"text\" placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n         {/* array of inventory items */}\r\n         <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\"> +</span>\r\n                    </button>\r\n                </p>\r\n           <div className=\"field\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } /* add array no */ name=\"productId\" type=\"text\" placeholder=\"Product Id\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"quantity\" type=\"text\" placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                <label className=\"label is-small\">Base Unit</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"costprice\" type=\"text\" placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function InventoryList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedInventory, setSelectedInventory]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n    }\r\n\r\n    const handleRow= async(Inventory)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Inventory)\r\n\r\n        await setSelectedInventory(Inventory)\r\n\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       InventoryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Inventory  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Inventory, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findInventory= await InventoryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findInventory.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findInventory= await InventoryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findInventory.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Inventory  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                InventoryServ.on('created', (obj)=>getFacilities())\r\n                InventoryServ.on('updated', (obj)=>getFacilities())\r\n                InventoryServ.on('patched', (obj)=>getFacilities())\r\n                InventoryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n        \r\n        useEffect(() => {\r\n            getFacilities()\r\n            return () => {\r\n               \r\n            }\r\n        }, [state.StoreModule.selectedStore])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Inventory\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Inventory </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        {/* <th><abbr title=\"Category\">Category</abbr></th> */}\r\n                                        <th>Product</th>\r\n                                        <th><abbr title=\"Quantity\">Quantity</abbr></th>\r\n                                        <th><abbr title=\"Base Unit\">Base Unit</abbr></th>\r\n                                        <th><abbr title=\"Stock Value\">Stock Value</abbr></th>\r\n                                         <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                                        <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                                        <th><abbr title=\"Re-Order Level\">Re-Order Level</abbr></th>\r\n                                        <th><abbr title=\"Expiry\">Expiry</abbr></th> \r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Inventory, i)=>(\r\n\r\n                                            <tr key={Inventory._id} onClick={()=>handleRow(Inventory)} className={Inventory._id===(selectedInventory?._id||null)?\"is-selected\":\"\"} >\r\n                                            <th>{i+1}</th>\r\n                                            {/* <td>{Inventory.productDetail.category}</td> */}\r\n                                            <th>{Inventory.name}</th>\r\n                                            <td>{Inventory.quantity}</td>\r\n                                            <td>{Inventory.baseunit}</td>\r\n                                            <td>{Inventory.stockvalue}</td>\r\n                                            <td>{Inventory.costprice}</td>\r\n                                            <td>{Inventory.sellingprice}</td>\r\n                                            <td>{Inventory.reorder_level}</td> \r\n                                            <td>{Inventory.expiry}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function InventoryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const InventoryServ=client.service('/Inventory')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const {user} = useContext(UserContext) //,setUser\r\n    \r\n   \r\n\r\n   const Inventory =state.InventoryModule.selectedInventory \r\n   console.log(\"selected\",Inventory)\r\n\r\n   \r\n  const getFacilities= async()=>{\r\n     const findProductEntry= await client.service('productentry').find(\r\n        {query: {\r\n            'productitems.productId':Inventory.productId,\r\n            facility:user.currentEmployee.facilityDetail._id,\r\n            storeId:state.StoreModule.selectedStore._id,\r\n            $limit:20,\r\n            $sort: {\r\n                createdAt: -1\r\n            }\r\n            }})\r\n\r\n        console.log(findProductEntry)\r\n       }\r\n    \r\n       useEffect(() => {\r\n        getFacilities()\r\n           return () => {\r\n               \r\n           }\r\n       }, [Inventory])\r\n /* await setFacilities(findProductEntry.data)\r\n        }\r\n        else {\r\n            if (user.stacker){ */\r\n                /* toast({\r\n                    message: 'You do not qualify to view this',\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  }) \r\n                  return */\r\n               /*  const findProductEntry= await ProductEntryServ.find(\r\n                    {query: {\r\n                        \r\n                        $limit:20,\r\n                        $sort: {\r\n                            createdAt: -1\r\n                        }\r\n                        }})\r\n    \r\n            await setFacilities(findProductEntry.data)\r\n\r\n            }\r\n        }  */\r\n  /*   .then((res)=>{\r\n        console.log(res)\r\n            setFacilities(res.data)\r\n            setMessage(\" ProductEntry  fetched successfully\")\r\n            setSuccess(true)\r\n        })\r\n        .catch((err)=>{\r\n            setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n            setError(true)\r\n        }) */\r\n    \r\n    \r\n\r\n\r\n\r\n    const handleEdit= async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Inventory Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Product Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"><strong> {Inventory.name} </strong></span>\r\n                        </td>\r\n                    </tr>\r\n                   {/*  <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Inventory Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"InventoryType\">{Inventory.InventoryType} </span> \r\n                    </td>\r\n                </tr> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Set Price\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\"  /*  onClick={handleSetPrice} */>\r\n                        Audit\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-info is-small\" /* onClick={handleEdit} */>\r\n                        Transaction History\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" /* onClick={handleEdit} */>\r\n                        Reorder Level\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function InventoryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    const [billservice,setBillService] = useState()\r\n    // eslint-disable-next-line \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const billServ=client.service('billing')\r\n\r\n    const Inventory =state.InventoryModule.selectedInventory // set inventory\r\n    const handleSetPrice = async()=>{\r\n    \r\n        const service = await  billServ.get(Inventory.billingId) // get the service\r\n            const contractSel= service.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n            \r\n            setValue(\"price\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"oldprice\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            await setBillService(service)\r\n            console.log(contractSel,service)\r\n    }\r\n \r\n        useEffect(() => {\r\n            handleSetPrice()\r\n     \r\n            return () => {\r\n                \r\n            }\r\n        },[])\r\n\r\n   const handleCancel=async()=>{\r\n   \r\n    const    newInventoryModule={\r\n        selectedInventory:{},\r\n        show :'detail'\r\n      }\r\n        await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n            const    newInventoryModule={\r\n                selectedInventory:{},\r\n                show :'detail'\r\n            }\r\n        setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n\r\n        }\r\n\r\n\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Inventory._id\r\n        if (conf){\r\n             \r\n        InventoryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Inventory successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Inventory deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Inventory, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n       // data.facility=Inventory.facility\r\n          //console.log(data);\r\n          const contractSel= billservice.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n          contractSel[0].price=data.price \r\n          billServ.patch(billservice._id,billservice)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Inventory successfully\")\r\n                 toast({\r\n                    message: 'Price updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Price, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            }) \r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Set Price for {Inventory.name} per {Inventory.baseunit}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> New Selling Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"price\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Old Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"oldprice\" type=\"text\" placeholder=\"Inventory Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n           \r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='name' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Collections.js",["729","730","731","732","733","734","735","736"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Collections() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedInventory,setSelectedInventory]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Inventory  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <CollectionList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.InventoryModule.show ==='create')&&<InventoryCreate />}\r\n                {(state.InventoryModule.show ==='detail')&&<InventoryDetail  />}\r\n                {(state.InventoryModule.show ==='modify')&&<InventoryModify Inventory={selectedInventory} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function InventoryCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeInventory.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        InventoryServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Inventory successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Inventory created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Inventory ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Inventory: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field\">    \r\n                <div class=\"control\">\r\n                    <div class=\"select is-small\">\r\n                        <select>\r\n                            <option>Purchase Invoice </option>\r\n                            <option>Initialization</option>\r\n                            <option>Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> {/* Audit/initialization/Purchase Invoice */}\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"supplier\" type=\"text\" placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"date\" type=\"text\" placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"totalamount\" type=\"text\" placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n         {/* array of inventory items */}\r\n         <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\"> +</span>\r\n                    </button>\r\n                </p>\r\n           <div className=\"field\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } /* add array no */ name=\"productId\" type=\"text\" placeholder=\"Product Id\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"quantity\" type=\"text\" placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                <label className=\"label is-small\">Base Unit</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"costprice\" type=\"text\" placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function CollectionList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const InventoryServ=client.service('subwallettransactions')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedInventory, setSelectedInventory]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n    }\r\n\r\n    const handleRow= async(Inventory)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Inventory)\r\n\r\n        await setSelectedInventory(Inventory)\r\n\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='fromName'\r\n       console.log(val)\r\n       InventoryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:20,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                //console.log(res)\r\n               setFacilities(res.data)\r\n                /* setMessage(\" Inventory  fetched successfully\")\r\n                setSuccess(true)  */\r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                toast({\r\n                    message: 'Error during search ' +err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n               \r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n                const DAY_MS = 30*24 * 60 * 60 * 1000;\r\n        const findInventory= await InventoryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                   // storeId:state.StoreModule.selectedStore._id,\r\n                    category:\"credit\",\r\n                    createdAt:{\r\n                        $gt: new Date().getTime() - DAY_MS //last 30days\r\n\r\n                    },\r\n                    $limit:20,\r\n\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findInventory.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findInventory= await InventoryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findInventory.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Inventory  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n               \r\n                    console.log(facilities)\r\n                    //getFacilities(user)\r\n              \r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[facilities])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                InventoryServ.on('created', (obj)=>getFacilities())\r\n                InventoryServ.on('updated', (obj)=>getFacilities())\r\n                InventoryServ.on('patched', (obj)=>getFacilities())\r\n                InventoryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n        \r\n        useEffect(() => {\r\n            getFacilities()\r\n            return () => {\r\n               \r\n            }\r\n        }, [state.StoreModule.selectedStore])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Inventory\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Collections in last 30 days </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Cost Price\">Date</abbr></th>\r\n                                        {/* <th><abbr title=\"Category\">Category</abbr></th> */}\r\n                                        <th>Client</th>\r\n                                        <th><abbr title=\"Quantity\">Amount</abbr></th>\r\n                                        <th><abbr title=\"Base Unit\">Mode</abbr></th>\r\n                                       {/*  <th><abbr title=\"Stock Value\">Stock Value</abbr></th>\r\n                                         \r\n                                        <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                                        <th><abbr title=\"Re-Order Level\">Re-Order Level</abbr></th>\r\n                                        <th><abbr title=\"Expiry\">Expiry</abbr></th> \r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th> */}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Inventory, i)=>(\r\n\r\n                                            <tr key={Inventory._id} onClick={()=>handleRow(Inventory)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{new Date(Inventory.createdAt).toLocaleDateString('en-GB')}</td> {/*add time  */}\r\n                                            <th>{Inventory.fromName}</th>\r\n                                            <td>{Inventory.amount}</td>\r\n                                            <td>{Inventory.paymentmode}</td>\r\n                                            {/* <td>{Inventory.stockvalue}</td>\r\n                                            <td>{Inventory.costprice}</td>\r\n                                            <td>{Inventory.sellingprice}</td>\r\n                                            <td>{Inventory.reorder_level}</td> \r\n                                            <td>{Inventory.expiry}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td> */}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function InventoryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const InventoryServ=client.service('/Inventory')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const {user} = useContext(UserContext) //,setUser\r\n    \r\n   \r\n\r\n   const Inventory =state.InventoryModule.selectedInventory \r\n   console.log(\"selected\",Inventory)\r\n\r\n   \r\n  const getFacilities= async()=>{\r\n     const findProductEntry= await client.service('productentry').find(\r\n        {query: {\r\n            'productitems.productId':Inventory.productId,\r\n            facility:user.currentEmployee.facilityDetail._id,\r\n            storeId:state.StoreModule.selectedStore._id,\r\n            $limit:20,\r\n            $sort: {\r\n                createdAt: -1\r\n            }\r\n            }})\r\n\r\n        console.log(findProductEntry)\r\n       }\r\n    \r\n       useEffect(() => {\r\n        getFacilities()\r\n           return () => {\r\n               \r\n           }\r\n       }, [Inventory])\r\n /* await setFacilities(findProductEntry.data)\r\n        }\r\n        else {\r\n            if (user.stacker){ */\r\n                /* toast({\r\n                    message: 'You do not qualify to view this',\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  }) \r\n                  return */\r\n               /*  const findProductEntry= await ProductEntryServ.find(\r\n                    {query: {\r\n                        \r\n                        $limit:20,\r\n                        $sort: {\r\n                            createdAt: -1\r\n                        }\r\n                        }})\r\n    \r\n            await setFacilities(findProductEntry.data)\r\n\r\n            }\r\n        }  */\r\n  /*   .then((res)=>{\r\n        console.log(res)\r\n            setFacilities(res.data)\r\n            setMessage(\" ProductEntry  fetched successfully\")\r\n            setSuccess(true)\r\n        })\r\n        .catch((err)=>{\r\n            setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n            setError(true)\r\n        }) */\r\n    \r\n    \r\n\r\n\r\n\r\n    const handleEdit= async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Inventory Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Product Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"><strong> {Inventory.name} </strong></span>\r\n                        </td>\r\n                    </tr>\r\n                   {/*  <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Inventory Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"InventoryType\">{Inventory.InventoryType} </span> \r\n                    </td>\r\n                </tr> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Set Price\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\"  /*  onClick={handleSetPrice} */>\r\n                        Audit\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-info is-small\" /* onClick={handleEdit} */>\r\n                        Transaction History\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" /* onClick={handleEdit} */>\r\n                        Reorder Level\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function InventoryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    const [billservice,setBillService] = useState()\r\n    // eslint-disable-next-line \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const billServ=client.service('billing')\r\n\r\n    const Inventory =state.InventoryModule.selectedInventory // set inventory\r\n    const handleSetPrice = async()=>{\r\n    \r\n        const service = await  billServ.get(Inventory.billingId) // get the service\r\n            const contractSel= service.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n            \r\n            setValue(\"price\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"oldprice\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            await setBillService(service)\r\n            console.log(contractSel,service)\r\n    }\r\n \r\n        useEffect(() => {\r\n            handleSetPrice()\r\n     \r\n            return () => {\r\n                \r\n            }\r\n        },[])\r\n\r\n   const handleCancel=async()=>{\r\n   \r\n    const    newInventoryModule={\r\n        selectedInventory:{},\r\n        show :'detail'\r\n      }\r\n        await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n            const    newInventoryModule={\r\n                selectedInventory:{},\r\n                show :'detail'\r\n            }\r\n        setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n\r\n        }\r\n\r\n\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Inventory._id\r\n        if (conf){\r\n             \r\n        InventoryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Inventory successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Inventory deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Inventory, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n       // data.facility=Inventory.facility\r\n          //console.log(data);\r\n          const contractSel= billservice.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n          contractSel[0].price=data.price \r\n          billServ.patch(billservice._id,billservice)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Inventory successfully\")\r\n                 toast({\r\n                    message: 'Price updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Price, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            }) \r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Set Price for {Inventory.name} per {Inventory.baseunit}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> New Selling Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"price\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Old Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"oldprice\" type=\"text\" placeholder=\"Inventory Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n           \r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='name' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Services.js",[],{"ruleId":"737","severity":1,"message":"738","line":1,"column":47,"nodeType":"739","messageId":"740","endLine":1,"endColumn":53},{"ruleId":"737","severity":1,"message":"741","line":4,"column":10,"nodeType":"739","messageId":"740","endLine":4,"endColumn":17},{"ruleId":"737","severity":1,"message":"742","line":7,"column":9,"nodeType":"739","messageId":"740","endLine":7,"endColumn":14},{"ruleId":"737","severity":1,"message":"743","line":8,"column":17,"nodeType":"739","messageId":"740","endLine":8,"endColumn":42},{"ruleId":"737","severity":1,"message":"744","line":10,"column":8,"nodeType":"739","messageId":"740","endLine":10,"endColumn":22},{"ruleId":"737","severity":1,"message":"745","line":18,"column":5,"nodeType":"739","messageId":"740","endLine":18,"endColumn":23},{"ruleId":"737","severity":1,"message":"746","line":34,"column":12,"nodeType":"739","messageId":"740","endLine":34,"endColumn":17},{"ruleId":"737","severity":1,"message":"747","line":34,"column":19,"nodeType":"739","messageId":"740","endLine":34,"endColumn":27},{"ruleId":"737","severity":1,"message":"748","line":39,"column":10,"nodeType":"739","messageId":"740","endLine":39,"endColumn":18},{"ruleId":"737","severity":1,"message":"749","line":42,"column":11,"nodeType":"739","messageId":"740","endLine":42,"endColumn":21},{"ruleId":"737","severity":1,"message":"750","line":42,"column":22,"nodeType":"739","messageId":"740","endLine":42,"endColumn":35},{"ruleId":"737","severity":1,"message":"751","line":96,"column":12,"nodeType":"739","messageId":"740","endLine":96,"endColumn":20},{"ruleId":"737","severity":1,"message":"752","line":96,"column":22,"nodeType":"739","messageId":"740","endLine":96,"endColumn":33},{"ruleId":"737","severity":1,"message":"753","line":137,"column":11,"nodeType":"739","messageId":"740","endLine":137,"endColumn":30},{"ruleId":"737","severity":1,"message":"754","line":158,"column":11,"nodeType":"739","messageId":"740","endLine":158,"endColumn":26},{"ruleId":"737","severity":1,"message":"755","line":171,"column":14,"nodeType":"739","messageId":"740","endLine":171,"endColumn":19},{"ruleId":"737","severity":1,"message":"756","line":223,"column":11,"nodeType":"739","messageId":"740","endLine":223,"endColumn":20},{"ruleId":"757","severity":1,"message":"758","line":238,"column":15,"nodeType":"759","endLine":238,"endColumn":17,"suggestions":"760"},{"ruleId":"757","severity":1,"message":"761","line":258,"column":8,"nodeType":"759","endLine":258,"endColumn":34,"suggestions":"762"},{"ruleId":"737","severity":1,"message":"763","line":359,"column":12,"nodeType":"739","messageId":"740","endLine":359,"endColumn":24},{"ruleId":"737","severity":1,"message":"764","line":370,"column":6,"nodeType":"739","messageId":"740","endLine":370,"endColumn":18},{"ruleId":"737","severity":1,"message":"765","line":390,"column":11,"nodeType":"739","messageId":"740","endLine":390,"endColumn":21},{"ruleId":"757","severity":1,"message":"766","line":412,"column":8,"nodeType":"759","endLine":412,"endColumn":10,"suggestions":"767"},{"ruleId":"757","severity":1,"message":"768","line":437,"column":7,"nodeType":"759","endLine":437,"endColumn":9,"suggestions":"769"},{"ruleId":"770","replacedBy":"771"},{"ruleId":"772","replacedBy":"773"},{"ruleId":"737","severity":1,"message":"741","line":4,"column":10,"nodeType":"739","messageId":"740","endLine":4,"endColumn":17},{"ruleId":"737","severity":1,"message":"774","line":8,"column":9,"nodeType":"739","messageId":"740","endLine":8,"endColumn":22},{"ruleId":"737","severity":1,"message":"775","line":17,"column":13,"nodeType":"739","messageId":"740","endLine":17,"endColumn":20},{"ruleId":"737","severity":1,"message":"776","line":18,"column":13,"nodeType":"739","messageId":"740","endLine":18,"endColumn":20},{"ruleId":"737","severity":1,"message":"777","line":37,"column":13,"nodeType":"739","messageId":"740","endLine":37,"endColumn":24},{"ruleId":"737","severity":1,"message":"778","line":48,"column":14,"nodeType":"739","messageId":"740","endLine":48,"endColumn":28},{"ruleId":"737","severity":1,"message":"779","line":48,"column":30,"nodeType":"739","messageId":"740","endLine":48,"endColumn":47},{"ruleId":"737","severity":1,"message":"780","line":49,"column":24,"nodeType":"739","messageId":"740","endLine":49,"endColumn":35},{"ruleId":"737","severity":1,"message":"781","line":55,"column":14,"nodeType":"739","messageId":"740","endLine":55,"endColumn":21},{"ruleId":"737","severity":1,"message":"782","line":58,"column":12,"nodeType":"739","messageId":"740","endLine":58,"endColumn":19},{"ruleId":"737","severity":1,"message":"783","line":60,"column":10,"nodeType":"739","messageId":"740","endLine":60,"endColumn":20},{"ruleId":"737","severity":1,"message":"784","line":67,"column":9,"nodeType":"739","messageId":"740","endLine":67,"endColumn":26},{"ruleId":"737","severity":1,"message":"785","line":135,"column":9,"nodeType":"739","messageId":"740","endLine":135,"endColumn":26},{"ruleId":"737","severity":1,"message":"786","line":210,"column":12,"nodeType":"739","messageId":"740","endLine":210,"endColumn":28},{"ruleId":"737","severity":1,"message":"787","line":220,"column":12,"nodeType":"739","messageId":"740","endLine":220,"endColumn":27},{"ruleId":"737","severity":1,"message":"788","line":314,"column":12,"nodeType":"739","messageId":"740","endLine":314,"endColumn":22},{"ruleId":"757","severity":1,"message":"789","line":344,"column":8,"nodeType":"759","endLine":344,"endColumn":14,"suggestions":"790"},{"ruleId":"737","severity":1,"message":"791","line":346,"column":12,"nodeType":"739","messageId":"740","endLine":346,"endColumn":21},{"ruleId":"737","severity":1,"message":"792","line":360,"column":12,"nodeType":"739","messageId":"740","endLine":360,"endColumn":32},{"ruleId":"737","severity":1,"message":"793","line":377,"column":12,"nodeType":"739","messageId":"740","endLine":377,"endColumn":20},{"ruleId":"737","severity":1,"message":"794","line":420,"column":11,"nodeType":"739","messageId":"740","endLine":420,"endColumn":29},{"ruleId":"737","severity":1,"message":"795","line":425,"column":11,"nodeType":"739","messageId":"740","endLine":425,"endColumn":20},{"ruleId":"757","severity":1,"message":"796","line":529,"column":8,"nodeType":"759","endLine":529,"endColumn":29,"suggestions":"797"},{"ruleId":"757","severity":1,"message":"798","line":551,"column":8,"nodeType":"759","endLine":551,"endColumn":21,"suggestions":"799"},{"ruleId":"757","severity":1,"message":"800","line":605,"column":9,"nodeType":"759","endLine":605,"endColumn":11,"suggestions":"801"},{"ruleId":"737","severity":1,"message":"802","line":1094,"column":12,"nodeType":"739","messageId":"740","endLine":1094,"endColumn":24},{"ruleId":"737","severity":1,"message":"803","line":1179,"column":11,"nodeType":"739","messageId":"740","endLine":1179,"endColumn":27},{"ruleId":"737","severity":1,"message":"804","line":1182,"column":11,"nodeType":"739","messageId":"740","endLine":1182,"endColumn":27},{"ruleId":"770","replacedBy":"805"},{"ruleId":"772","replacedBy":"806"},{"ruleId":"737","severity":1,"message":"807","line":6,"column":7,"nodeType":"739","messageId":"740","endLine":6,"endColumn":12},{"ruleId":"737","severity":1,"message":"808","line":8,"column":7,"nodeType":"739","messageId":"740","endLine":8,"endColumn":10},{"ruleId":"770","replacedBy":"809"},{"ruleId":"772","replacedBy":"810"},{"ruleId":"737","severity":1,"message":"811","line":9,"column":37,"nodeType":"739","messageId":"740","endLine":9,"endColumn":42},{"ruleId":"737","severity":1,"message":"812","line":9,"column":44,"nodeType":"739","messageId":"740","endLine":9,"endColumn":50},{"ruleId":"737","severity":1,"message":"747","line":10,"column":19,"nodeType":"739","messageId":"740","endLine":10,"endColumn":27},{"ruleId":"737","severity":1,"message":"813","line":11,"column":25,"nodeType":"739","messageId":"740","endLine":11,"endColumn":40},{"ruleId":"737","severity":1,"message":"811","line":7,"column":37,"nodeType":"739","messageId":"740","endLine":7,"endColumn":42},{"ruleId":"737","severity":1,"message":"812","line":7,"column":44,"nodeType":"739","messageId":"740","endLine":7,"endColumn":50},{"ruleId":"737","severity":1,"message":"814","line":2,"column":40,"nodeType":"739","messageId":"740","endLine":2,"endColumn":44},{"ruleId":"737","severity":1,"message":"815","line":11,"column":17,"nodeType":"739","messageId":"740","endLine":11,"endColumn":26},{"ruleId":"737","severity":1,"message":"816","line":12,"column":9,"nodeType":"739","messageId":"740","endLine":12,"endColumn":20},{"ruleId":"737","severity":1,"message":"817","line":16,"column":18,"nodeType":"739","messageId":"740","endLine":16,"endColumn":26},{"ruleId":"757","severity":1,"message":"818","line":32,"column":12,"nodeType":"759","endLine":32,"endColumn":14,"suggestions":"819"},{"ruleId":"737","severity":1,"message":"814","line":2,"column":40,"nodeType":"739","messageId":"740","endLine":2,"endColumn":44},{"ruleId":"737","severity":1,"message":"816","line":11,"column":9,"nodeType":"739","messageId":"740","endLine":11,"endColumn":20},{"ruleId":"737","severity":1,"message":"817","line":14,"column":18,"nodeType":"739","messageId":"740","endLine":14,"endColumn":26},{"ruleId":"757","severity":1,"message":"820","line":30,"column":12,"nodeType":"759","endLine":30,"endColumn":14,"suggestions":"821"},{"ruleId":"770","replacedBy":"822"},{"ruleId":"772","replacedBy":"823"},{"ruleId":"770","replacedBy":"824"},{"ruleId":"772","replacedBy":"825"},{"ruleId":"757","severity":1,"message":"826","line":81,"column":7,"nodeType":"759","endLine":81,"endColumn":13,"suggestions":"827"},{"ruleId":"757","severity":1,"message":"828","line":389,"column":15,"nodeType":"759","endLine":389,"endColumn":17,"suggestions":"829"},{"ruleId":"770","replacedBy":"830"},{"ruleId":"772","replacedBy":"831"},{"ruleId":"737","severity":1,"message":"746","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":47,"column":12,"nodeType":"739","messageId":"740","endLine":47,"endColumn":19},{"ruleId":"737","severity":1,"message":"777","line":63,"column":12,"nodeType":"739","messageId":"740","endLine":63,"endColumn":23},{"ruleId":"737","severity":1,"message":"782","line":74,"column":11,"nodeType":"739","messageId":"740","endLine":74,"endColumn":18},{"ruleId":"737","severity":1,"message":"783","line":76,"column":9,"nodeType":"739","messageId":"740","endLine":76,"endColumn":19},{"ruleId":"757","severity":1,"message":"789","line":231,"column":7,"nodeType":"759","endLine":231,"endColumn":13,"suggestions":"832"},{"ruleId":"757","severity":1,"message":"833","line":338,"column":21,"nodeType":"834","endLine":338,"endColumn":42},{"ruleId":"835","severity":1,"message":"836","line":682,"column":21,"nodeType":"837","messageId":"838","endLine":682,"endColumn":36},{"ruleId":"757","severity":1,"message":"839","line":700,"column":15,"nodeType":"759","endLine":700,"endColumn":17,"suggestions":"840"},{"ruleId":"757","severity":1,"message":"841","line":708,"column":16,"nodeType":"759","endLine":708,"endColumn":49,"suggestions":"842"},{"ruleId":"737","severity":1,"message":"765","line":799,"column":11,"nodeType":"739","messageId":"740","endLine":799,"endColumn":21},{"ruleId":"737","severity":1,"message":"812","line":1007,"column":53,"nodeType":"739","messageId":"740","endLine":1007,"endColumn":59},{"ruleId":"737","severity":1,"message":"803","line":1388,"column":11,"nodeType":"739","messageId":"740","endLine":1388,"endColumn":27},{"ruleId":"737","severity":1,"message":"746","line":43,"column":12,"nodeType":"739","messageId":"740","endLine":43,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":19},{"ruleId":"757","severity":1,"message":"843","line":416,"column":15,"nodeType":"759","endLine":416,"endColumn":17,"suggestions":"844"},{"ruleId":"757","severity":1,"message":"841","line":423,"column":12,"nodeType":"759","endLine":423,"endColumn":45,"suggestions":"845"},{"ruleId":"757","severity":1,"message":"841","line":546,"column":11,"nodeType":"759","endLine":546,"endColumn":22,"suggestions":"846"},{"ruleId":"737","severity":1,"message":"812","line":668,"column":53,"nodeType":"739","messageId":"740","endLine":668,"endColumn":59},{"ruleId":"757","severity":1,"message":"847","line":708,"column":11,"nodeType":"759","endLine":708,"endColumn":13,"suggestions":"848"},{"ruleId":"737","severity":1,"message":"849","line":731,"column":11,"nodeType":"739","messageId":"740","endLine":731,"endColumn":23},{"ruleId":"737","severity":1,"message":"746","line":43,"column":12,"nodeType":"739","messageId":"740","endLine":43,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":19},{"ruleId":"757","severity":1,"message":"850","line":392,"column":15,"nodeType":"759","endLine":392,"endColumn":17,"suggestions":"851"},{"ruleId":"737","severity":1,"message":"812","line":623,"column":53,"nodeType":"739","messageId":"740","endLine":623,"endColumn":59},{"ruleId":"737","severity":1,"message":"849","line":696,"column":11,"nodeType":"739","messageId":"740","endLine":696,"endColumn":23},{"ruleId":"737","severity":1,"message":"738","line":1,"column":47,"nodeType":"739","messageId":"740","endLine":1,"endColumn":53},{"ruleId":"737","severity":1,"message":"852","line":3,"column":9,"nodeType":"739","messageId":"740","endLine":3,"endColumn":22},{"ruleId":"737","severity":1,"message":"741","line":4,"column":10,"nodeType":"739","messageId":"740","endLine":4,"endColumn":17},{"ruleId":"737","severity":1,"message":"742","line":7,"column":9,"nodeType":"739","messageId":"740","endLine":7,"endColumn":14},{"ruleId":"737","severity":1,"message":"743","line":8,"column":17,"nodeType":"739","messageId":"740","endLine":8,"endColumn":42},{"ruleId":"737","severity":1,"message":"744","line":10,"column":8,"nodeType":"739","messageId":"740","endLine":10,"endColumn":22},{"ruleId":"737","severity":1,"message":"753","line":57,"column":12,"nodeType":"739","messageId":"740","endLine":57,"endColumn":31},{"ruleId":"737","severity":1,"message":"754","line":76,"column":12,"nodeType":"739","messageId":"740","endLine":76,"endColumn":27},{"ruleId":"737","severity":1,"message":"853","line":88,"column":12,"nodeType":"739","messageId":"740","endLine":88,"endColumn":24},{"ruleId":"737","severity":1,"message":"755","line":89,"column":15,"nodeType":"739","messageId":"740","endLine":89,"endColumn":20},{"ruleId":"854","severity":1,"message":"855","line":102,"column":18,"nodeType":"856","messageId":"857","endLine":102,"endColumn":30},{"ruleId":"757","severity":1,"message":"858","line":158,"column":16,"nodeType":"759","endLine":158,"endColumn":18,"suggestions":"859"},{"ruleId":"737","severity":1,"message":"756","line":160,"column":16,"nodeType":"739","messageId":"740","endLine":160,"endColumn":25},{"ruleId":"737","severity":1,"message":"741","line":4,"column":10,"nodeType":"739","messageId":"740","endLine":4,"endColumn":17},{"ruleId":"737","severity":1,"message":"746","line":15,"column":13,"nodeType":"739","messageId":"740","endLine":15,"endColumn":18},{"ruleId":"737","severity":1,"message":"776","line":17,"column":13,"nodeType":"739","messageId":"740","endLine":17,"endColumn":20},{"ruleId":"737","severity":1,"message":"777","line":33,"column":13,"nodeType":"739","messageId":"740","endLine":33,"endColumn":24},{"ruleId":"737","severity":1,"message":"782","line":44,"column":12,"nodeType":"739","messageId":"740","endLine":44,"endColumn":19},{"ruleId":"737","severity":1,"message":"783","line":46,"column":10,"nodeType":"739","messageId":"740","endLine":46,"endColumn":20},{"ruleId":"757","severity":1,"message":"789","line":201,"column":8,"nodeType":"759","endLine":201,"endColumn":14,"suggestions":"860"},{"ruleId":"757","severity":1,"message":"833","line":308,"column":22,"nodeType":"834","endLine":308,"endColumn":43},{"ruleId":"737","severity":1,"message":"803","line":609,"column":11,"nodeType":"739","messageId":"740","endLine":609,"endColumn":27},{"ruleId":"737","severity":1,"message":"741","line":4,"column":10,"nodeType":"739","messageId":"740","endLine":4,"endColumn":17},{"ruleId":"737","severity":1,"message":"742","line":8,"column":9,"nodeType":"739","messageId":"740","endLine":8,"endColumn":14},{"ruleId":"737","severity":1,"message":"861","line":11,"column":25,"nodeType":"739","messageId":"740","endLine":11,"endColumn":43},{"ruleId":"737","severity":1,"message":"862","line":34,"column":18,"nodeType":"739","messageId":"740","endLine":34,"endColumn":25},{"ruleId":"737","severity":1,"message":"863","line":36,"column":11,"nodeType":"739","messageId":"740","endLine":36,"endColumn":17},{"ruleId":"737","severity":1,"message":"754","line":51,"column":11,"nodeType":"739","messageId":"740","endLine":51,"endColumn":26},{"ruleId":"737","severity":1,"message":"864","line":124,"column":19,"nodeType":"739","messageId":"740","endLine":124,"endColumn":25},{"ruleId":"757","severity":1,"message":"865","line":203,"column":15,"nodeType":"759","endLine":203,"endColumn":17,"suggestions":"866"},{"ruleId":"737","severity":1,"message":"867","line":10,"column":12,"nodeType":"739","messageId":"740","endLine":10,"endColumn":17},{"ruleId":"757","severity":1,"message":"868","line":283,"column":7,"nodeType":"759","endLine":283,"endColumn":9,"suggestions":"869"},{"ruleId":"737","severity":1,"message":"741","line":4,"column":10,"nodeType":"739","messageId":"740","endLine":4,"endColumn":17},{"ruleId":"737","severity":1,"message":"774","line":8,"column":9,"nodeType":"739","messageId":"740","endLine":8,"endColumn":22},{"ruleId":"737","severity":1,"message":"776","line":18,"column":13,"nodeType":"739","messageId":"740","endLine":18,"endColumn":20},{"ruleId":"737","severity":1,"message":"870","line":21,"column":12,"nodeType":"739","messageId":"740","endLine":21,"endColumn":28},{"ruleId":"737","severity":1,"message":"871","line":30,"column":13,"nodeType":"739","messageId":"740","endLine":30,"endColumn":20},{"ruleId":"737","severity":1,"message":"777","line":35,"column":13,"nodeType":"739","messageId":"740","endLine":35,"endColumn":24},{"ruleId":"737","severity":1,"message":"782","line":52,"column":12,"nodeType":"739","messageId":"740","endLine":52,"endColumn":19},{"ruleId":"737","severity":1,"message":"783","line":54,"column":10,"nodeType":"739","messageId":"740","endLine":54,"endColumn":20},{"ruleId":"737","severity":1,"message":"786","line":226,"column":12,"nodeType":"739","messageId":"740","endLine":226,"endColumn":28},{"ruleId":"757","severity":1,"message":"789","line":365,"column":8,"nodeType":"759","endLine":365,"endColumn":14,"suggestions":"872"},{"ruleId":"737","severity":1,"message":"791","line":367,"column":12,"nodeType":"739","messageId":"740","endLine":367,"endColumn":21},{"ruleId":"737","severity":1,"message":"795","line":487,"column":11,"nodeType":"739","messageId":"740","endLine":487,"endColumn":20},{"ruleId":"757","severity":1,"message":"873","line":584,"column":8,"nodeType":"759","endLine":584,"endColumn":20,"suggestions":"874"},{"ruleId":"757","severity":1,"message":"833","line":599,"column":21,"nodeType":"834","endLine":599,"endColumn":42},{"ruleId":"737","severity":1,"message":"802","line":868,"column":12,"nodeType":"739","messageId":"740","endLine":868,"endColumn":24},{"ruleId":"737","severity":1,"message":"803","line":953,"column":11,"nodeType":"739","messageId":"740","endLine":953,"endColumn":27},{"ruleId":"737","severity":1,"message":"804","line":956,"column":11,"nodeType":"739","messageId":"740","endLine":956,"endColumn":27},{"ruleId":"770","replacedBy":"875"},{"ruleId":"772","replacedBy":"876"},{"ruleId":"737","severity":1,"message":"738","line":1,"column":47,"nodeType":"739","messageId":"740","endLine":1,"endColumn":53},{"ruleId":"737","severity":1,"message":"741","line":4,"column":10,"nodeType":"739","messageId":"740","endLine":4,"endColumn":17},{"ruleId":"737","severity":1,"message":"742","line":7,"column":9,"nodeType":"739","messageId":"740","endLine":7,"endColumn":14},{"ruleId":"737","severity":1,"message":"743","line":8,"column":17,"nodeType":"739","messageId":"740","endLine":8,"endColumn":42},{"ruleId":"737","severity":1,"message":"744","line":10,"column":8,"nodeType":"739","messageId":"740","endLine":10,"endColumn":22},{"ruleId":"737","severity":1,"message":"745","line":18,"column":5,"nodeType":"739","messageId":"740","endLine":18,"endColumn":23},{"ruleId":"737","severity":1,"message":"746","line":35,"column":12,"nodeType":"739","messageId":"740","endLine":35,"endColumn":17},{"ruleId":"737","severity":1,"message":"747","line":35,"column":19,"nodeType":"739","messageId":"740","endLine":35,"endColumn":27},{"ruleId":"737","severity":1,"message":"748","line":40,"column":10,"nodeType":"739","messageId":"740","endLine":40,"endColumn":18},{"ruleId":"737","severity":1,"message":"749","line":43,"column":11,"nodeType":"739","messageId":"740","endLine":43,"endColumn":21},{"ruleId":"737","severity":1,"message":"750","line":43,"column":22,"nodeType":"739","messageId":"740","endLine":43,"endColumn":35},{"ruleId":"737","severity":1,"message":"751","line":97,"column":12,"nodeType":"739","messageId":"740","endLine":97,"endColumn":20},{"ruleId":"737","severity":1,"message":"752","line":97,"column":22,"nodeType":"739","messageId":"740","endLine":97,"endColumn":33},{"ruleId":"737","severity":1,"message":"753","line":138,"column":11,"nodeType":"739","messageId":"740","endLine":138,"endColumn":30},{"ruleId":"737","severity":1,"message":"754","line":159,"column":11,"nodeType":"739","messageId":"740","endLine":159,"endColumn":26},{"ruleId":"737","severity":1,"message":"755","line":172,"column":14,"nodeType":"739","messageId":"740","endLine":172,"endColumn":19},{"ruleId":"737","severity":1,"message":"756","line":229,"column":11,"nodeType":"739","messageId":"740","endLine":229,"endColumn":20},{"ruleId":"757","severity":1,"message":"877","line":245,"column":15,"nodeType":"759","endLine":245,"endColumn":17,"suggestions":"878"},{"ruleId":"757","severity":1,"message":"761","line":282,"column":8,"nodeType":"759","endLine":282,"endColumn":34,"suggestions":"879"},{"ruleId":"737","severity":1,"message":"763","line":383,"column":12,"nodeType":"739","messageId":"740","endLine":383,"endColumn":24},{"ruleId":"737","severity":1,"message":"764","line":394,"column":6,"nodeType":"739","messageId":"740","endLine":394,"endColumn":18},{"ruleId":"737","severity":1,"message":"765","line":414,"column":11,"nodeType":"739","messageId":"740","endLine":414,"endColumn":21},{"ruleId":"757","severity":1,"message":"766","line":436,"column":8,"nodeType":"759","endLine":436,"endColumn":10,"suggestions":"880"},{"ruleId":"757","severity":1,"message":"768","line":461,"column":7,"nodeType":"759","endLine":461,"endColumn":9,"suggestions":"881"},{"ruleId":"737","severity":1,"message":"746","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":47,"column":12,"nodeType":"739","messageId":"740","endLine":47,"endColumn":19},{"ruleId":"737","severity":1,"message":"777","line":63,"column":12,"nodeType":"739","messageId":"740","endLine":63,"endColumn":23},{"ruleId":"737","severity":1,"message":"782","line":74,"column":11,"nodeType":"739","messageId":"740","endLine":74,"endColumn":18},{"ruleId":"737","severity":1,"message":"783","line":76,"column":9,"nodeType":"739","messageId":"740","endLine":76,"endColumn":19},{"ruleId":"757","severity":1,"message":"789","line":235,"column":7,"nodeType":"759","endLine":235,"endColumn":13,"suggestions":"882"},{"ruleId":"757","severity":1,"message":"833","line":347,"column":21,"nodeType":"834","endLine":347,"endColumn":42},{"ruleId":"835","severity":1,"message":"836","line":694,"column":21,"nodeType":"837","messageId":"838","endLine":694,"endColumn":36},{"ruleId":"757","severity":1,"message":"839","line":712,"column":15,"nodeType":"759","endLine":712,"endColumn":17,"suggestions":"883"},{"ruleId":"757","severity":1,"message":"841","line":720,"column":16,"nodeType":"759","endLine":720,"endColumn":49,"suggestions":"884"},{"ruleId":"737","severity":1,"message":"765","line":811,"column":11,"nodeType":"739","messageId":"740","endLine":811,"endColumn":21},{"ruleId":"737","severity":1,"message":"812","line":1019,"column":53,"nodeType":"739","messageId":"740","endLine":1019,"endColumn":59},{"ruleId":"737","severity":1,"message":"803","line":1400,"column":11,"nodeType":"739","messageId":"740","endLine":1400,"endColumn":27},{"ruleId":"737","severity":1,"message":"746","line":44,"column":12,"nodeType":"739","messageId":"740","endLine":44,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":46,"column":12,"nodeType":"739","messageId":"740","endLine":46,"endColumn":19},{"ruleId":"835","severity":1,"message":"836","line":537,"column":21,"nodeType":"837","messageId":"838","endLine":537,"endColumn":36},{"ruleId":"757","severity":1,"message":"839","line":555,"column":15,"nodeType":"759","endLine":555,"endColumn":17,"suggestions":"885"},{"ruleId":"757","severity":1,"message":"841","line":563,"column":16,"nodeType":"759","endLine":563,"endColumn":49,"suggestions":"886"},{"ruleId":"737","severity":1,"message":"765","line":654,"column":11,"nodeType":"739","messageId":"740","endLine":654,"endColumn":21},{"ruleId":"737","severity":1,"message":"812","line":862,"column":53,"nodeType":"739","messageId":"740","endLine":862,"endColumn":59},{"ruleId":"737","severity":1,"message":"887","line":1,"column":16,"nodeType":"739","messageId":"740","endLine":1,"endColumn":24},{"ruleId":"737","severity":1,"message":"888","line":1,"column":25,"nodeType":"739","messageId":"740","endLine":1,"endColumn":34},{"ruleId":"737","severity":1,"message":"889","line":2,"column":8,"nodeType":"739","messageId":"740","endLine":2,"endColumn":13},{"ruleId":"737","severity":1,"message":"815","line":2,"column":17,"nodeType":"739","messageId":"740","endLine":2,"endColumn":26},{"ruleId":"737","severity":1,"message":"816","line":3,"column":9,"nodeType":"739","messageId":"740","endLine":3,"endColumn":20},{"ruleId":"737","severity":1,"message":"890","line":8,"column":11,"nodeType":"739","messageId":"740","endLine":8,"endColumn":27},{"ruleId":"737","severity":1,"message":"738","line":1,"column":47,"nodeType":"739","messageId":"740","endLine":1,"endColumn":53},{"ruleId":"737","severity":1,"message":"741","line":4,"column":10,"nodeType":"739","messageId":"740","endLine":4,"endColumn":17},{"ruleId":"737","severity":1,"message":"742","line":7,"column":9,"nodeType":"739","messageId":"740","endLine":7,"endColumn":14},{"ruleId":"737","severity":1,"message":"743","line":8,"column":17,"nodeType":"739","messageId":"740","endLine":8,"endColumn":42},{"ruleId":"737","severity":1,"message":"746","line":33,"column":12,"nodeType":"739","messageId":"740","endLine":33,"endColumn":17},{"ruleId":"737","severity":1,"message":"747","line":33,"column":19,"nodeType":"739","messageId":"740","endLine":33,"endColumn":27},{"ruleId":"737","severity":1,"message":"891","line":38,"column":10,"nodeType":"739","messageId":"740","endLine":38,"endColumn":19},{"ruleId":"737","severity":1,"message":"749","line":41,"column":11,"nodeType":"739","messageId":"740","endLine":41,"endColumn":21},{"ruleId":"737","severity":1,"message":"750","line":41,"column":22,"nodeType":"739","messageId":"740","endLine":41,"endColumn":35},{"ruleId":"737","severity":1,"message":"754","line":136,"column":11,"nodeType":"739","messageId":"740","endLine":136,"endColumn":26},{"ruleId":"737","severity":1,"message":"755","line":149,"column":14,"nodeType":"739","messageId":"740","endLine":149,"endColumn":19},{"ruleId":"757","severity":1,"message":"858","line":225,"column":15,"nodeType":"759","endLine":225,"endColumn":17,"suggestions":"892"},{"ruleId":"737","severity":1,"message":"756","line":227,"column":15,"nodeType":"739","messageId":"740","endLine":227,"endColumn":24},{"ruleId":"737","severity":1,"message":"763","line":325,"column":12,"nodeType":"739","messageId":"740","endLine":325,"endColumn":24},{"ruleId":"737","severity":1,"message":"764","line":336,"column":6,"nodeType":"739","messageId":"740","endLine":336,"endColumn":18},{"ruleId":"737","severity":1,"message":"765","line":356,"column":11,"nodeType":"739","messageId":"740","endLine":356,"endColumn":21},{"ruleId":"757","severity":1,"message":"766","line":378,"column":8,"nodeType":"759","endLine":378,"endColumn":10,"suggestions":"893"},{"ruleId":"757","severity":1,"message":"894","line":403,"column":7,"nodeType":"759","endLine":403,"endColumn":9,"suggestions":"895"},{"ruleId":"737","severity":1,"message":"746","line":43,"column":12,"nodeType":"739","messageId":"740","endLine":43,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":19},{"ruleId":"757","severity":1,"message":"896","line":317,"column":15,"nodeType":"759","endLine":317,"endColumn":17,"suggestions":"897"},{"ruleId":"737","severity":1,"message":"812","line":548,"column":53,"nodeType":"739","messageId":"740","endLine":548,"endColumn":59},{"ruleId":"737","severity":1,"message":"849","line":621,"column":11,"nodeType":"739","messageId":"740","endLine":621,"endColumn":23},{"ruleId":"737","severity":1,"message":"743","line":9,"column":17,"nodeType":"739","messageId":"740","endLine":9,"endColumn":42},{"ruleId":"737","severity":1,"message":"746","line":46,"column":12,"nodeType":"739","messageId":"740","endLine":46,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":48,"column":12,"nodeType":"739","messageId":"740","endLine":48,"endColumn":19},{"ruleId":"737","severity":1,"message":"870","line":51,"column":11,"nodeType":"739","messageId":"740","endLine":51,"endColumn":27},{"ruleId":"737","severity":1,"message":"898","line":59,"column":12,"nodeType":"739","messageId":"740","endLine":59,"endColumn":21},{"ruleId":"737","severity":1,"message":"899","line":62,"column":12,"nodeType":"739","messageId":"740","endLine":62,"endColumn":16},{"ruleId":"737","severity":1,"message":"900","line":72,"column":12,"nodeType":"739","messageId":"740","endLine":72,"endColumn":24},{"ruleId":"737","severity":1,"message":"901","line":72,"column":25,"nodeType":"739","messageId":"740","endLine":72,"endColumn":40},{"ruleId":"737","severity":1,"message":"786","line":145,"column":11,"nodeType":"739","messageId":"740","endLine":145,"endColumn":27},{"ruleId":"737","severity":1,"message":"791","line":189,"column":11,"nodeType":"739","messageId":"740","endLine":189,"endColumn":20},{"ruleId":"757","severity":1,"message":"902","line":260,"column":8,"nodeType":"759","endLine":260,"endColumn":10,"suggestions":"903"},{"ruleId":"737","severity":1,"message":"755","line":454,"column":14,"nodeType":"739","messageId":"740","endLine":454,"endColumn":19},{"ruleId":"757","severity":1,"message":"858","line":518,"column":15,"nodeType":"759","endLine":518,"endColumn":17,"suggestions":"904"},{"ruleId":"737","severity":1,"message":"765","line":608,"column":11,"nodeType":"739","messageId":"740","endLine":608,"endColumn":21},{"ruleId":"737","severity":1,"message":"812","line":816,"column":53,"nodeType":"739","messageId":"740","endLine":816,"endColumn":59},{"ruleId":"737","severity":1,"message":"802","line":1110,"column":12,"nodeType":"739","messageId":"740","endLine":1110,"endColumn":24},{"ruleId":"737","severity":1,"message":"905","line":1131,"column":11,"nodeType":"739","messageId":"740","endLine":1131,"endColumn":21},{"ruleId":"737","severity":1,"message":"803","line":1204,"column":11,"nodeType":"739","messageId":"740","endLine":1204,"endColumn":27},{"ruleId":"737","severity":1,"message":"804","line":1207,"column":11,"nodeType":"739","messageId":"740","endLine":1207,"endColumn":27},{"ruleId":"757","severity":1,"message":"906","line":1216,"column":8,"nodeType":"759","endLine":1216,"endColumn":15,"suggestions":"907"},{"ruleId":"908","severity":1,"message":"909","line":1254,"column":75,"nodeType":"910","endLine":1254,"endColumn":79},{"ruleId":"737","severity":1,"message":"746","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":47,"column":12,"nodeType":"739","messageId":"740","endLine":47,"endColumn":19},{"ruleId":"737","severity":1,"message":"777","line":63,"column":12,"nodeType":"739","messageId":"740","endLine":63,"endColumn":23},{"ruleId":"737","severity":1,"message":"782","line":74,"column":11,"nodeType":"739","messageId":"740","endLine":74,"endColumn":18},{"ruleId":"737","severity":1,"message":"783","line":76,"column":9,"nodeType":"739","messageId":"740","endLine":76,"endColumn":19},{"ruleId":"757","severity":1,"message":"789","line":235,"column":7,"nodeType":"759","endLine":235,"endColumn":13,"suggestions":"911"},{"ruleId":"757","severity":1,"message":"833","line":347,"column":21,"nodeType":"834","endLine":347,"endColumn":42},{"ruleId":"757","severity":1,"message":"912","line":410,"column":8,"nodeType":"759","endLine":410,"endColumn":29,"suggestions":"913"},{"ruleId":"757","severity":1,"message":"914","line":425,"column":8,"nodeType":"759","endLine":425,"endColumn":21,"suggestions":"915"},{"ruleId":"835","severity":1,"message":"836","line":763,"column":21,"nodeType":"837","messageId":"838","endLine":763,"endColumn":36},{"ruleId":"757","severity":1,"message":"839","line":781,"column":15,"nodeType":"759","endLine":781,"endColumn":17,"suggestions":"916"},{"ruleId":"757","severity":1,"message":"841","line":789,"column":16,"nodeType":"759","endLine":789,"endColumn":49,"suggestions":"917"},{"ruleId":"737","severity":1,"message":"765","line":880,"column":11,"nodeType":"739","messageId":"740","endLine":880,"endColumn":21},{"ruleId":"737","severity":1,"message":"812","line":1088,"column":53,"nodeType":"739","messageId":"740","endLine":1088,"endColumn":59},{"ruleId":"737","severity":1,"message":"803","line":1469,"column":11,"nodeType":"739","messageId":"740","endLine":1469,"endColumn":27},{"ruleId":"737","severity":1,"message":"814","line":2,"column":40,"nodeType":"739","messageId":"740","endLine":2,"endColumn":44},{"ruleId":"757","severity":1,"message":"868","line":275,"column":7,"nodeType":"759","endLine":275,"endColumn":9,"suggestions":"918"},{"ruleId":"737","severity":1,"message":"746","line":43,"column":12,"nodeType":"739","messageId":"740","endLine":43,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":19},{"ruleId":"757","severity":1,"message":"919","line":389,"column":15,"nodeType":"759","endLine":389,"endColumn":17,"suggestions":"920"},{"ruleId":"737","severity":1,"message":"812","line":620,"column":53,"nodeType":"739","messageId":"740","endLine":620,"endColumn":59},{"ruleId":"737","severity":1,"message":"746","line":43,"column":12,"nodeType":"739","messageId":"740","endLine":43,"endColumn":17},{"ruleId":"737","severity":1,"message":"775","line":44,"column":12,"nodeType":"739","messageId":"740","endLine":44,"endColumn":19},{"ruleId":"737","severity":1,"message":"776","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":19},{"ruleId":"737","severity":1,"message":"785","line":56,"column":11,"nodeType":"739","messageId":"740","endLine":56,"endColumn":28},{"ruleId":"757","severity":1,"message":"921","line":392,"column":15,"nodeType":"759","endLine":392,"endColumn":17,"suggestions":"922"},{"ruleId":"737","severity":1,"message":"812","line":624,"column":53,"nodeType":"739","messageId":"740","endLine":624,"endColumn":59},{"ruleId":"737","severity":1,"message":"849","line":697,"column":11,"nodeType":"739","messageId":"740","endLine":697,"endColumn":23},{"ruleId":"737","severity":1,"message":"887","line":1,"column":16,"nodeType":"739","messageId":"740","endLine":1,"endColumn":24},{"ruleId":"737","severity":1,"message":"888","line":1,"column":25,"nodeType":"739","messageId":"740","endLine":1,"endColumn":34},{"ruleId":"737","severity":1,"message":"889","line":2,"column":8,"nodeType":"739","messageId":"740","endLine":2,"endColumn":13},{"ruleId":"737","severity":1,"message":"815","line":2,"column":17,"nodeType":"739","messageId":"740","endLine":2,"endColumn":26},{"ruleId":"737","severity":1,"message":"816","line":3,"column":9,"nodeType":"739","messageId":"740","endLine":3,"endColumn":20},{"ruleId":"737","severity":1,"message":"890","line":8,"column":11,"nodeType":"739","messageId":"740","endLine":8,"endColumn":27},{"ruleId":"737","severity":1,"message":"923","line":2,"column":9,"nodeType":"739","messageId":"740","endLine":2,"endColumn":14},{"ruleId":"737","severity":1,"message":"924","line":2,"column":16,"nodeType":"739","messageId":"740","endLine":2,"endColumn":22},{"ruleId":"737","severity":1,"message":"814","line":2,"column":40,"nodeType":"739","messageId":"740","endLine":2,"endColumn":44},{"ruleId":"737","severity":1,"message":"925","line":2,"column":46,"nodeType":"739","messageId":"740","endLine":2,"endColumn":53},{"ruleId":"737","severity":1,"message":"926","line":18,"column":12,"nodeType":"739","messageId":"740","endLine":18,"endColumn":31},{"ruleId":"737","severity":1,"message":"927","line":18,"column":32,"nodeType":"739","messageId":"740","endLine":18,"endColumn":54},{"ruleId":"737","severity":1,"message":"817","line":43,"column":18,"nodeType":"739","messageId":"740","endLine":43,"endColumn":26},{"ruleId":"737","severity":1,"message":"928","line":44,"column":36,"nodeType":"739","messageId":"740","endLine":44,"endColumn":44},{"ruleId":"737","severity":1,"message":"746","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":47,"column":12,"nodeType":"739","messageId":"740","endLine":47,"endColumn":19},{"ruleId":"737","severity":1,"message":"929","line":49,"column":17,"nodeType":"739","messageId":"740","endLine":49,"endColumn":24},{"ruleId":"737","severity":1,"message":"930","line":57,"column":12,"nodeType":"739","messageId":"740","endLine":57,"endColumn":26},{"ruleId":"737","severity":1,"message":"931","line":57,"column":27,"nodeType":"739","messageId":"740","endLine":57,"endColumn":44},{"ruleId":"737","severity":1,"message":"926","line":58,"column":12,"nodeType":"739","messageId":"740","endLine":58,"endColumn":31},{"ruleId":"737","severity":1,"message":"927","line":58,"column":32,"nodeType":"739","messageId":"740","endLine":58,"endColumn":54},{"ruleId":"737","severity":1,"message":"755","line":359,"column":14,"nodeType":"739","messageId":"740","endLine":359,"endColumn":19},{"ruleId":"757","severity":1,"message":"932","line":483,"column":15,"nodeType":"759","endLine":483,"endColumn":17,"suggestions":"933"},{"ruleId":"737","severity":1,"message":"934","line":575,"column":11,"nodeType":"739","messageId":"740","endLine":575,"endColumn":15},{"ruleId":"737","severity":1,"message":"935","line":575,"column":17,"nodeType":"739","messageId":"740","endLine":575,"endColumn":20},{"ruleId":"737","severity":1,"message":"746","line":576,"column":12,"nodeType":"739","messageId":"740","endLine":576,"endColumn":17},{"ruleId":"737","severity":1,"message":"747","line":576,"column":19,"nodeType":"739","messageId":"740","endLine":576,"endColumn":27},{"ruleId":"737","severity":1,"message":"930","line":584,"column":12,"nodeType":"739","messageId":"740","endLine":584,"endColumn":26},{"ruleId":"737","severity":1,"message":"926","line":585,"column":12,"nodeType":"739","messageId":"740","endLine":585,"endColumn":31},{"ruleId":"737","severity":1,"message":"927","line":585,"column":32,"nodeType":"739","messageId":"740","endLine":585,"endColumn":54},{"ruleId":"737","severity":1,"message":"812","line":933,"column":53,"nodeType":"739","messageId":"740","endLine":933,"endColumn":59},{"ruleId":"737","severity":1,"message":"930","line":946,"column":12,"nodeType":"739","messageId":"740","endLine":946,"endColumn":26},{"ruleId":"737","severity":1,"message":"931","line":946,"column":27,"nodeType":"739","messageId":"740","endLine":946,"endColumn":44},{"ruleId":"737","severity":1,"message":"926","line":947,"column":12,"nodeType":"739","messageId":"740","endLine":947,"endColumn":31},{"ruleId":"737","severity":1,"message":"927","line":947,"column":32,"nodeType":"739","messageId":"740","endLine":947,"endColumn":54},{"ruleId":"737","severity":1,"message":"849","line":1073,"column":11,"nodeType":"739","messageId":"740","endLine":1073,"endColumn":23},{"ruleId":"737","severity":1,"message":"936","line":1485,"column":11,"nodeType":"739","messageId":"740","endLine":1485,"endColumn":15},{"ruleId":"737","severity":1,"message":"867","line":1486,"column":11,"nodeType":"739","messageId":"740","endLine":1486,"endColumn":16},{"ruleId":"737","severity":1,"message":"755","line":1531,"column":15,"nodeType":"739","messageId":"740","endLine":1531,"endColumn":20},{"ruleId":"737","severity":1,"message":"803","line":1598,"column":11,"nodeType":"739","messageId":"740","endLine":1598,"endColumn":27},{"ruleId":"737","severity":1,"message":"814","line":2,"column":40,"nodeType":"739","messageId":"740","endLine":2,"endColumn":44},{"ruleId":"737","severity":1,"message":"937","line":3,"column":8,"nodeType":"739","messageId":"740","endLine":3,"endColumn":21},{"ruleId":"737","severity":1,"message":"938","line":4,"column":8,"nodeType":"739","messageId":"740","endLine":4,"endColumn":20},{"ruleId":"737","severity":1,"message":"939","line":7,"column":8,"nodeType":"739","messageId":"740","endLine":7,"endColumn":20},{"ruleId":"737","severity":1,"message":"940","line":8,"column":8,"nodeType":"739","messageId":"740","endLine":8,"endColumn":19},{"ruleId":"737","severity":1,"message":"941","line":10,"column":8,"nodeType":"739","messageId":"740","endLine":10,"endColumn":16},{"ruleId":"737","severity":1,"message":"815","line":11,"column":17,"nodeType":"739","messageId":"740","endLine":11,"endColumn":26},{"ruleId":"737","severity":1,"message":"816","line":12,"column":9,"nodeType":"739","messageId":"740","endLine":12,"endColumn":20},{"ruleId":"737","severity":1,"message":"942","line":13,"column":8,"nodeType":"739","messageId":"740","endLine":13,"endColumn":24},{"ruleId":"737","severity":1,"message":"817","line":17,"column":18,"nodeType":"739","messageId":"740","endLine":17,"endColumn":26},{"ruleId":"757","severity":1,"message":"818","line":33,"column":12,"nodeType":"759","endLine":33,"endColumn":14,"suggestions":"943"},{"ruleId":"737","severity":1,"message":"746","line":43,"column":12,"nodeType":"739","messageId":"740","endLine":43,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":19},{"ruleId":"757","severity":1,"message":"944","line":393,"column":15,"nodeType":"759","endLine":393,"endColumn":17,"suggestions":"945"},{"ruleId":"757","severity":1,"message":"944","line":624,"column":20,"nodeType":"759","endLine":624,"endColumn":22,"suggestions":"946"},{"ruleId":"737","severity":1,"message":"812","line":854,"column":53,"nodeType":"739","messageId":"740","endLine":854,"endColumn":59},{"ruleId":"737","severity":1,"message":"849","line":927,"column":11,"nodeType":"739","messageId":"740","endLine":927,"endColumn":23},{"ruleId":"737","severity":1,"message":"746","line":43,"column":12,"nodeType":"739","messageId":"740","endLine":43,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":19},{"ruleId":"757","severity":1,"message":"944","line":393,"column":15,"nodeType":"759","endLine":393,"endColumn":17,"suggestions":"947"},{"ruleId":"757","severity":1,"message":"944","line":623,"column":20,"nodeType":"759","endLine":623,"endColumn":22,"suggestions":"948"},{"ruleId":"737","severity":1,"message":"812","line":852,"column":53,"nodeType":"739","messageId":"740","endLine":852,"endColumn":59},{"ruleId":"737","severity":1,"message":"849","line":925,"column":11,"nodeType":"739","messageId":"740","endLine":925,"endColumn":23},{"ruleId":"737","severity":1,"message":"738","line":1,"column":47,"nodeType":"739","messageId":"740","endLine":1,"endColumn":53},{"ruleId":"737","severity":1,"message":"741","line":4,"column":10,"nodeType":"739","messageId":"740","endLine":4,"endColumn":17},{"ruleId":"737","severity":1,"message":"742","line":7,"column":9,"nodeType":"739","messageId":"740","endLine":7,"endColumn":14},{"ruleId":"737","severity":1,"message":"743","line":8,"column":17,"nodeType":"739","messageId":"740","endLine":8,"endColumn":42},{"ruleId":"737","severity":1,"message":"746","line":33,"column":12,"nodeType":"739","messageId":"740","endLine":33,"endColumn":17},{"ruleId":"737","severity":1,"message":"747","line":33,"column":19,"nodeType":"739","messageId":"740","endLine":33,"endColumn":27},{"ruleId":"737","severity":1,"message":"891","line":38,"column":10,"nodeType":"739","messageId":"740","endLine":38,"endColumn":19},{"ruleId":"737","severity":1,"message":"749","line":41,"column":11,"nodeType":"739","messageId":"740","endLine":41,"endColumn":21},{"ruleId":"737","severity":1,"message":"750","line":41,"column":22,"nodeType":"739","messageId":"740","endLine":41,"endColumn":35},{"ruleId":"737","severity":1,"message":"754","line":136,"column":11,"nodeType":"739","messageId":"740","endLine":136,"endColumn":26},{"ruleId":"737","severity":1,"message":"755","line":149,"column":14,"nodeType":"739","messageId":"740","endLine":149,"endColumn":19},{"ruleId":"757","severity":1,"message":"858","line":225,"column":15,"nodeType":"759","endLine":225,"endColumn":17,"suggestions":"949"},{"ruleId":"737","severity":1,"message":"756","line":227,"column":11,"nodeType":"739","messageId":"740","endLine":227,"endColumn":20},{"ruleId":"737","severity":1,"message":"763","line":326,"column":12,"nodeType":"739","messageId":"740","endLine":326,"endColumn":24},{"ruleId":"737","severity":1,"message":"764","line":337,"column":6,"nodeType":"739","messageId":"740","endLine":337,"endColumn":18},{"ruleId":"737","severity":1,"message":"765","line":357,"column":11,"nodeType":"739","messageId":"740","endLine":357,"endColumn":21},{"ruleId":"757","severity":1,"message":"766","line":379,"column":8,"nodeType":"759","endLine":379,"endColumn":10,"suggestions":"950"},{"ruleId":"757","severity":1,"message":"894","line":404,"column":7,"nodeType":"759","endLine":404,"endColumn":9,"suggestions":"951"},{"ruleId":"737","severity":1,"message":"738","line":1,"column":47,"nodeType":"739","messageId":"740","endLine":1,"endColumn":53},{"ruleId":"737","severity":1,"message":"852","line":3,"column":9,"nodeType":"739","messageId":"740","endLine":3,"endColumn":22},{"ruleId":"737","severity":1,"message":"952","line":5,"column":9,"nodeType":"739","messageId":"740","endLine":5,"endColumn":26},{"ruleId":"737","severity":1,"message":"817","line":11,"column":18,"nodeType":"739","messageId":"740","endLine":11,"endColumn":26},{"ruleId":"737","severity":1,"message":"746","line":24,"column":12,"nodeType":"739","messageId":"740","endLine":24,"endColumn":17},{"ruleId":"737","severity":1,"message":"775","line":25,"column":12,"nodeType":"739","messageId":"740","endLine":25,"endColumn":19},{"ruleId":"737","severity":1,"message":"776","line":26,"column":12,"nodeType":"739","messageId":"740","endLine":26,"endColumn":19},{"ruleId":"737","severity":1,"message":"785","line":38,"column":11,"nodeType":"739","messageId":"740","endLine":38,"endColumn":28},{"ruleId":"737","severity":1,"message":"746","line":244,"column":12,"nodeType":"739","messageId":"740","endLine":244,"endColumn":17},{"ruleId":"737","severity":1,"message":"775","line":245,"column":12,"nodeType":"739","messageId":"740","endLine":245,"endColumn":19},{"ruleId":"737","severity":1,"message":"776","line":246,"column":12,"nodeType":"739","messageId":"740","endLine":246,"endColumn":19},{"ruleId":"737","severity":1,"message":"785","line":258,"column":11,"nodeType":"739","messageId":"740","endLine":258,"endColumn":28},{"ruleId":"737","severity":1,"message":"746","line":481,"column":12,"nodeType":"739","messageId":"740","endLine":481,"endColumn":17},{"ruleId":"737","severity":1,"message":"775","line":482,"column":12,"nodeType":"739","messageId":"740","endLine":482,"endColumn":19},{"ruleId":"737","severity":1,"message":"776","line":483,"column":12,"nodeType":"739","messageId":"740","endLine":483,"endColumn":19},{"ruleId":"737","severity":1,"message":"785","line":495,"column":11,"nodeType":"739","messageId":"740","endLine":495,"endColumn":28},{"ruleId":"737","severity":1,"message":"746","line":700,"column":12,"nodeType":"739","messageId":"740","endLine":700,"endColumn":17},{"ruleId":"737","severity":1,"message":"775","line":701,"column":12,"nodeType":"739","messageId":"740","endLine":701,"endColumn":19},{"ruleId":"737","severity":1,"message":"776","line":702,"column":12,"nodeType":"739","messageId":"740","endLine":702,"endColumn":19},{"ruleId":"737","severity":1,"message":"785","line":714,"column":11,"nodeType":"739","messageId":"740","endLine":714,"endColumn":28},{"ruleId":"737","severity":1,"message":"738","line":1,"column":47,"nodeType":"739","messageId":"740","endLine":1,"endColumn":53},{"ruleId":"737","severity":1,"message":"852","line":3,"column":9,"nodeType":"739","messageId":"740","endLine":3,"endColumn":22},{"ruleId":"737","severity":1,"message":"741","line":4,"column":10,"nodeType":"739","messageId":"740","endLine":4,"endColumn":17},{"ruleId":"737","severity":1,"message":"742","line":7,"column":9,"nodeType":"739","messageId":"740","endLine":7,"endColumn":14},{"ruleId":"737","severity":1,"message":"743","line":8,"column":17,"nodeType":"739","messageId":"740","endLine":8,"endColumn":42},{"ruleId":"737","severity":1,"message":"953","line":9,"column":8,"nodeType":"739","messageId":"740","endLine":9,"endColumn":26},{"ruleId":"737","severity":1,"message":"744","line":10,"column":8,"nodeType":"739","messageId":"740","endLine":10,"endColumn":22},{"ruleId":"737","severity":1,"message":"753","line":57,"column":12,"nodeType":"739","messageId":"740","endLine":57,"endColumn":31},{"ruleId":"737","severity":1,"message":"754","line":76,"column":12,"nodeType":"739","messageId":"740","endLine":76,"endColumn":27},{"ruleId":"737","severity":1,"message":"853","line":88,"column":12,"nodeType":"739","messageId":"740","endLine":88,"endColumn":24},{"ruleId":"737","severity":1,"message":"755","line":89,"column":15,"nodeType":"739","messageId":"740","endLine":89,"endColumn":20},{"ruleId":"854","severity":1,"message":"855","line":102,"column":18,"nodeType":"856","messageId":"857","endLine":102,"endColumn":30},{"ruleId":"757","severity":1,"message":"858","line":158,"column":16,"nodeType":"759","endLine":158,"endColumn":18,"suggestions":"954"},{"ruleId":"737","severity":1,"message":"756","line":160,"column":16,"nodeType":"739","messageId":"740","endLine":160,"endColumn":25},{"ruleId":"737","severity":1,"message":"741","line":4,"column":10,"nodeType":"739","messageId":"740","endLine":4,"endColumn":17},{"ruleId":"737","severity":1,"message":"955","line":8,"column":23,"nodeType":"739","messageId":"740","endLine":8,"endColumn":35},{"ruleId":"737","severity":1,"message":"956","line":13,"column":5,"nodeType":"739","messageId":"740","endLine":13,"endColumn":11},{"ruleId":"757","severity":1,"message":"957","line":40,"column":12,"nodeType":"759","endLine":40,"endColumn":14,"suggestions":"958"},{"ruleId":"737","severity":1,"message":"803","line":209,"column":11,"nodeType":"739","messageId":"740","endLine":209,"endColumn":27},{"ruleId":"737","severity":1,"message":"887","line":1,"column":16,"nodeType":"739","messageId":"740","endLine":1,"endColumn":24},{"ruleId":"737","severity":1,"message":"888","line":1,"column":25,"nodeType":"739","messageId":"740","endLine":1,"endColumn":34},{"ruleId":"737","severity":1,"message":"889","line":2,"column":8,"nodeType":"739","messageId":"740","endLine":2,"endColumn":13},{"ruleId":"737","severity":1,"message":"815","line":2,"column":17,"nodeType":"739","messageId":"740","endLine":2,"endColumn":26},{"ruleId":"737","severity":1,"message":"816","line":3,"column":9,"nodeType":"739","messageId":"740","endLine":3,"endColumn":20},{"ruleId":"737","severity":1,"message":"890","line":8,"column":11,"nodeType":"739","messageId":"740","endLine":8,"endColumn":27},{"ruleId":"737","severity":1,"message":"887","line":1,"column":16,"nodeType":"739","messageId":"740","endLine":1,"endColumn":24},{"ruleId":"737","severity":1,"message":"959","line":1,"column":25,"nodeType":"739","messageId":"740","endLine":1,"endColumn":35},{"ruleId":"737","severity":1,"message":"888","line":1,"column":37,"nodeType":"739","messageId":"740","endLine":1,"endColumn":46},{"ruleId":"737","severity":1,"message":"738","line":1,"column":47,"nodeType":"739","messageId":"740","endLine":1,"endColumn":53},{"ruleId":"737","severity":1,"message":"960","line":2,"column":8,"nodeType":"739","messageId":"740","endLine":2,"endColumn":14},{"ruleId":"737","severity":1,"message":"742","line":3,"column":9,"nodeType":"739","messageId":"740","endLine":3,"endColumn":14},{"ruleId":"737","severity":1,"message":"746","line":43,"column":12,"nodeType":"739","messageId":"740","endLine":43,"endColumn":17},{"ruleId":"737","severity":1,"message":"775","line":44,"column":12,"nodeType":"739","messageId":"740","endLine":44,"endColumn":19},{"ruleId":"737","severity":1,"message":"776","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":19},{"ruleId":"737","severity":1,"message":"785","line":56,"column":11,"nodeType":"739","messageId":"740","endLine":56,"endColumn":28},{"ruleId":"757","severity":1,"message":"921","line":392,"column":15,"nodeType":"759","endLine":392,"endColumn":17,"suggestions":"961"},{"ruleId":"737","severity":1,"message":"812","line":624,"column":53,"nodeType":"739","messageId":"740","endLine":624,"endColumn":59},{"ruleId":"737","severity":1,"message":"849","line":697,"column":11,"nodeType":"739","messageId":"740","endLine":697,"endColumn":23},{"ruleId":"737","severity":1,"message":"888","line":1,"column":37,"nodeType":"739","messageId":"740","endLine":1,"endColumn":46},{"ruleId":"737","severity":1,"message":"738","line":1,"column":47,"nodeType":"739","messageId":"740","endLine":1,"endColumn":53},{"ruleId":"737","severity":1,"message":"962","line":11,"column":20,"nodeType":"739","messageId":"740","endLine":11,"endColumn":31},{"ruleId":"737","severity":1,"message":"963","line":16,"column":15,"nodeType":"739","messageId":"740","endLine":16,"endColumn":22},{"ruleId":"737","severity":1,"message":"746","line":43,"column":12,"nodeType":"739","messageId":"740","endLine":43,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":19},{"ruleId":"757","severity":1,"message":"843","line":416,"column":15,"nodeType":"759","endLine":416,"endColumn":17,"suggestions":"964"},{"ruleId":"757","severity":1,"message":"841","line":423,"column":12,"nodeType":"759","endLine":423,"endColumn":45,"suggestions":"965"},{"ruleId":"757","severity":1,"message":"841","line":544,"column":11,"nodeType":"759","endLine":544,"endColumn":22,"suggestions":"966"},{"ruleId":"737","severity":1,"message":"812","line":666,"column":53,"nodeType":"739","messageId":"740","endLine":666,"endColumn":59},{"ruleId":"757","severity":1,"message":"847","line":706,"column":11,"nodeType":"759","endLine":706,"endColumn":13,"suggestions":"967"},{"ruleId":"737","severity":1,"message":"849","line":729,"column":11,"nodeType":"739","messageId":"740","endLine":729,"endColumn":23},{"ruleId":"737","severity":1,"message":"746","line":43,"column":12,"nodeType":"739","messageId":"740","endLine":43,"endColumn":17},{"ruleId":"737","severity":1,"message":"776","line":45,"column":12,"nodeType":"739","messageId":"740","endLine":45,"endColumn":19},{"ruleId":"757","severity":1,"message":"843","line":426,"column":15,"nodeType":"759","endLine":426,"endColumn":17,"suggestions":"968"},{"ruleId":"757","severity":1,"message":"841","line":433,"column":12,"nodeType":"759","endLine":433,"endColumn":45,"suggestions":"969"},{"ruleId":"757","severity":1,"message":"841","line":555,"column":11,"nodeType":"759","endLine":555,"endColumn":22,"suggestions":"970"},{"ruleId":"737","severity":1,"message":"812","line":677,"column":53,"nodeType":"739","messageId":"740","endLine":677,"endColumn":59},{"ruleId":"757","severity":1,"message":"847","line":717,"column":11,"nodeType":"759","endLine":717,"endColumn":13,"suggestions":"971"},{"ruleId":"737","severity":1,"message":"849","line":740,"column":11,"nodeType":"739","messageId":"740","endLine":740,"endColumn":23},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useForm' is defined but never used.","'toast' is defined but never used.","'formatDistanceToNowStrict' is defined but never used.","'PatientProfile' is defined but never used.","'AccordionItemState' is defined but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'BillServ' is assigned a value but never used.","'facilities' is assigned a value but never used.","'setFacilities' is assigned a value but never used.","'expanded' is assigned a value but never used.","'setExpanded' is assigned a value but never used.","'handleMedicationRow' is assigned a value but never used.","'handleCreateNew' is assigned a value but never used.","'field' is assigned a value but never used.","'handleRow' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'BillServ' and 'getFacilities'. Either include them or remove the dependency array.","ArrayExpression",["972"],"React Hook useEffect has a missing dependency: 'selectedOrders'. Either include it or remove the dependency array.",["973"],"'currentOrder' is assigned a value but never used.","'ProductEntry' is assigned a value but never used.","'handleEdit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'state.DispenseModule.selectedDispense' and 'state.currentClients'. Either include them or remove the dependency array.",["974"],"React Hook useEffect has missing dependencies: 'BillServ' and 'state.currentClients'. Either include them or remove the dependency array.",["975"],"no-native-reassign",["976"],"no-negated-in-lhs",["977"],"'ProductCreate' is defined but never used.","'success' is assigned a value but never used.","'message' is assigned a value but never used.","'inventoryId' is assigned a value but never used.","'paymentOptions' is assigned a value but never used.","'setPaymentOptions' is assigned a value but never used.","'setBillMode' is assigned a value but never used.","'partPay' is assigned a value but never used.","'inputEl' is assigned a value but never used.","'hidestatus' is defined but never used.","'showDocumentation' is assigned a value but never used.","'getSearchfacility' is assigned a value but never used.","'handleChangeType' is assigned a value but never used.","'handleClickProd' is assigned a value but never used.","'handleQtty' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'documentNo', 'quantity', 'sellingprice', 'source', 'totalamount', and 'type'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProductEntry' needs the current value of 'documentNo'.",["978"],"'resetform' is assigned a value but never used.","'handleMedicationDone' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","'handleChangeAmount' is assigned a value but never used.","'newclient' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getFacilities', 'medication', 'productItem.length', and 'source'. Either include them or remove the dependency array.",["979"],"React Hook useEffect has a missing dependency: 'getTotal'. Either include it or remove the dependency array.",["980"],"React Hook useEffect has missing dependencies: 'SubwalletServ', 'getFacilities', and 'setState'. Either include them or remove the dependency array.",["981"],"'productModal' is assigned a value but never used.","'handleAddproduct' is assigned a value but never used.","'handlecloseModal' is assigned a value but never used.",["976"],["977"],"'herok' is assigned a value but never used.","'API' is assigned a value but never used.",["976"],["977"],"'watch' is assigned a value but never used.","'errors' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","'Link' is defined but never used.","'StoreList' is defined but never used.","'UserContext' is defined but never used.","'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleChangeStore' and 'selectedStore'. Either include them or remove the dependency array.",["982"],"React Hook useEffect has a missing dependency: 'selectedClinic'. Either include it or remove the dependency array.",["983"],["976"],["977"],["976"],["977"],"React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["984"],"React Hook useEffect has missing dependencies: 'EmployeeServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["985"],["976"],["977"],["986"],"Assignments to the 'calcamount1' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","BinaryExpression","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","React Hook useEffect has missing dependencies: 'ProductEntryServ', 'getFacilities', and 'state.StoreModule.selectedStore'. Either include them or remove the dependency array.",["987"],"React Hook useEffect has a missing dependency: 'getFacilities'. Either include it or remove the dependency array.",["988"],"React Hook useEffect has missing dependencies: 'InventoryServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["989"],["990"],["991"],"React Hook useEffect has a missing dependency: 'handleSetPrice'. Either include it or remove the dependency array.",["992"],"'handleDelete' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ClinicServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["993"],"'DebounceInput' is defined but never used.","'handleSearch' is assigned a value but never used.","no-dupe-keys","Duplicate key 'order_status'.","ObjectExpression","unexpected","React Hook useEffect has missing dependencies: 'OrderServ' and 'getFacilities'. Either include them or remove the dependency array.",["994"],["995"],"'PrescriptionCreate' is defined but never used.","'setPage' is assigned a value but never used.","'loader' is assigned a value but never used.","'ulimit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ClinicServ', 'getFacilities', 'page', and 'user'. Either include them or remove the dependency array.",["996"],"'state' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'facilityServ' and 'getFacilities'. Either include them or remove the dependency array.",["997"],"'ProductEntryServ' is assigned a value but never used.","'qamount' is assigned a value but never used.",["998"],"React Hook useEffect has missing dependencies: 'billMode' and 'source'. Either include them or remove the dependency array.",["999"],["976"],["977"],"React Hook useEffect has missing dependencies: 'BillServ', 'cleanup', and 'getFacilities'. Either include them or remove the dependency array.",["1000"],["1001"],["1002"],["1003"],["1004"],["1005"],["1006"],["1007"],["1008"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Store' is defined but never used.","'handleCloseModal' is assigned a value but never used.","'OrderServ' is assigned a value but never used.",["1009"],["1010"],"React Hook useEffect has missing dependencies: 'OrderServ' and 'state.currentClients'. Either include them or remove the dependency array.",["1011"],"React Hook useEffect has missing dependencies: 'DocumentClassServ' and 'getFacilities'. Either include them or remove the dependency array.",["1012"],"'productId' is assigned a value but never used.","'name' is assigned a value but never used.","'productEntry' is assigned a value but never used.","'setProductEntry' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'user.currentEmployee.facilityDetail._id' and 'user.currentEmployee.facilityDetail.facilityName'. Either include them or remove the dependency array.",["1013"],["1014"],"'handleBlur' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["1015"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal",["1016"],"React Hook useEffect has missing dependencies: 'getTotal', 'medication', 'productItem.length', and 'source'. Either include them or remove the dependency array.",["1017"],"React Hook useEffect has missing dependencies: 'getTotal' and 'totalamount'. Either include them or remove the dependency array.",["1018"],["1019"],["1020"],["1021"],"React Hook useEffect has missing dependencies: 'LocationServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["1022"],"React Hook useEffect has missing dependencies: 'ProductServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["1023"],"'Route' is defined but never used.","'Switch' is defined but never used.","'NavLink' is defined but never used.","'selectedAppointment' is assigned a value but never used.","'setSelectedAppointment' is assigned a value but never used.","'setValue' is assigned a value but never used.","'setType' is assigned a value but never used.","'selectedClient' is assigned a value but never used.","'setSelectedClient' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ClientServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["1024"],"'path' is assigned a value but never used.","'url' is assigned a value but never used.","'user' is assigned a value but never used.","'FinanceReport' is defined but never used.","'FinanceSetup' is defined but never used.","'ProductEntry' is defined but never used.","'ProductExit' is defined but never used.","'Products' is defined but never used.","'BillPrescription' is defined but never used.",["1025"],"React Hook useEffect has missing dependencies: 'StoreServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["1026"],["1027"],["1028"],["1029"],["1030"],["1031"],["1032"],"'DocumentClassList' is defined but never used.","'BillDispenseCreate' is defined but never used.",["1033"],"'ClientDetail' is defined but never used.","'random' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleChangeClient' and 'state.ClientModule.selectedClient'. Either include them or remove the dependency array.",["1034"],"'useContext' is defined but never used.","'client' is defined but never used.",["1035"],"'setPassword' is assigned a value but never used.","'setUser' is assigned a value but never used.",["1036"],["1037"],["1038"],["1039"],["1040"],["1041"],["1042"],["1043"],{"desc":"1044","fix":"1045"},{"desc":"1046","fix":"1047"},{"desc":"1048","fix":"1049"},{"desc":"1050","fix":"1051"},"no-global-assign","no-unsafe-negation",{"desc":"1052","fix":"1053"},{"desc":"1054","fix":"1055"},{"desc":"1056","fix":"1057"},{"desc":"1058","fix":"1059"},{"desc":"1060","fix":"1061"},{"desc":"1062","fix":"1063"},{"desc":"1064","fix":"1065"},{"desc":"1066","fix":"1067"},{"desc":"1052","fix":"1068"},{"desc":"1069","fix":"1070"},{"desc":"1071","fix":"1072"},{"desc":"1073","fix":"1074"},{"desc":"1071","fix":"1075"},{"desc":"1076","fix":"1077"},{"desc":"1078","fix":"1079"},{"desc":"1080","fix":"1081"},{"desc":"1082","fix":"1083"},{"desc":"1052","fix":"1084"},{"desc":"1085","fix":"1086"},{"desc":"1087","fix":"1088"},{"desc":"1052","fix":"1089"},{"desc":"1090","fix":"1091"},{"desc":"1092","fix":"1093"},{"desc":"1046","fix":"1094"},{"desc":"1048","fix":"1095"},{"desc":"1050","fix":"1096"},{"desc":"1052","fix":"1097"},{"desc":"1069","fix":"1098"},{"desc":"1071","fix":"1099"},{"desc":"1069","fix":"1100"},{"desc":"1071","fix":"1101"},{"desc":"1082","fix":"1102"},{"desc":"1048","fix":"1103"},{"desc":"1104","fix":"1105"},{"desc":"1106","fix":"1107"},{"desc":"1108","fix":"1109"},{"desc":"1082","fix":"1110"},{"desc":"1111","fix":"1112"},{"desc":"1052","fix":"1113"},{"desc":"1114","fix":"1115"},{"desc":"1116","fix":"1117"},{"desc":"1069","fix":"1118"},{"desc":"1071","fix":"1119"},{"desc":"1087","fix":"1120"},{"desc":"1121","fix":"1122"},{"desc":"1123","fix":"1124"},{"desc":"1125","fix":"1126"},{"desc":"1060","fix":"1127"},{"desc":"1128","fix":"1129"},{"desc":"1128","fix":"1130"},{"desc":"1128","fix":"1131"},{"desc":"1128","fix":"1132"},{"desc":"1082","fix":"1133"},{"desc":"1048","fix":"1134"},{"desc":"1104","fix":"1135"},{"desc":"1082","fix":"1136"},{"desc":"1137","fix":"1138"},{"desc":"1123","fix":"1139"},{"desc":"1073","fix":"1140"},{"desc":"1071","fix":"1141"},{"desc":"1076","fix":"1142"},{"desc":"1078","fix":"1143"},{"desc":"1073","fix":"1144"},{"desc":"1071","fix":"1145"},{"desc":"1076","fix":"1146"},{"desc":"1078","fix":"1147"},"Update the dependencies array to be: [BillServ, getFacilities]",{"range":"1148","text":"1149"},"Update the dependencies array to be: [selectedOrders, state.financeModule.show]",{"range":"1150","text":"1151"},"Update the dependencies array to be: [state.DispenseModule.selectedDispense, state.currentClients]",{"range":"1152","text":"1153"},"Update the dependencies array to be: [BillServ, state.currentClients]",{"range":"1154","text":"1155"},"Update the dependencies array to be: [date, documentNo, quantity, sellingprice, source, totalamount, type]",{"range":"1156","text":"1157"},"Update the dependencies array to be: [getFacilities, medication, productItem.length, source, state.financeModule]",{"range":"1158","text":"1159"},"Update the dependencies array to be: [getTotal, productItem]",{"range":"1160","text":"1161"},"Update the dependencies array to be: [SubwalletServ, getFacilities, setState]",{"range":"1162","text":"1163"},"Update the dependencies array to be: [handleChangeStore, selectedStore]",{"range":"1164","text":"1165"},"Update the dependencies array to be: [selectedClinic]",{"range":"1166","text":"1167"},"Update the dependencies array to be: [setValue, user]",{"range":"1168","text":"1169"},"Update the dependencies array to be: [EmployeeServ, getFacilities, user]",{"range":"1170","text":"1171"},{"range":"1172","text":"1157"},"Update the dependencies array to be: [ProductEntryServ, getFacilities, state.StoreModule.selectedStore]",{"range":"1173","text":"1174"},"Update the dependencies array to be: [getFacilities, state.StoreModule.selectedStore]",{"range":"1175","text":"1176"},"Update the dependencies array to be: [InventoryServ, getFacilities, user]",{"range":"1177","text":"1178"},{"range":"1179","text":"1176"},"Update the dependencies array to be: [Inventory, getFacilities]",{"range":"1180","text":"1181"},"Update the dependencies array to be: [handleSetPrice]",{"range":"1182","text":"1183"},"Update the dependencies array to be: [ClinicServ, getFacilities, user]",{"range":"1184","text":"1185"},"Update the dependencies array to be: [OrderServ, getFacilities]",{"range":"1186","text":"1187"},{"range":"1188","text":"1157"},"Update the dependencies array to be: [ClinicServ, getFacilities, page, user]",{"range":"1189","text":"1190"},"Update the dependencies array to be: [facilityServ, getFacilities]",{"range":"1191","text":"1192"},{"range":"1193","text":"1157"},"Update the dependencies array to be: [billMode, medication, source]",{"range":"1194","text":"1195"},"Update the dependencies array to be: [BillServ, cleanup, getFacilities]",{"range":"1196","text":"1197"},{"range":"1198","text":"1151"},{"range":"1199","text":"1153"},{"range":"1200","text":"1155"},{"range":"1201","text":"1157"},{"range":"1202","text":"1174"},{"range":"1203","text":"1176"},{"range":"1204","text":"1174"},{"range":"1205","text":"1176"},{"range":"1206","text":"1187"},{"range":"1207","text":"1153"},"Update the dependencies array to be: [OrderServ, state.currentClients]",{"range":"1208","text":"1209"},"Update the dependencies array to be: [DocumentClassServ, getFacilities]",{"range":"1210","text":"1211"},"Update the dependencies array to be: [user.currentEmployee.facilityDetail._id, user.currentEmployee.facilityDetail.facilityName]",{"range":"1212","text":"1213"},{"range":"1214","text":"1187"},"Update the dependencies array to be: [simpa, value]",{"range":"1215","text":"1216"},{"range":"1217","text":"1157"},"Update the dependencies array to be: [getTotal, medication, productItem.length, source, state.financeModule]",{"range":"1218","text":"1219"},"Update the dependencies array to be: [getTotal, productItem, totalamount]",{"range":"1220","text":"1221"},{"range":"1222","text":"1174"},{"range":"1223","text":"1176"},{"range":"1224","text":"1192"},"Update the dependencies array to be: [LocationServ, getFacilities, user]",{"range":"1225","text":"1226"},"Update the dependencies array to be: [ProductServ, getFacilities, user]",{"range":"1227","text":"1228"},"Update the dependencies array to be: [ClientServ, getFacilities, user]",{"range":"1229","text":"1230"},{"range":"1231","text":"1165"},"Update the dependencies array to be: [StoreServ, getFacilities, user]",{"range":"1232","text":"1233"},{"range":"1234","text":"1233"},{"range":"1235","text":"1233"},{"range":"1236","text":"1233"},{"range":"1237","text":"1187"},{"range":"1238","text":"1153"},{"range":"1239","text":"1209"},{"range":"1240","text":"1187"},"Update the dependencies array to be: [handleChangeClient, state.ClientModule.selectedClient]",{"range":"1241","text":"1242"},{"range":"1243","text":"1228"},{"range":"1244","text":"1178"},{"range":"1245","text":"1176"},{"range":"1246","text":"1181"},{"range":"1247","text":"1183"},{"range":"1248","text":"1178"},{"range":"1249","text":"1176"},{"range":"1250","text":"1181"},{"range":"1251","text":"1183"},[8804,8806],"[BillServ, getFacilities]",[9218,9244],"[selectedOrders, state.financeModule.show]",[17727,17729],"[state.DispenseModule.selectedDispense, state.currentClients]",[18554,18556],"[BillServ, state.currentClients]",[11447,11453],"[date, documentNo, quantity, sellingprice, source, totalamount, type]",[17373,17394],"[getFacilities, medication, productItem.length, source, state.financeModule]",[17952,17965],"[getTotal, productItem]",[19821,19823],"[SubwalletServ, getFacilities, setState]",[1278,1280],"[handleChangeStore, selectedStore]",[1106,1108],"[selectedClinic]",[2746,2752],"[setValue, user]",[14951,14953],"[EmployeeServ, getFacilities, user]",[7305,7311],[25911,25913],"[ProductEntryServ, getFacilities, state.StoreModule.selectedStore]",[26115,26148],"[getFacilities, state.StoreModule.selectedStore]",[16336,16338],"[InventoryServ, getFacilities, user]",[16478,16511],[22351,22362],"[Inventory, getFacilities]",[28049,28051],"[handleSetPrice]",[14984,14986],"[ClinicServ, getFacilities, user]",[5864,5866],"[OrderServ, getFacilities]",[6347,6353],[7642,7644],"[ClinicServ, getFacilities, page, user]",[10690,10692],"[facilityServ, getFacilities]",[12109,12115],[19059,19071],"[billMode, medication, source]",[8955,8957],"[BillServ, cleanup, getFacilities]",[9811,9837],[18326,18328],[19153,19155],[7409,7415],[26208,26210],[26412,26445],[21183,21185],[21387,21420],[8196,8198],[15611,15613],[16442,16444],"[OrderServ, state.currentClients]",[11271,11273],"[DocumentClassServ, getFacilities]",[9033,9035],"[user.currentEmployee.facilityDetail._id, user.currentEmployee.facilityDetail.facilityName]",[20188,20190],[48278,48285],"[simpa, value]",[7409,7415],[12809,12830],"[getTotal, medication, productItem.length, source, state.financeModule]",[13186,13199],"[getTotal, productItem, totalamount]",[28393,28395],[28597,28630],[10381,10383],[14869,14871],"[LocationServ, getFacilities, user]",[14978,14980],"[ProductServ, getFacilities, user]",[19050,19052],"[ClientServ, getFacilities, user]",[1271,1273],[14939,14941],"[StoreServ, getFacilities, user]",[25087,25089],[14927,14929],[25064,25066],[8231,8233],[15647,15649],[16478,16480],[5864,5866],[1613,1615],"[handleChangeClient, state.ClientModule.selectedClient]",[14978,14980],[16336,16338],[16478,16511],[22406,22417],[28104,28106],[16680,16682],[16822,16855],[22774,22785],[28472,28474]]
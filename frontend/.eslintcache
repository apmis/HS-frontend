[{"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\EncounterMain.js":"1","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicSetup.js":"2","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\DocumentClass.js":"3","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\Encounter.js":"4","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\EncounterRight.js":"5","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js":"6","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js":"7","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js":"8","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js":"9","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js":"10","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js":"11","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FacilityModule.js":"12","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js":"13","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js":"14","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Roaster.js":"15","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Accessibility.js":"16","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Facility.js":"17","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js":"18","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryReport.js":"19","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClientMgt\\Patient.js":"20","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js":"21","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClinicModule.js":"22","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js":"23","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\HSModules.js":"24","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Location.js":"25","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js":"26","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Products.js":"27","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicHome.js":"28","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClientMgt\\PatientProfile.js":"29","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\utils\\VideoConference.js":"30","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Appointments.js":"31","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\reportWebVitals.js":"32","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js":"33","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js":"34","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js":"35","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicReport.js":"36","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Clinic.js":"37","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicStore.js":"38","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryHome.js":"39","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js":"40","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\Prescription.js":"41","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Store.js":"42","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js":"43","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Dispensary.js":"44","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js":"45","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\helpers\\FacilityPopup.js":"46","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillDispense.js":"47","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\DispensaryMain.js":"48"},{"size":19307,"mtime":1613058312225,"results":"49","hashOfConfig":"50"},{"size":1728,"mtime":1612477930149,"results":"51","hashOfConfig":"50"},{"size":37609,"mtime":1612483185115,"results":"52","hashOfConfig":"50"},{"size":11720,"mtime":1612798409846,"results":"53","hashOfConfig":"50"},{"size":37766,"mtime":1612638457628,"results":"54","hashOfConfig":"50"},{"size":3752,"mtime":1613527155254,"results":"55","hashOfConfig":"50"},{"size":500,"mtime":1606167681327,"results":"56","hashOfConfig":"50"},{"size":958,"mtime":1611095384833,"results":"57","hashOfConfig":"50"},{"size":636,"mtime":1612804591739,"results":"58","hashOfConfig":"50"},{"size":6961,"mtime":1613315312696,"results":"59","hashOfConfig":"50"},{"size":3070,"mtime":1611089651447,"results":"60","hashOfConfig":"50"},{"size":6726,"mtime":1612616573670,"results":"61","hashOfConfig":"50"},{"size":148,"mtime":1610340754492,"results":"62","hashOfConfig":"50"},{"size":597,"mtime":1612953434041,"results":"63","hashOfConfig":"50"},{"size":142,"mtime":1610340882234,"results":"64","hashOfConfig":"50"},{"size":153,"mtime":1610345735519,"results":"65","hashOfConfig":"50"},{"size":29287,"mtime":1610499792755,"results":"66","hashOfConfig":"50"},{"size":38844,"mtime":1613544987175,"results":"67","hashOfConfig":"50"},{"size":8924,"mtime":1610239695153,"results":"68","hashOfConfig":"50"},{"size":76012,"mtime":1612920109572,"results":"69","hashOfConfig":"50"},{"size":8159,"mtime":1613141225651,"results":"70","hashOfConfig":"50"},{"size":7929,"mtime":1612826757607,"results":"71","hashOfConfig":"50"},{"size":602,"mtime":1610166221216,"results":"72","hashOfConfig":"50"},{"size":156,"mtime":1610340977169,"results":"73","hashOfConfig":"50"},{"size":40707,"mtime":1613142325364,"results":"74","hashOfConfig":"50"},{"size":52276,"mtime":1611792286916,"results":"75","hashOfConfig":"50"},{"size":40739,"mtime":1611416060016,"results":"76","hashOfConfig":"50"},{"size":1452,"mtime":1612953370729,"results":"77","hashOfConfig":"50"},{"size":6208,"mtime":1612972773563,"results":"78","hashOfConfig":"50"},{"size":1854,"mtime":1612799451726,"results":"79","hashOfConfig":"50"},{"size":73610,"mtime":1612987406080,"results":"80","hashOfConfig":"50"},{"size":362,"mtime":1606167681327,"results":"81","hashOfConfig":"50"},{"size":9318,"mtime":1610307391617,"results":"82","hashOfConfig":"50"},{"size":146,"mtime":1610340786924,"results":"83","hashOfConfig":"50"},{"size":144,"mtime":1610340849334,"results":"84","hashOfConfig":"50"},{"size":8924,"mtime":1612264316226,"results":"85","hashOfConfig":"50"},{"size":40664,"mtime":1612289586031,"results":"86","hashOfConfig":"50"},{"size":38856,"mtime":1612264335426,"results":"87","hashOfConfig":"50"},{"size":1294,"mtime":1612953318453,"results":"88","hashOfConfig":"50"},{"size":57661,"mtime":1613927055504,"results":"89","hashOfConfig":"50"},{"size":50561,"mtime":1613351102945,"results":"90","hashOfConfig":"50"},{"size":40518,"mtime":1613143346644,"results":"91","hashOfConfig":"50"},{"size":40586,"mtime":1611144169606,"results":"92","hashOfConfig":"50"},{"size":19707,"mtime":1613819072886,"results":"93","hashOfConfig":"50"},{"size":9542,"mtime":1610481859369,"results":"94","hashOfConfig":"50"},{"size":15112,"mtime":1613312865451,"results":"95","hashOfConfig":"50"},{"size":35022,"mtime":1613927360729,"results":"96","hashOfConfig":"50"},{"size":19308,"mtime":1613590569939,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},"vuhkqw",{"filePath":"101","messages":"102","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"108"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"114"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"104"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"108"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"108"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"108"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"108"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"108"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"108"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"135"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"108"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"108"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"135"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"108"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"135"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"114"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"114"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"104"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229"},"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\EncounterMain.js",["230","231","232","233","234","235","236","237"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {DocumentClassList} from './DocumentClass'\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\nimport  VideoConference  from '../utils/VideoConference';\r\nimport  Prescription, { PrescriptionCreate } from './Prescription';\r\n\r\nexport default function EncounterMain() {\r\n // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ClinicServ=client.service('clinicaldocument')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedClinic, setSelectedClinic]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n    const [showModal,setShowModal]=useState(false)\r\n    const [showPrescriptionModal,setShowPrescriptionModal]=useState(false)\r\n    // tracking on which page we currently are\r\n    const [page, setPage] = useState(0);\r\n    // add loader refrence \r\n    const loader = useRef(null);\r\n    \r\n    const standalone=false\r\n\r\n    const handleNewDocument= async()=>{\r\n        await setShowModal(true)                                                                                                                                                        \r\n        console.log( showModal)\r\n    }\r\n    const handleNewPrescription= async()=>{\r\n        await setShowPrescriptionModal(true)                                                                                                                                                        \r\n        console.log( showPrescriptionModal)\r\n    }\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Clinic)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Clinic)\r\n\r\n        await setSelectedClinic(Clinic)\r\n\r\n        const    newClinicModule={\r\n            selectedClinic:Clinic,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n       Clinic.show=!Clinic.show\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='documentname'\r\n       console.log(val)\r\n       ClinicServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n              // facility:user.currentEmployee.facilityDetail._id || \"\",\r\n               // locationType:\"Clinic\",\r\n               client:state.ClientModule.selectedClient._id,\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Clinic  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Clinic, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n    const getFacilities= async(page=0)=>{\r\n            /* const limit=20\r\n            alert(page) */\r\n            if (user.currentEmployee){\r\n            \r\n        const findClinic= await ClinicServ.find(\r\n                {query: {\r\n                    //locationType:\"Clinic\",\r\n                    //facility:user.currentEmployee.facilityDetail._id,\r\n                    client:state.ClientModule.selectedClient._id,\r\n                    $limit:20,\r\n                   /*  $skip:page*limit, */\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n            const total= findClinic.total\r\n            const ulimit=total*page\r\n           /*  if (total>(ulimit)){ //only load if we have not reached the total\r\n                alert(\"skip:\",ulimit )\r\n                console.log(\"skip:\",ulimit ) */\r\n            await setFacilities(findClinic.data)\r\n            console.log(findClinic.data)\r\n           /*  } */\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findClinic= await ClinicServ.find(\r\n                            {query: {\r\n                                client:state.ClientModule.selectedClient._id,\r\n                                    $limit:20,\r\n                                    $sort: {\r\n                                        createdAt: -1\r\n                                    }\r\n                                }})\r\n            \r\n                    await setFacilities(findClinic.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Clinic  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Clinic, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n           /*  useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                if (user){\r\n                    \r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ClinicServ.on('created', (obj)=>getFacilities(page))\r\n                ClinicServ.on('updated', (obj)=>getFacilities(page))\r\n                ClinicServ.on('patched', (obj)=>getFacilities(page))\r\n                ClinicServ.on('removed', (obj)=>getFacilities(page))\r\n\r\n                /* var options = {\r\n                    root: null,\r\n                    rootMargin: \"20px\",\r\n                    threshold: 1.0\r\n                 }; */\r\n                // initialize IntersectionObserver\r\n                // and attaching to Load More div\r\n                /*  const observer = new IntersectionObserver(handleObserver, options);\r\n                 if (loader.current) {\r\n                    observer.observe(loader.current)\r\n                 } */\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n           /*  useEffect(() => {\r\n                // here we simulate adding new posts to List\r\n                getFacilities()\r\n            }, [page]) */\r\n\r\n             // here we handle what happens when user scrolls to Load More div\r\n            // in this case we just update page variable\r\n                /* const handleObserver = (entities) => {\r\n                    const target = entities[0];\r\n                    if (target.isIntersecting) {   \r\n                        setPage((page) => page + 1) //load more \r\n                        \r\n                    }\r\n                } */\r\n\r\n    return (\r\n        <div>\r\n            <VideoConference/>\r\n            <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search documentation\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                   {/*  <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Clinics</span></div> */}\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\">\r\n                            <div className=\"button is-danger is-small mr-2\" onClick={handleNewPrescription}>Presciption</div>\r\n                                <div className=\"button is-success is-small\" onClick={handleNewDocument}>New Document</div>\r\n                                </div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                \r\n                <div className=\" pullup \">\r\n                                <div className=\" is-fullwidth vscrollable pr-1\">\r\n                                   \r\n                                        {facilities.map((Clinic, i)=>(\r\n\r\n                                            <div key={Clinic._id}  onClick={()=>handleRow(Clinic)}   className={Clinic._id===(selectedClinic?._id||null)?\"is-selected\":\"\"}>\r\n                                               <div className=\"card mt-1 hovercard\">\r\n                                                    <header className=\"card-header\" onClick={(Clinic)=>Clinic.show=!Clinic.show}>\r\n                                                        <div className=\"card-header-title\">\r\n                                                        <div className=\"docdate\">{formatDistanceToNowStrict(new Date(Clinic.createdAt),{addSuffix: true})} <br/><span>{format(new Date(Clinic.createdAt),'dd-MM-yy')}</span></div> {Clinic.documentname} by {Clinic.createdByname} at {Clinic.location},{Clinic.facilityname} \r\n                                                        <p className=\"right ml-2 mr-0\">{Clinic.status} </p> \r\n                                                        </div>\r\n                                                       {/*  <button className=\"card-header-icon\" aria-label=\"more options\">\r\n                                                        <span className=\"icon\">\r\n                                                            <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                                        </span>\r\n                                                        </button> */}\r\n                                                    </header>\r\n                                                  {Clinic.documentname!==\"Prescription\" &&  <div className={Clinic.show?\"card-content p-1\":\"card-content p-1 is-hidden\"}>\r\n                                                        { Object.entries(Clinic.documentdetail).map(([keys,value],i)=>(\r\n                                                            <div className=\"field is-horizontal\"> \r\n                                                                    <div className=\"field-label\"> \r\n                                                                        <label className=\"label is-size-7\" key={i}>\r\n                                                                            {keys}:\r\n                                                                            </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"field-body\"> \r\n                                                                        <div className=\"field\" >\r\n                                                                            {value}   \r\n                                                                        </div>  \r\n                                                                    </div>                                                 \r\n                                                            </div>\r\n                                                            ))\r\n                                                        }\r\n                                                </div>}\r\n                                                {Clinic.documentname===\"Prescription\" &&  \r\n                                                <div className={Clinic.show?\"card-content p-1\":\"card-content p-1 is-hidden\"}>\r\n                                                        \r\n                                                        {(Clinic.documentdetail.length>0) && <div>\r\n                                                            <label>Medications:</label>\r\n                                                        <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable mr-2\">\r\n                                                                <thead>\r\n                                                                    <tr>\r\n                                                                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                                                \r\n                                                                    <th><abbr title=\"Type\">Medication</abbr></th>\r\n                                                                    <th><abbr title=\"Destination\">Destination</abbr></th>\r\n                                                                    </tr>\r\n                                                                </thead>\r\n                                                                <tfoot>\r\n                                                                    \r\n                                                                </tfoot>\r\n                                                                <tbody>\r\n                                                                { Clinic.documentdetail.map((ProductEntry, i)=>(\r\n\r\n                                                                        <tr key={i}>\r\n                                                                        <th>{i+1}</th>\r\n                                                                        {/* <td>{ProductEntry.name}</td> */}\r\n                                                                        <td>{ProductEntry.medication}<br/>\r\n                                                                        <span className=\"help is-size-7\">{ProductEntry.instruction}</span></td> \r\n                                                                        <td>{ProductEntry.destination}</td>                                                                     \r\n                                                                        </tr>\r\n\r\n                                                                    ))}\r\n                                                                </tbody>\r\n                                                                </table>\r\n                                                                </div>}                                                   \r\n                                                            </div>}\r\n                                                    </div>                                           \r\n                                            </div>\r\n\r\n                                        ))}\r\n                                      {/* <!-- Add Ref to Load More div --> */}\r\n                                       {/*  <div className=\"loading\" ref={loader}>\r\n                                                <h2>Load More</h2>\r\n                                    </div> */}\r\n                                </div>\r\n                                    \r\n                </div> \r\n                <div className={`modal  ${showModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card \">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Document Class</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        <DocumentClassList standalone=\"true\" />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>\r\n                                <div className={`modal ${showPrescriptionModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card larger\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Prescription</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowPrescriptionModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        <Prescription standalone=\"true\" />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>                            \r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicSetup.js",["238","239","240","241","242","243"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {toast} from 'bulma-toast'\r\nimport DocumentClass from '../EncounterMgt/DocumentClass'\r\n\r\n\r\nexport default function InventorySetup() {\r\n   \r\n    return (\r\n        <section className= \"section remPadTop\">\r\n            <DocumentClass />\r\n\r\n            <div className=\"level\">\r\n                <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Inventory Admin</span></div>\r\n            </div>\r\n            <div className=\"columns \">\r\n                <div className=\"column is-9\">\r\n                <div class=\"tabs\">\r\n                        <ul>\r\n                            <li class=\"is-active\"><div>Store</div></li>\r\n                            <li><div>Products</div></li>\r\n                            <li><div>Suppliers</div></li>\r\n                            <li><div>Documents</div></li>\r\n                        </ul>\r\n                    </div>\r\n                    \r\n                    <div class=\"field\">\r\n                        <p class=\"control has-icons-left  \">\r\n                            <input class=\"input is-small sz2\" type=\"text\" placeholder=\"Search Inventory\"  />\r\n                            <span class=\"icon is-small is-left\">\r\n                            <i class=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </p>\r\n                       \r\n                    </div>\r\n                    \r\n                            </div>\r\n                <div className=\"column is-3 has-background-white\">\r\n                    right\r\n                </div>\r\n            </div>                            \r\n        </section>\r\n    )\r\n}\r\n",["244","245"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\DocumentClass.js",["246","247","248","249","250"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function DocumentClass() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedDocumentClass,setSelectedDocumentClass]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">DocumentClass  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <DocumentClassList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.DocumentClassModule.show ==='create')&&<DocumentClassCreate />}\r\n                {(state.DocumentClassModule.show ==='detail')&&<DocumentClassDetail  />}\r\n                {(state.DocumentClassModule.show ==='modify')&&<DocumentClassModify DocumentClass={selectedDocumentClass} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function DocumentClassCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const DocumentClassServ=client.service('documentclass')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{ // buble-up from inputsearch for creating resource\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeDocumentClass.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n          data.locationType=\"DocumentClass\"\r\n        DocumentClassServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created DocumentClass successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'DocumentClass created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating DocumentClass ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create DocumentClass\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of DocumentClass\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n         \r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n          \r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function DocumentClassList({standalone}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const DocumentClassServ=client.service('documentclass')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedDocumentClass, setSelectedDocumentClass]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n   \r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newDocumentClassModule={\r\n            selectedDocumentClass:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, DocumentClassModule:newDocumentClassModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(DocumentClass)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",DocumentClass)\r\n\r\n        await setSelectedDocumentClass(DocumentClass)\r\n\r\n        const    newDocumentClassModule={\r\n            selectedDocumentClass:DocumentClass,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DocumentClassModule:newDocumentClassModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       DocumentClassServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                locationType:\"DocumentClass\",\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" DocumentClass  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching DocumentClass, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findDocumentClass= await DocumentClassServ.find(\r\n                {query: {\r\n                    /* locationType:\"DocumentClass\",\r\n                    facility:user.currentEmployee.facilityDetail._id, */\r\n                    $limit:20,\r\n                    $sort: {\r\n                        name: 1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findDocumentClass.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findDocumentClass= await DocumentClassServ.find(\r\n                            {query: {\r\n                               /*  locationType:\"DocumentClass\", */\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    name: 1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findDocumentClass.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" DocumentClass  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating DocumentClass, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n          /*   useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n              /*   if (user){\r\n                  \r\n                }else{ */\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n               /*  } */\r\n                DocumentClassServ.on('created', (obj)=>getFacilities())\r\n                DocumentClassServ.on('updated', (obj)=>getFacilities())\r\n                DocumentClassServ.on('patched', (obj)=>getFacilities())\r\n                DocumentClassServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search DocumentClass\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Document Class</span></div>\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        {/* <th><abbr title=\"Last Name\">DocumentClass Type</abbr></th>\r\n                                       <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                         <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>*/}\r\n                                       { !standalone &&  <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((DocumentClass, i)=>(\r\n\r\n                                            <tr key={DocumentClass._id} onClick={()=>handleRow(DocumentClass)}  className={DocumentClass._id===(selectedDocumentClass?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{DocumentClass.name}</th>\r\n                                            {/*<td>{DocumentClass.DocumentClassType}</td>\r\n                                            < td>{DocumentClass.profession}</td>\r\n                                            <td>{DocumentClass.phone}</td>\r\n                                            <td>{DocumentClass.email}</td>\r\n                                            <td>{DocumentClass.department}</td>\r\n                                            <td>{DocumentClass.deptunit}</td> \r\n                                            <td>{DocumentClass.facility}</td>*/}\r\n                                          { !standalone &&   <td><span   className=\"showAction\"  >...</span></td>}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function DocumentClassDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const DocumentClassServ=client.service('/DocumentClass')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const DocumentClass =state.DocumentClassModule.selectedDocumentClass \r\n\r\n    const handleEdit= async()=>{\r\n        const    newDocumentClassModule={\r\n            selectedDocumentClass:DocumentClass,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DocumentClassModule:newDocumentClassModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    DocumentClass Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {DocumentClass.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Location Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"DocumentClassType\">{DocumentClass.locationType} </span> \r\n                    </td>\r\n                </tr>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"DocumentClassCity\">{DocumentClass.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"DocumentClassContactPhone\" >{DocumentClass.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"DocumentClassEmail\" >{DocumentClass.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"DocumentClassOwner\">{DocumentClass.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"DocumentClassType\">{DocumentClass.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-DocumentClass-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"DocumentClassCategory\">{DocumentClass.DocumentClassCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function DocumentClassModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const DocumentClassServ=client.service('documentclass')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const DocumentClass =state.DocumentClassModule.selectedDocumentClass \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", DocumentClass.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"locationType\", DocumentClass.locationType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", DocumentClass.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", DocumentClass.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", DocumentClass.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", DocumentClass.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", DocumentClass.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"DocumentClassCategory\", DocumentClass.DocumentClassCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newDocumentClassModule={\r\n        selectedDocumentClass:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, DocumentClassModule:newDocumentClassModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newDocumentClassModule={\r\n            selectedDocumentClass:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, DocumentClassModule:newDocumentClassModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=DocumentClass._id\r\n        if (conf){\r\n             \r\n        DocumentClassServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted DocumentClass successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'DocumentClass deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting DocumentClass, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting DocumentClass, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=DocumentClass.facility\r\n          //console.log(data);\r\n          \r\n        DocumentClassServ.patch(DocumentClass._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated DocumentClass successfully\")\r\n                 toast({\r\n                    message: 'DocumentClass updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating DocumentClass, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating DocumentClass, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    DocumentClass Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Location Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"DocumentClassType\" type=\"text\" placeholder=\"DocumentClass Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"DocumentClass Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"DocumentClassCategory\" type=\"text\" placeholder=\"DocumentClass Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-DocumentClass-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                {/* <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}",["251","252"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\Encounter.js",["253","254","255","256","257"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\EncounterRight.js",["258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {DocumentClassList} from './DocumentClass'\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n\r\nexport default function EncounterRight() {\r\n    const {state,setState}=useContext(ObjectContext)\r\n    return (\r\n        <div>\r\n          {(state.DocumentClassModule.selectedDocumentClass.name==='Vital Signs') &&  <VitalSignCreate />}\r\n          {(state.DocumentClassModule.selectedDocumentClass.name==='Clinical Note') &&   <ClinicalNoteCreate />}\r\n          {(state.DocumentClassModule.selectedDocumentClass.name==='Prescription') &&   <PrescriptionCreate />}\r\n          {(state.DocumentClassModule.selectedDocumentClass.name==='Diagnostic Request') &&   <LabrequestCreate />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function VitalSignCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('clinicaldocument')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const {state}=useContext(ObjectContext)\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        let document={}\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          document.facility=user.currentEmployee.facilityDetail._id \r\n          document.facilityname=user.currentEmployee.facilityDetail.facilityName // or from facility dropdown\r\n          }\r\n         document.documentdetail=data\r\n          document.documentname=state.DocumentClassModule.selectedDocumentClass.name\r\n          document.documentClassId=state.DocumentClassModule.selectedDocumentClass._id\r\n          document.location=state.ClinicModule.selectedClinic.name+\" \"+state.ClinicModule.selectedClinic.locationType\r\n          document.locationId=state.ClinicModule.selectedClinic._id\r\n          document.client=state.ClientModule.selectedClient._id\r\n          document.createdBy=user._id\r\n          document.createdByname=user.firstname+ \" \"+user.lastname\r\n          document.status=\"completed\"\r\n          console.log(document)\r\n        ClientServ.create(document)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Documentation created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Documentation ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    {state?.DocumentClassModule.selectedDocumentClass.name||\"\"}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p> */}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <input className=\"input is-small\" ref={register()}  name=\"temperature\" type=\"text\" placeholder=\"temperature\" />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>\r\n                \r\n                \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register()}  name=\"pulse\" type=\"text\" placeholder=\"pulse\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">   \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"respiratory_rate\" type=\"text\" placeholder=\"Respiratory rate\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" fas fa-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"random_glucose\" type=\"text\" placeholder=\"Blood Glucose\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>  \r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"systolic_BP\" type=\"text\" placeholder=\"Systolic BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"diastolic_BP\" type=\"text\" placeholder=\"Diastolic_BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                </div> \r\n                </div> \r\n            <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"SPO2\" type=\"text\" placeholder=\"SPO2\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"pain\" type=\"text\" placeholder=\"Pain\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                \r\n            </div> \r\n        </div> \r\n               \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               \r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 \r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ClinicalNoteCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('clinicaldocument')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const {state}=useContext(ObjectContext)\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        let document={}\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          document.facility=user.currentEmployee.facilityDetail._id \r\n          document.facilityname=user.currentEmployee.facilityDetail.facilityName // or from facility dropdown\r\n          }\r\n         document.documentdetail=data\r\n          document.documentname=state.DocumentClassModule.selectedDocumentClass.name\r\n          document.documentClassId=state.DocumentClassModule.selectedDocumentClass._id\r\n          document.location=state.ClinicModule.selectedClinic.name+\" \"+state.ClinicModule.selectedClinic.locationType\r\n          document.locationId=state.ClinicModule.selectedClinic._id\r\n          document.client=state.ClientModule.selectedClient._id\r\n          document.createdBy=user._id\r\n          document.createdByname=user.firstname+ \" \"+user.lastname\r\n          document.status=\"completed\"\r\n          console.log(document)\r\n\r\n          if (\r\n            document.location===undefined ||!document.createdByname || !document.facilityname ){\r\n            toast({\r\n                message: ' Documentation data missing, requires location and facility details' ,\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n              return\r\n          }\r\n        ClientServ.create(document)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Documentation created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Documentation ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    {state?.DocumentClassModule.selectedDocumentClass.name||\"\"}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p> */}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <textarea className=\"textarea is-small\" ref={register()}  name=\"Symptoms\" type=\"text\" placeholder=\"Symptoms\" />\r\n                           {/*  <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-hospital\"></i>\r\n                            </span>   */}                  \r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <div className=\"control has-icons-left has-icons-right\">\r\n                        <textarea className=\"textarea is-small\" ref={register()}  name=\"Clinical Findings\" type=\"text\" placeholder=\"Clinical Findings\" />\r\n                        {/* <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span> */}\r\n                        \r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">   \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <textarea className=\"textarea is-small\" ref={register()} name=\"Diagnosis\" type=\"text\" placeholder=\"Diagnosis\"/>\r\n                        {/* <span className=\"icon is-small is-left\">\r\n                        <i className=\" fas fa-user-md \"></i>\r\n                        </span> */}\r\n                    </p>\r\n                </div>\r\n                </div>\r\n                </div>\r\n        {/* <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\"> */}       \r\n                <div className=\"field\">\r\n                    <div className=\"control has-icons-left\">\r\n                    \r\n                        <textarea className=\"textarea is-small \" ref={register()} name=\"Plan\" type=\"text\" placeholder=\"Plan\"  />\r\n                        {/* <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span> */}\r\n                    </div>\r\n              {/*   </div> \r\n            </div>   */}\r\n        </div>\r\n       {/*  <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"systolic_BP\" type=\"text\" placeholder=\"Systolic BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"diastolic_BP\" type=\"text\" placeholder=\"Diastolic_BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                </div> \r\n                </div> \r\n            <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"SPO2\" type=\"text\" placeholder=\"SPO2\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"pain\" type=\"text\" placeholder=\"Pain\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div> */}\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                \r\n            </div> \r\n        </div> \r\n               \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               \r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 \r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function PrescriptionCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('clinicaldocument')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const {state}=useContext(ObjectContext)\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        let document={}\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          document.facility=user.currentEmployee.facilityDetail._id \r\n          document.facilityname=user.currentEmployee.facilityDetail.facilityName // or from facility dropdown\r\n          }\r\n         document.documentdetail=data\r\n          document.documentname=state.DocumentClassModule.selectedDocumentClass.name\r\n          document.documentClassId=state.DocumentClassModule.selectedDocumentClass._id\r\n          document.location=state.ClinicModule.selectedClinic.name+\" \"+state.ClinicModule.selectedClinic.locationType\r\n          document.locationId=state.ClinicModule.selectedClinic._id\r\n          document.client=state.ClientModule.selectedClient._id\r\n          document.createdBy=user._id\r\n          document.createdByname=user.firstname+ \" \"+user.lastname\r\n          document.status=\"completed\"\r\n          console.log(document)\r\n        ClientServ.create(document)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Documentation created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Documentation ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    {state?.DocumentClassModule.selectedDocumentClass.name||\"\"}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p> */}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <input className=\"input is-small\" ref={register()}  name=\"temperature\" type=\"text\" placeholder=\"temperature\" />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>\r\n                \r\n                \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register()}  name=\"pulse\" type=\"text\" placeholder=\"pulse\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">   \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"respiratory_rate\" type=\"text\" placeholder=\"Respiratory rate\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" fas fa-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"random_glucose\" type=\"text\" placeholder=\"Blood Glucose\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>  \r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"systolic_BP\" type=\"text\" placeholder=\"Systolic BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"diastolic_BP\" type=\"text\" placeholder=\"Diastolic_BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                </div> \r\n                </div> \r\n            <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"SPO2\" type=\"text\" placeholder=\"SPO2\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"pain\" type=\"text\" placeholder=\"Pain\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                \r\n            </div> \r\n        </div> \r\n               \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               \r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 \r\n        </>\r\n    )\r\n   \r\n}\r\nexport function LabrequestCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('clinicaldocument')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const {state}=useContext(ObjectContext)\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        let document={}\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          document.facility=user.currentEmployee.facilityDetail._id \r\n          document.facilityname=user.currentEmployee.facilityDetail.facilityName // or from facility dropdown\r\n          }\r\n         document.documentdetail=data\r\n          document.documentname=state.DocumentClassModule.selectedDocumentClass.name\r\n          document.documentClassId=state.DocumentClassModule.selectedDocumentClass._id\r\n          document.location=state.ClinicModule.selectedClinic.name+\" \"+state.ClinicModule.selectedClinic.locationType\r\n          document.locationId=state.ClinicModule.selectedClinic._id\r\n          document.client=state.ClientModule.selectedClient._id\r\n          document.createdBy=user._id\r\n          document.createdByname=user.firstname+ \" \"+user.lastname\r\n          document.status=\"completed\"\r\n          console.log(document)\r\n        ClientServ.create(document)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Documentation created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Documentation ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    {state?.DocumentClassModule.selectedDocumentClass.name||\"\"}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p> */}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <input className=\"input is-small\" ref={register()}  name=\"temperature\" type=\"text\" placeholder=\"temperature\" />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>\r\n                \r\n                \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register()}  name=\"pulse\" type=\"text\" placeholder=\"pulse\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                    </div>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">   \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"respiratory_rate\" type=\"text\" placeholder=\"Respiratory rate\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" fas fa-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"random_glucose\" type=\"text\" placeholder=\"Blood Glucose\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>  \r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"systolic_BP\" type=\"text\" placeholder=\"Systolic BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"diastolic_BP\" type=\"text\" placeholder=\"Diastolic_BP\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                </div> \r\n                </div> \r\n            <div className=\"field is-horizontal\">\r\n             <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"SPO2\" type=\"text\" placeholder=\"SPO2\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"pain\" type=\"text\" placeholder=\"Pain\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                \r\n            </div> \r\n        </div> \r\n               \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               \r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 \r\n        </>\r\n    )\r\n   \r\n}",["278","279"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js",["280","281"],"//import logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter as Router, Route,  Switch, Redirect} from 'react-router-dom'\nimport Home from './components/Home'\nimport Login from './components/Login' \nimport SignUp from './components/SignUp'\nimport {useState, useContext, useEffect} from 'react'\nimport {UserContext,ObjectContext} from './context'\nimport MyUserProvider from './context'\nimport client from './feathers'\n\nimport 'bulma/css/bulma.css'\nimport \"@fortawesome/fontawesome-free/css/all.css\"; \n\n\nfunction App() {\n  \n  const [state,setState] = useState({\n    facilityModule:{\n      show:'create',\n      selectedFacility:{}\n    },\n    EmployeeModule:{\n      show:'create',\n      selectedEmployee:{}\n    },\n    LocationModule:{\n      show:'create',\n      selectedLocation:{}\n    },\n    ProductModule:{\n      show:'create',\n      selectedProduct:{}\n    },\n    StoreModule:{\n      show:'create',\n      selectedStore:{}\n    },\n    InventoryModule:{\n      show:'detail',\n      selectedInventory:{}\n    },\n    ProductEntryModule:{\n      show:'create',\n      selectedProductEntry:{}\n    },\n    ProductExitModule:{\n      show:'create',\n      selectedProductEntry:{}\n    },\n    ClinicModule:{\n      show:'create',\n      selectedClinic:{}\n    },\n    ClientModule:{\n      show:'create',\n      selectedClient:{}\n    },\n    DocumentClassModule:{\n      show:'create',\n      selectedDocumentClass:{}\n    },\n    AppointmentModule:{\n      show:'create',\n      selectedAppointment:{}\n    },\n    OrderModule:{\n      show:'create',\n      selectedOrder:{}\n    },\n    DispenseModule:{\n      show:'create',\n      selectedDispense:{}\n    },\n    DestinationModule:{\n      show:'create',\n      selectedDestination:{}\n    },\n    medicationModule:{\n      show:'create',\n      selectedMedication:{}\n    },\n    currentClients:[]\n\n  })\n  \n  \n \n  return (\n    <ObjectContext.Provider value={{state,setState}}>\n   {/*  <UserContext.Provider value={{user,setUser}}> */}\n   <MyUserProvider>\n    <Router>\n      <div className=\"App has-background-info\">\n        <Switch>\n          <Route path='/signup' exact>\n            <SignUp />\n          </Route>\n         <ProtectedRoute path='/app' >\n            <Home/>\n          </ProtectedRoute>\n          <Route path='/' exact>\n            <Login /> \n          </Route>\n          <Route path='*' >\n            <div>404-not found</div>\n          </Route>\n        </Switch>  \n      </div>\n    </Router>\n    </MyUserProvider>\n    {/* </UserContext.Provider> */}\n    </ObjectContext.Provider>\n  );\n}\n\nexport default App;\n\n// eslint-disable-next-line \nconst ProtectedRoute =({children,...props})=>{\n  \n  const {user,setUser} = useContext(UserContext)\n\n \nuseEffect(()=>{\nconst check=async ()=>{\n  if (!user){\n    (async () => {\n      try {\n        // First try to log in with an existing JWT\n        const resp= await client.reAuthenticate();\n            console.log(resp)\n           const user1=await resp.user \n           return    await setUser(resp.user)\n        \n      } catch (error) {\n        // If that errors, log in with email/password\n        // Here we would normally show a login page\n        // to get the login information\n        /* return await client.authenticate({\n          strategy: 'local',\n          email: 'hello@feathersjs.com',\n          password: 'supersecret'\n        }); */\n        console.log(error)\n      }\n    })()\n   }\n}\n check().then((resp)=>{\n  console.log(\"testing\")\n })\n  \n}, [])\n\n\n  return  (<Route {...props} render={({location}) => {\n    return  user/* fakeAuth.isAuthenticated === true */\n      ? children\n      : <Redirect to={{\n        pathname: '/',\n        state: { from: location }\n      }} />\n  }} />)\n  /* user? <Route {...props}>{children}</Route>:<Redirect to='/'></Redirect> */\n\n}\n\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js",["282","283"],"import io from 'socket.io-client'\r\nimport feathers from '@feathersjs/feathers'\r\nimport socketio from '@feathersjs/socketio-client'\r\nimport authentication from '@feathersjs/authentication-client'\r\n\r\nconst herok= 'https://healthstack-backend.herokuapp.com'\r\nconst url= 'http://localhost:3035'\r\nconst API = process.env.NODE_ENV !== 'production' ?  url :'https://healthstack-backend.herokuapp.com' ;\r\nconst socket=io(url, {\r\n    transports: ['websocket'],\r\n    forceNew: true\r\n  })\r\nconst client=feathers()\r\nclient.configure(socketio(socket))\r\nclient.configure(authentication({\r\n    storage:window.localStorage\r\n}))\r\n\r\nexport default client","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js",["284","285","286","287","288"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js",["289","290","291"],"import React, {useState,useContext} from 'react'\r\nimport client from '../feathers'\r\nimport { useForm } from \"react-hook-form\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport {UserContext} from '../context'\r\n\r\nexport default function Login() {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [error, setError] =useState(true)\r\n    const [errorMessage,setErrorMessage] = useState(\"\")\r\n    const userServ=client.service('/users')\r\n    const history = useHistory()\r\n    const {user,setUser} = useContext(UserContext)\r\n\r\n   \r\nconst onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setErrorMessage(\"\")\r\n        setError(false)\r\n           const  email=data.email\r\n           const password=data.password\r\n         \r\n          \r\n          client.authenticate({\r\n            strategy:'local',\r\n            email,\r\n            password\r\n        }).then(async (res)=>{\r\n                console.log(JSON.stringify(res.user))\r\n                e.target.reset();\r\n               await setUser(res.user)\r\n               console.log(user)\r\n               localStorage.setItem(\"user\",JSON.stringify(res.user))\r\n               history.push(\"/app\")\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setErrorMessage(\"Error loggin in User, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <section className=\"section\">\r\n        <div className=\"container\">\r\n        <div className=\"columns is-centered\">\r\n        <div className=\"column is-4 \">\r\n        <div className=\"card v-centered\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Health Stack\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n           <div className=\"field\">\r\n            <p className=\"control has-icons-left has-icons-right\">\r\n                <input className=\"input\" ref={register({ required: true })}  name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n                  <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-envelope\"></i>\r\n                </span>\r\n                \r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <input className=\"input\" ref={register({ required: true })} name=\"password\" type=\"password\" placeholder=\"Password\"/>\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"fas fa-lock\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control\">\r\n                <button className=\"button is-success is-small\">\r\n                    Login\r\n                </button>\r\n            </p>\r\n        </div>\r\n        { error && <div className=\"message\"> {errorMessage}</div>}\r\n        </form>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FacilityModule.js",["292"],"import React from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink} from 'react-router-dom'\r\nimport CareTeam from './facility/CareTeam'\r\nimport Department from './facility/Department'\r\nimport DeptUnits from './facility/DeptUnits'\r\nimport FacilityHome from './facility/FacilityHome'\r\nimport Employee from './facility/Employee'\r\nimport Facility from './facility/Facility'\r\nimport HSModules from './facility/HSModules'\r\nimport Location from './facility/Location'\r\nimport Roaster from './facility/Roaster'\r\nimport Workspace from './facility/Workspace'\r\nimport Accessibility from './facility/Accessibility'\r\n\r\nexport default function FacilityModule() {\r\n    let { path, url } = useRouteMatch();\r\n    return (\r\n            <section className=\"section has-background-info remPad\">\r\n               {/*  <div className=\"\"> */}\r\n                    <nav className=\"navbar minHt z10 has-background-info\">\r\n                        <div className=\"container minHt \">\r\n                            <div className=\"navbar-brand minHt \">\r\n                                <div className=\"navbar-item \">\r\n                                    <span className=\"is-size-6 has-text-weight-medium\">Health Stack::Facility</span> \r\n                                </div>\r\n                            {/* <div className=\"navbar-item\">\r\n                                <img src=\"https://bulma.io/images/bulma-type-white.png\" alt=\"Logo\" />\r\n                            </div> */}\r\n                                <span className=\"navbar-burger\" data-target=\"navbarMenuHeroB\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </span>\r\n                            </div>\r\n                            <div id=\"navbarMenuHeroB\" className=\"navbar-menu\">\r\n                                <div className=\"navbar-end\">\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}`}>Home Page</NavLink> \r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/accessibility`}>User Access</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/careteam`}>Care Teams</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/department`}>Department</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/dept-unit`}>Department Units</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/employees`}>Employees</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/facility`}>Facility</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/hsmodules`}>Modules</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/location`}>Locations</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/roaster`}>Roaster</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/workspace`}>Workspace</NavLink>\r\n                                    </div>\r\n                                    \r\n                                {/* <span className=\"navbar-item\">\r\n                                <div className=\"button is-info is-inverted\">\r\n                                    <span className=\"icon\">\r\n                                    <i className=\"fab fa-github\"></i>\r\n                                    </span>\r\n                                    <span>Download</span>\r\n                                </div>\r\n                                </span> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n               {/*  </div> */}\r\n                \r\n                {/* <div className=\"section\"> */}\r\n                {/* <div className=\"container mvUp \" > */}\r\n                       \r\n                    <Switch>\r\n                        <Route path={path} exact>\r\n                            <FacilityHome />\r\n                        </Route>\r\n                        <Route path={`${path}/accessibility`} exact >\r\n                            <Accessibility />\r\n                        </Route>\r\n                      \r\n                        <Route path={`${path}/careteam`} exact>\r\n                            <CareTeam />\r\n                        </Route>\r\n                        <Route path={`${path}/department`} exact>\r\n                            <Department/>\r\n                        </Route>\r\n                        <Route path={`${path}/dept-unit`} exact>\r\n                            <DeptUnits />\r\n                        </Route>\r\n                        <Route path={`${path}/employees`} >\r\n                            <Employee />\r\n                        </Route>\r\n                        <Route path={`${path}/facility`} exact >\r\n                            <Facility />\r\n                        </Route>\r\n                        <Route path={`${path}/hsmodules`} exact>\r\n                            <HSModules />\r\n                        </Route>\r\n                        <Route path={`${path}/location`} exact>\r\n                            <Location/>\r\n                        </Route>\r\n                        <Route path={`${path}/roaster`} exact>\r\n                            <Roaster/>\r\n                        </Route>\r\n                        <Route path={`${path}/Workspace`} exact>\r\n                            <Workspace />\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                  \r\n\r\n                \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js",[],["293","294"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Roaster.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Accessibility.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Facility.js",["295"],"import React, {useState,useContext, useEffect} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\n\r\nexport default function Facility() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedFacility,setSelectedFacility]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    //console.log(\"facility parent\", state)\r\n    \r\n\r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Facility  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <FacilityList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.facilityModule.show ==='create')&&<FacilityCreate />}\r\n                {(state.facilityModule.show ==='detail')&&<FacilityDetail  />}\r\n                {(state.facilityModule.show ==='modify')&&<FacilityModify facility={selectedFacility} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function FacilityCreate(){\r\n    const { register, handleSubmit} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n\r\n    \r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n                setMessage(\"Created facility successfully\")\r\n                setSuccess(true)\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Facility\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function FacilityList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const facilityServ=client.service('facility')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedFacility, setSelectedFacility]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n\r\n   \r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(facility)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",facility)\r\n\r\n        await setSelectedFacility(facility)\r\n\r\n        const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='facilityName'\r\n       console.log(val)\r\n       facilityServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" facility  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n\r\n           /*  if (val.length>2){\r\n                console.log(\"in\")\r\n               \r\n            }\r\n\r\n        }\r\n     */\r\n        const getFacilities=()=>{\r\n            facilityServ.find({query: {\r\n              \r\n                $limit:20,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }})\r\n            .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" facility  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                    setError(true)\r\n                })\r\n\r\n        }\r\n\r\n    useEffect(() => {\r\n        getFacilities()\r\n\r\n        facilityServ.on('created', (obj)=>getFacilities())\r\n        facilityServ.on('updated', (obj)=>getFacilities())\r\n        facilityServ.on('patched', (obj)=>getFacilities())\r\n        facilityServ.on('removed', (obj)=>getFacilities())\r\n        return () => {\r\n           \r\n        }\r\n    },[])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n            <>   \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Facilities </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"S/No\">S/No</abbr></th>\r\n                                        <th>Facility Name</th>\r\n                                        <th><abbr title=\"Address\"> Address</abbr></th>\r\n                                        <th><abbr title=\"City\">City</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th><abbr title=\"Category\">Category</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((facility, i)=>(\r\n\r\n                                            <tr key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{facility.facilityName}</th>\r\n                                            <td>{facility.facilityAddress}</td>\r\n                                            <td>{facility.facilityCity}</td>\r\n                                            <td>{facility.facilityContactPhone}</td>\r\n                                            <td>{facility.facilityEmail}</td>\r\n                                            <td>{facility.facilityType}</td>\r\n                                            <td>{facility.facilityCategory}</td>\r\n                                           \r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>               \r\n            </>\r\n              \r\n    )\r\n}\r\n\r\nexport function FacilityDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const facility =state.facilityModule.selectedFacility \r\n\r\n    const handleEdit= async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Facility Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <fieldset>\r\n                <div className=\"field \">\r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: <span className=\"is-small \"   name=\"facilityName\"> {facility.facilityName} </span>\r\n                        </label>\r\n                \r\n                        \r\n             \r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Address:\r\n                   \r\n                    <span className=\"is-small \"  name=\"facilityAddress\">{facility.facilityAddress} </span> \r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>City: \r\n                \r\n                    <span className=\"is-small \"  name=\"facilityCity\">{facility.facilityCity}</span> \r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    <span className=\"is-small \"  name=\"facilityContactPhone\" >{facility.facilityContactPhone}</span>\r\n                        </label>\r\n \r\n                \r\n                \r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     <span className=\"is-small \"  name=\"facilityEmail\" >{facility.facilityEmail}</span>\r\n                    \r\n                         </label>\r\n\r\n               \r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>CEO:\r\n                    <span className=\"is-small \"  name=\"facilityOwner\">{facility.facilityOwner}</span>\r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Type:              \r\n                    <span className=\"is-small \"  name=\"facilityType\">{facility.facilityType}</span>\r\n                </label>\r\n \r\n                </div>\r\n            <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-small \"  name= \"facilityCategory\">{facility.facilityCategory}</span>\r\n                </label>\r\n\r\n\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </fieldset>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function FacilityModify(){\r\n    const { register, handleSubmit, setValue,reset } = useForm(); //watch, errors,\r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const facility =state.facilityModule.selectedFacility \r\n\r\n        useEffect(() => {\r\n            setValue(\"facilityName\", facility.facilityName,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityAddress\", facility.facilityAddress,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityCity\", facility.facilityCity,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityContactPhone\", facility.facilityContactPhone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityEmail\", facility.facilityEmail,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityOwner\", facility.facilityOwner,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityType\", facility.facilityType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityCategory\", facility.facilityCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newfacilityModule={\r\n        selectedFacility:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=facility._id\r\n        if (conf){\r\n             \r\n        facilityServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n                setMessage(\"Deleted facility successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200);\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error deleting facility, probable network issues \"+ err )\r\n                setError(true)\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 200);\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        console.log(data)\r\n          //data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.update(facility._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n                setMessage(\"updated facility successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Facility Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\">Name \r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Address\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">City\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">CEO\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Type\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div>\r\n            <div className=\"field  is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={handleDelete}>\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   ","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js",["296","297","298","299","300","301","302","303"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Inventory() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedInventory,setSelectedInventory]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Inventory  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <InventoryList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.InventoryModule.show ==='create')&&<InventoryCreate />}\r\n                {(state.InventoryModule.show ==='detail')&&<InventoryDetail  />}\r\n                {(state.InventoryModule.show ==='modify')&&<InventoryModify Inventory={selectedInventory} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function InventoryCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeInventory.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        InventoryServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Inventory successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Inventory created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Inventory ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Inventory: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field\">    \r\n                <div class=\"control\">\r\n                    <div class=\"select is-small\">\r\n                        <select>\r\n                            <option>Purchase Invoice </option>\r\n                            <option>Initialization</option>\r\n                            <option>Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> {/* Audit/initialization/Purchase Invoice */}\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"supplier\" type=\"text\" placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"date\" type=\"text\" placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"totalamount\" type=\"text\" placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n         {/* array of inventory items */}\r\n         <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\"> +</span>\r\n                    </button>\r\n                </p>\r\n           <div className=\"field\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } /* add array no */ name=\"productId\" type=\"text\" placeholder=\"Product Id\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"quantity\" type=\"text\" placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                <label className=\"label is-small\">Base Unit</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"costprice\" type=\"text\" placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function InventoryList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedInventory, setSelectedInventory]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n    }\r\n\r\n    const handleRow= async(Inventory)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Inventory)\r\n\r\n        await setSelectedInventory(Inventory)\r\n\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       InventoryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Inventory  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Inventory, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findInventory= await InventoryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findInventory.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findInventory= await InventoryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findInventory.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Inventory  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                InventoryServ.on('created', (obj)=>getFacilities())\r\n                InventoryServ.on('updated', (obj)=>getFacilities())\r\n                InventoryServ.on('patched', (obj)=>getFacilities())\r\n                InventoryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n        \r\n        useEffect(() => {\r\n            getFacilities()\r\n            return () => {\r\n               \r\n            }\r\n        }, [state.StoreModule.selectedStore])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Inventory\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Inventories </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        {/* <th><abbr title=\"Category\">Category</abbr></th> */}\r\n                                        <th>Product</th>\r\n                                        <th><abbr title=\"Quantity\">Quantity</abbr></th>\r\n                                        <th><abbr title=\"Base Unit\">Base Unit</abbr></th>\r\n                                        <th><abbr title=\"Stock Value\">Stock Value</abbr></th>\r\n                                         <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                                        <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                                        <th><abbr title=\"Re-Order Level\">Re-Order Level</abbr></th>\r\n                                        <th><abbr title=\"Expiry\">Expiry</abbr></th> \r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Inventory, i)=>(\r\n\r\n                                            <tr key={Inventory._id} onClick={()=>handleRow(Inventory)}>\r\n                                            <th>{i+1}</th>\r\n                                            {/* <td>{Inventory.productDetail.category}</td> */}\r\n                                            <th>{Inventory.name}</th>\r\n                                            <td>{Inventory.quantity}</td>\r\n                                            <td>{Inventory.baseunit}</td>\r\n                                            <td>{Inventory.stockvalue}</td>\r\n                                            <td>{Inventory.costprice}</td>\r\n                                            <td>{Inventory.sellingprice}</td>\r\n                                            <td>{Inventory.reorder_level}</td> \r\n                                            <td>{Inventory.expiry}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function InventoryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const InventoryServ=client.service('/Inventory')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const {user} = useContext(UserContext) //,setUser\r\n    \r\n   \r\n\r\n   const Inventory =state.InventoryModule.selectedInventory \r\n   console.log(\"selected\",Inventory)\r\n\r\n   \r\n  const getFacilities= async()=>{\r\n     const findProductEntry= await client.service('productentry').find(\r\n        {query: {\r\n            'productitems.productId':Inventory.productId,\r\n            facility:user.currentEmployee.facilityDetail._id,\r\n            storeId:state.StoreModule.selectedStore._id,\r\n            $limit:20,\r\n            $sort: {\r\n                createdAt: -1\r\n            }\r\n            }})\r\n\r\n        console.log(findProductEntry)\r\n       }\r\n    \r\n       useEffect(() => {\r\n        getFacilities()\r\n           return () => {\r\n               \r\n           }\r\n       }, [Inventory])\r\n /* await setFacilities(findProductEntry.data)\r\n        }\r\n        else {\r\n            if (user.stacker){ */\r\n                /* toast({\r\n                    message: 'You do not qualify to view this',\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  }) \r\n                  return */\r\n               /*  const findProductEntry= await ProductEntryServ.find(\r\n                    {query: {\r\n                        \r\n                        $limit:20,\r\n                        $sort: {\r\n                            createdAt: -1\r\n                        }\r\n                        }})\r\n    \r\n            await setFacilities(findProductEntry.data)\r\n\r\n            }\r\n        }  */\r\n  /*   .then((res)=>{\r\n        console.log(res)\r\n            setFacilities(res.data)\r\n            setMessage(\" ProductEntry  fetched successfully\")\r\n            setSuccess(true)\r\n        })\r\n        .catch((err)=>{\r\n            setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n            setError(true)\r\n        }) */\r\n    \r\n    \r\n\r\n\r\n\r\n    const handleEdit= async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Inventory Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Product Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"><strong> {Inventory.name} </strong></span>\r\n                        </td>\r\n                    </tr>\r\n                   {/*  <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Inventory Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"InventoryType\">{Inventory.InventoryType} </span> \r\n                    </td>\r\n                </tr> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Set Price\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\"  /*  onClick={handleSetPrice} */>\r\n                        Audit\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-info is-small\" /* onClick={handleEdit} */>\r\n                        Transaction History\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" /* onClick={handleEdit} */>\r\n                        Reorder Level\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function InventoryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    const [billservice,setBillService] = useState()\r\n    // eslint-disable-next-line \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const billServ=client.service('billing')\r\n\r\n    const Inventory =state.InventoryModule.selectedInventory // set inventory\r\n    const handleSetPrice = async()=>{\r\n    \r\n        const service = await  billServ.get(Inventory.billingId) // get the service\r\n            const contractSel= service.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n            \r\n            setValue(\"price\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"oldprice\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            await setBillService(service)\r\n            console.log(contractSel,service)\r\n    }\r\n \r\n        useEffect(() => {\r\n            handleSetPrice()\r\n     \r\n            return () => {\r\n                \r\n            }\r\n        },[])\r\n\r\n   const handleCancel=async()=>{\r\n   \r\n    const    newInventoryModule={\r\n        selectedInventory:{},\r\n        show :'detail'\r\n      }\r\n        await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n            const    newInventoryModule={\r\n                selectedInventory:{},\r\n                show :'detail'\r\n            }\r\n        setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n\r\n        }\r\n\r\n\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Inventory._id\r\n        if (conf){\r\n             \r\n        InventoryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Inventory successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Inventory deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Inventory, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n       // data.facility=Inventory.facility\r\n          //console.log(data);\r\n          const contractSel= billservice.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n          contractSel[0].price=data.price \r\n          billServ.patch(billservice._id,billservice)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Inventory successfully\")\r\n                 toast({\r\n                    message: 'Price updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Price, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            }) \r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Set Price for {Inventory.name} per {Inventory.baseunit}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> New Selling Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"price\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Old Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"oldprice\" type=\"text\" placeholder=\"Inventory Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n           \r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='name' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryReport.js",[],["304","305"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClientMgt\\Patient.js",["306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink, useHistory} from 'react-router-dom'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport { formatDistanceToNowStrict } from 'date-fns'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Client() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedClient,setSelectedClient]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ClientList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ClientModule.show ==='create')&&<ClientCreate />}\r\n                {(state.ClientModule.show ==='detail')&&<ClientDetail  />}\r\n                {(state.ClientModule.show ==='modify')&&<ClientModify Client={selectedClient} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ClientCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('client')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        ClientServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Client created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Client ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Client\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <input className=\"input is-small\" ref={register()}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>\r\n                \r\n                \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register()}  name=\"middlename\" type=\"text\" placeholder=\"Middle Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>\r\n              \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"lastname\" type=\"text\" placeholder=\"Last Name\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" fas fa-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </div>  \r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"dob\" type=\"text\" placeholder=\"Date of Birth\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"gender\" type=\"text\" placeholder=\"Gender\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"maritalstatus\" type=\"text\" placeholder=\"Marital Status\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"mrn\" type=\"text\" placeholder=\"Medical Records Number\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"religion\" type=\"text\" placeholder=\"Religion\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"profession\" type=\"text\" placeholder=\"Profession\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-phone-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n   \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register()} name=\"address\" type=\"text\" placeholder=\"Residential Address\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"city\" type=\"text\" placeholder=\"Town/City\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"lga\" type=\"text\" placeholder=\"Local Govt Area\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"state\" type=\"text\" placeholder=\"State\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"country\" type=\"text\" placeholder=\"Country\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <input className=\"input is-small\" ref={register()} name=\"bloodgroup\" type=\"text\" placeholder=\"Blood Group\"  />\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <input className=\"input is-small\" ref={register()} name=\"genotype\" type=\"text\" placeholder=\"Genotype\"  />\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <input className=\"input is-small\" ref={register()} name=\"disabilities\" type=\"text\" placeholder=\"Disabilities\"  />\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> \r\n                </div> \r\n            </div>  \r\n            \r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"allergies\" type=\"text\" placeholder=\"Allergies\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"comorbidities\" type=\"text\" placeholder=\"Co-mobidities\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register()} name=\"clientTags\" type=\"text\" placeholder=\"Tags\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register()} name=\"specificDetails\" type=\"text\" placeholder=\"Specific Details about patient\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"nok_name\" type=\"text\" placeholder=\"Next of Kin Full Name\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"nok_phoneno\" type=\"text\" placeholder=\"Next of Kin Phone Number\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"nok_email\" type=\"email\" placeholder=\"Next of Kin Email\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"nok_relationship\" type=\"text\" placeholder=\"Next of Kin Relationship\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div> \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 {/*  <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n         {/*   <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ClientList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ClientServ=client.service('client')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedClient, setSelectedClient]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const newClientModule={\r\n            selectedClient:{},\r\n            show :'create'\r\n            }\r\n        await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n       //console.log(state)\r\n        } \r\n\r\n    \r\n    const handleRow= async(Client)=>{\r\n        await setSelectedClient(Client)\r\n        const    newClientModule={\r\n            selectedClient:Client,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='firstname'\r\n       console.log(val)\r\n       ClientServ.find({query: {\r\n                $or:[\r\n                    { firstname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { lastname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { middlename: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { phone: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { clientTags: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { mrn: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { specificDetails: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                ],\r\n              \r\n              facility:user.currentEmployee.facilityDetail._id, // || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Client  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Client, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n    const getFacilities= async()=>{\r\n            if (user.currentEmployee){      \r\n            const findClient= await ClientServ.find(\r\n                {query: {\r\n                   // facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findClient.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findClient= await ClientServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findClient.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Client  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Client, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n    /* useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n    useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ClientServ.on('created', (obj)=>getFacilities())\r\n                ClientServ.on('updated', (obj)=>getFacilities())\r\n                ClientServ.on('patched', (obj)=>getFacilities())\r\n                ClientServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Clients\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Clients </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>First Name</th>\r\n                                        <th><abbr title=\"Middle Name\">Middle Name</abbr></th>\r\n                                       <th><abbr title=\"Last Name\">Last Name</abbr></th>\r\n                                       <th><abbr title=\"Age\">Age</abbr></th>\r\n                                        <th><abbr title=\"Gender\">Gender</abbr></th> \r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Tags\">Tags</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Client, i)=>(\r\n\r\n                                            <tr key={Client._id} onClick={()=>handleRow(Client)}  className={Client._id===(selectedClient?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Client.firstname}</th>\r\n                                            <td>{Client.middlename}</td>\r\n                                           < td>{Client.lastname}</td>\r\n                                           <td>{formatDistanceToNowStrict(new Date(Client.dob))}</td>\r\n                                            <td>{Client.gender}</td>\r\n                                             <td>{Client.phone}</td>\r\n                                            <td>{Client.email}</td>\r\n                                            <td>{Client.clientTags}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\n\r\nexport function ClientDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const history =useHistory()\r\n    let { path, url } = useRouteMatch();\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ClientServ=client.service('/Client')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Client =state.ClientModule.selectedClient \r\n    const client=Client\r\n    const handleEdit= async()=>{\r\n        const    newClientModule={\r\n            selectedClient:Client,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Client Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.firstname &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <label className=\"label is-size-7 my-0 \"   name=\"firstname\" type=\"text\">First Name </label><label className=\"is-size-7 my-0 \">{Client.firstname }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>}\r\n\r\n\r\n                    {Client.middlename &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <label className=\"label is-size-7 my-0\"   name=\"middlename\" type=\"text\"> Middle Name </label><label className=\"is-size-7 my-0\">{Client.middlename }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>}\r\n             {Client.lastname &&\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"lastname\" type=\"text\">Last Name</label><label className=\"is-size-7 my-0\">{Client.lastname }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" nop-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                </div>  \r\n                </div>\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.dob &&<div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"dob\" type=\"text\">Date of Birth </label><label className=\"is-size-7 my-0\">{ new Date(Client.dob).toLocaleDateString('en-GB')}</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.gender &&<div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"gender\" type=\"text\">Gender </label><label className=\"is-size-7 my-0\">{Client.gender }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.maritalstatus && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"maritalstatus\" type=\"text\">Marital Status </label><label className=\"is-size-7 my-0\">{Client.maritalstatus }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.mrn && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"mrn\" type=\"text\">Medical Records Number  </label><label className=\"is-size-7 my-0\">{Client.mrn }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                </div>\r\n                </div>\r\n                <div className=\"field is-horizontal\">\r\n                    <div className=\"field-body\">\r\n                    {Client.religion && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"religion\" type=\"text\">Religion  </label><label className=\"is-size-7 my-0\">{Client.religion }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.profession &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"profession\" type=\"text\">Profession  </label><label className=\"is-size-7 my-0\">{Client.profession }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.phone &&<div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                            <label className=\"label is-size-7 my-0\"  name=\"phone\" type=\"text\"> Phone No</label><label className=\"is-size-7 my-0\">{Client.phone }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-phone-alt\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n\r\n                    {Client.email && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"email\" type=\"email\">Email  </label><label className=\"is-size-7 my-0\">{Client.email }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    </div>\r\n                </div>\r\n\r\n                {Client.address &&<div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n\r\n                    <label className=\"label is-size-7 my-0\"  name=\"address\" type=\"text\">Residential Address  </label><label className=\"is-size-7 my-0\">{Client.address }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div>} \r\n                <div className=\"field is-horizontal\">\r\n                    <div className=\"field-body\">\r\n                        {Client.city && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                            \r\n                                <label className=\"label is-size-7 my-0\"  name=\"city\" type=\"text\">Town/City  </label><label className=\"is-size-7 my-0\">{Client.city }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.lga && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                            \r\n                                <label className=\"label is-size-7 my-0\"  name=\"lga\" type=\"text\">Local Govt Area  </label><label className=\"is-size-7 my-0\">{Client.lga }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.state && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                                <label className=\"label is-size-7 my-0\"  name=\"state\" type=\"text\">State  </label><label className=\"is-size-7 my-0\">{Client.state }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.country &&<div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"country\" type=\"text\">Country  </label><label className=\"is-size-7 my-0\">{Client.country }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n                    </div>\r\n                </div> \r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                     {Client.bloodgroup &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"bloodgroup\" type=\"text\">Blood Group </label><label className=\"is-size-7 my-0\">{Client.bloodgroup }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n                   \r\n                    {Client.genotype && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"genotype\" type=\"text\">Genotype  </label><label className=\"is-size-7 my-0\">{Client.genotype }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.disabilities && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"disabilities\" type=\"text\">Disabilities  </label><label className=\"is-size-7 my-0\">{Client.disabilities }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                </div> \r\n                </div>  \r\n\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n\r\n                {Client.allergies && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"allergies\" type=\"text\">Allergies  </label><label className=\"is-size-7 my-0\">{Client.allergies }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.comorbidities && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"comorbidities\" type=\"text\">Co-mobidities  </label><label className=\"is-size-7 my-0\">{Client.comorbidities }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                </div>\r\n                </div>\r\n               {Client.clientTags && <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n\r\n                    <label className=\"label is-size-7 my-0\"  name=\"clientTags\" type=\"text\">Tags </label><label className=\"is-size-7 my-0\">{Client.clientTags }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div> }\r\n                {Client.specificDetails && <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <label className=\"label is-size-7 my-0\"  name=\"specificDetails\" type=\"text\">Specific Details about Client </label><label className=\"is-size-7 my-0\">{Client.specificDetails }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div> }\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.nok_name && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_name\" type=\"text\">Next of Kin Full Name</label><label className=\"is-size-7 my-0\">{Client.nok_name }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                {Client.nok_phoneno && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_phoneno\" type=\"text\">Next of Kin Phone Number</label><label className=\"is-size-7 my-0\">{Client.nok_phoneno }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.nok_email && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_email\" type=\"email\">Next of Kin Email </label><label className=\"is-size-7 my-0\">{Client.nok_email }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                {Client.nok_relationship && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_relationship\" type=\"text\">Next of Kin Relationship\"  </label><label className=\"is-size-7 my-0\">{Client.nok_relationship }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                </div>\r\n                </div> \r\n            <div className=\"field is-grouped  mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit Details\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-info is-small\" >\r\n                        Financial Info\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" >\r\n                        Schedule appointment\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" >\r\n                        Check into Clinic \r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-link is-small\" onClick={()=>{history.push('/app/clinic/encounter')}} >\r\n                        Attend to Client\r\n                    </button>\r\n                </p>\r\n\r\n            </div>\r\n            \r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ClientModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ClientServ=client.service('client')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Client =state.ClientModule.selectedClient \r\n\r\n        useEffect(() => {\r\n            setValue(\"firstname\", Client.firstname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"middlename\", Client.middlename,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"lastname\", Client.lastname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Client.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Client.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"dob\", Client.dob,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"gender\", Client.gender,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"profession\", Client.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n            setValue(\"address\", Client.address,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"city\", Client.city,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"state\", Client.state,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"country\", Client.country,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_name\", Client.nok_name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_email\", Client.nok_email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_phoneno\", Client.nokphoneno,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"lga\", Client.lga,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n            setValue(\"bloodgroup\", Client.bloodgroup,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"genotype\", Client.genotype,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"disabilities\", Client.disabilities,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"specificDetails\", Client.specificDetails,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"clientTags\", Client.clientTags,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"mrn\", Client.mrn,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"comorbidities\", Client.comorbidities,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"allergies\", Client.allergies,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n           \r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newClientModule={\r\n        selectedClient:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newClientModule={\r\n            selectedClient:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Client._id\r\n        if (conf){\r\n             \r\n        ClientServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Client successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Client deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Client, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Client, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n       // console.log(data)\r\n      //  data.facility=Client.facility\r\n          //console.log(data);\r\n          \r\n        ClientServ.patch(Client._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Client successfully\")\r\n                 toast({\r\n                    message: 'Client updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Client, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Client, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Client Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <label className=\"label is-size-7\"   >First Name </label> <input className=\"input is-small\" ref={register()} name=\"firstname\" type=\"text\"placeholder=\"First Name \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-hospital\"></i>\r\n                    </span>                    \r\n                </p>\r\n            </div>\r\n\r\n\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                <label className=\"label is-size-7\"   > Middle Name </label><input className=\"input is-small\" ref={register()} name=\"middlename\" type=\"text\" placeholder=\"Middle Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-map-signs\"></i>\r\n                </span>\r\n                \r\n                </p>\r\n            </div>\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  >Last Name</label><input className=\"input is-small\" ref={register()} name=\"lastname\" type=\"text\"placeholder=\"Last Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\" nop-user-md \"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>  \r\n        </div>\r\n        \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Date of Birth  </label><input className=\"input is-small\" ref={register()} name=\"dob\" type=\"text\"placeholder=\"Date of Birth \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Gender  </label><input className=\"input is-small\" ref={register()} name=\"gender\" type=\"text\"placeholder=\"Gender  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Marital Status  </label><input className=\"input is-small\" ref={register()} name=\"maritalstatus\" type=\"text\"placeholder=\"Marital Status  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  > Records Number </label><input className=\"input is-small\" ref={register()} name=\"mrn\" type=\"text\"placeholder=\"Records Number  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Religion</label><input className=\"input is-small\" ref={register()} name=\"religion\" type=\"text\"placeholder=\"Religion \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Profession  </label><input className=\"input is-small\" ref={register()} name=\"profession\" type=\"text\" placeholder=\"Profession\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  > Phone No</label><input className=\"input is-small\" ref={register()} name=\"phone\" type=\"text\" placeholder=\" Phone No \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-phone-alt\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Email  </label><input className=\"input is-small\" ref={register()} name=\"email\" type=\"email\"placeholder=\"Email  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n\r\n            <label className=\"label is-size-7\"  >Residential Address  </label><input className=\"input is-small\" ref={register()} name=\"address\" type=\"text\" placeholder=\"Residential Address  \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Town/City  </label><input className=\"input is-small\" ref={register()} name=\"city\" type=\"text\" placeholder=\"Town/City  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Local Govt Area  </label><input className=\"input is-small\" ref={register()} name=\"lga\" type=\"text\"placeholder=\"Local Govt Area  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >State  </label><input className=\"input is-small\" ref={register()} name=\"state\" type=\"text\"placeholder=\"State\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Country  </label><input className=\"input is-small\" ref={register()} name=\"country\" type=\"text\" placeholder=\"Country  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\"  >Blood Group </label><input className=\"input is-small\" ref={register()} name=\"bloodgroup\" type=\"text\"placeholder=\"Blood Group \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\"  >Genotype  </label><input className=\"input is-small\" ref={register()} name=\"genotype\" type=\"text\" placeholder=\"Genotype \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\" >Disabilities  </label><input className=\"input is-small\" ref={register()}  name=\"disabilities\" type=\"text\"placeholder=\"Disabilities  \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n        </div> \r\n        </div>  \r\n\r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Allergies  </label><input className=\"input is-small\" ref={register()} name=\"allergies\" type=\"text\"placeholder=\"Allergies  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Co-mobidities </label><input className=\"input is-small\" ref={register()} name=\"comorbidities\" type=\"text\"placeholder=\"Co-mobidities \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n\r\n            <label className=\"label is-size-7\"  >Tags  </label><input className=\"input is-small\" ref={register()} name=\"clientTags\" type=\"text\" placeholder=\"Tags \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n            <label className=\"label is-size-7\"  >Specific Details about client  </label><input className=\"input is-small\" ref={register()} name=\"specificDetails\" type=\"text\"placeholder=\"Specific Details about client \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  >Next of Kin Full Name</label><input className=\"input is-small\" ref={register()} name=\"nok_name\" type=\"text\"placeholder=\"Next of Kin Full Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-clinic-medical\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\" >Phone Number</label><input className=\"input is-small\" ref={register()}  name=\"nok_phoneno\" type=\"text\"placeholder=\" \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-clinic-medical\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Next of Kin Email  </label><input className=\"input is-small\" ref={register()} name=\"nok_email\" type=\"email\"placeholder=\"Next of Kin Email  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  > Relationship  </label><input className=\"input is-small\" ref={register()} name=\"nok_relationship\" type=\"text\" placeholder=\"Next of Kin Relationship\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>\r\n        </div> \r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    const ClientServ=client.service('client')\r\n   // const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            ClientServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js",["323","324","325","326"],"import React,{useState,useContext,useEffect} from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink} from 'react-router-dom'\r\nimport InventoryReport from './inventory/InventoryReport'\r\nimport InventorySetup from './inventory/InventorySetup'\r\nimport InventoryStore from './inventory/InventoryStore'\r\nimport InventoryHome from './inventory/InventoryHome'\r\nimport ProductEntry from './inventory/ProductEntry'\r\nimport ProductExit from './inventory/ProductExit'\r\nimport Dispense from './inventory/Dispensary'\r\nimport Products from './inventory/Products'\r\nimport Store, { StoreList } from './inventory/Store'\r\nimport {UserContext,ObjectContext} from '../context'\r\n\r\nexport default function InventoryModule() {\r\n    const {state,setState}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedStore,setSelectedStore]=useState()\r\n    const [showModal,setShowModal]=useState(false)\r\n\r\n    let { path, url } = useRouteMatch();\r\n    \r\n    useEffect(() => {\r\n       \r\n        console.log(\"starting up inventory module\")\r\n        if (!selectedStore){\r\n            handleChangeStore()\r\n\r\n            }\r\n         return () => {       \r\n            }\r\n        }, [])\r\n   \r\n    useEffect(()=>{\r\n     setSelectedStore(state.StoreModule.selectedStore)\r\n\r\n    },[state.StoreModule])\r\n\r\n    const handleChangeStore= async()=>{\r\n        await setShowModal(true)                                                                                                                                                        \r\n        console.log( showModal)\r\n    }\r\n\r\n    return (\r\n            <section className=\"section has-background-info remPad\">\r\n               \r\n               {/*  <div className=\"\"> */}\r\n                    <nav className=\"navbar minHt z10 has-background-info\">\r\n                        <div className=\"container minHt \">\r\n                            <div className=\"navbar-brand minHt\">\r\n                                <div className=\"navbar-item \">\r\n                                    <span className=\"is-size-6 has-text-weight-medium\">\r\n                                        Health Stack::Inventory::{selectedStore?selectedStore.name:\"\"}</span>\r\n                                        <button className=\"button is-small is-info\" onClick={()=>handleChangeStore()}>Change Store</button> \r\n                                </div>\r\n                                \r\n                            {/* <div className=\"navbar-item\">\r\n                                <img src=\"https://bulma.io/images/bulma-type-white.png\" alt=\"Logo\" />\r\n                            </div> */}\r\n                                <span className=\"navbar-burger\" data-target=\"navbarMenuHeroB\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </span>\r\n                            </div>\r\n                            <div id=\"navbarMenuHeroB\" className=\"navbar-menu\">\r\n                                <div className=\"navbar-end\">\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}`}>Home Page</NavLink> \r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-stores`}>Stores</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-dispense`}>Dispensary</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-inventory`}>Store Inventory</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-entry`}>Product Entry</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-exit`}>Product Exit</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-products`}>Products</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-reports`}>Reports</NavLink>\r\n                                    </div>\r\n                                {/* <span className=\"navbar-item\">\r\n                                <div className=\"button is-info is-inverted\">\r\n                                    <span className=\"icon\">\r\n                                    <i className=\"fab fa-github\"></i>\r\n                                    </span>\r\n                                    <span>Download</span>\r\n                                </div>\r\n                                </span> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                    \r\n               {/*  </div> */}\r\n                \r\n                {/* <div className=\"section\"> */}\r\n                {/* <div className=\"container mvUp \" > */}\r\n                       \r\n                    <Switch>\r\n                        <Route path={path} exact>\r\n                            <InventoryHome />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-dispense`} exact >\r\n                            <Dispense />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-admin`} exact >\r\n                            <InventorySetup />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-inventory`} exact>\r\n                            <InventoryStore />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-entry`} exact>\r\n                            <ProductEntry />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-exit`} exact>\r\n                            <ProductExit/>\r\n                        </Route>\r\n                        <Route path={`${path}/inv-products`} exact>\r\n                            <Products />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-reports`} exact>\r\n                            <InventoryReport />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-stores`} exact>\r\n                            <Store />\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                  \r\n\r\n                    <div className={`modal ${showModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        <StoreList standalone=\"true\" />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>        \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClinicModule.js",["327","328","329","330"],"import React,{useState,useContext,useEffect} from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink} from 'react-router-dom'\r\nimport ClinicReport from './Clinic/ClinicReport'\r\nimport ClinicSetup from './Clinic/ClinicSetup'\r\nimport ClinicStore from './Clinic/ClinicStore'\r\nimport ClinicHome from './Clinic/ClinicHome'\r\nimport Appointments from './Clinic/Appointments'\r\nimport Encounter from './EncounterMgt/Encounter'\r\nimport Patients from './ClientMgt/Patient'\r\nimport Clinic, { ClinicList } from './Clinic/Clinic'\r\nimport {UserContext,ObjectContext} from '../context'\r\n\r\nexport default function ClinicModule() {\r\n    const {state,setState}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedClinic,setSelectedClinic]=useState()\r\n    const [showModal,setShowModal]=useState(false)\r\n\r\n    let { path, url } = useRouteMatch();\r\n    \r\n    useEffect(() => {\r\n       \r\n        console.log(\"starting up Clinic module\")\r\n        if (!selectedClinic){\r\n            handleChangeClinic()\r\n\r\n            }\r\n         return () => {       \r\n            }\r\n        }, [])\r\n   \r\n    useEffect(()=>{\r\n     setSelectedClinic(state.ClinicModule.selectedClinic)\r\n\r\n    },[state.ClinicModule])\r\n\r\n    const handleChangeClinic= async()=>{\r\n        await setShowModal(true)                                                                                                                                                        \r\n        console.log( showModal)\r\n    }\r\n\r\n    return (\r\n            <section className=\"section has-background-info remPad\">\r\n               \r\n               {/*  <div className=\"\"> */}\r\n                    <nav className=\"navbar minHt z10 has-background-info\">\r\n                        <div className=\"container minHt\">\r\n                            <div className=\"navbar-brand  minHt\">\r\n                                <div className=\"navbar-item \">\r\n                                    <span className=\"is-size-6 has-text-weight-medium\">\r\n                                        Health Stack::Clinic::{selectedClinic?selectedClinic.name:\"\"}</span>\r\n                                        <button className=\"button is-small is-info minHt\" onClick={()=>handleChangeClinic()}>Change Clinic</button> \r\n                                </div>\r\n                                \r\n                            {/* <div className=\"navbar-item\">\r\n                                <img src=\"https://bulma.io/images/bulma-type-white.png\" alt=\"Logo\" />\r\n                            </div> */}\r\n                                <span className=\"navbar-burger\" data-target=\"navbarMenuHeroB\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </span>\r\n                            </div>\r\n                            <div id=\"navbarMenuHeroB\" className=\"navbar-menu\">\r\n                                <div className=\"navbar-end\">\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}`}>Home Page</NavLink> \r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/clinics`}>Clinics</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/clinicsetup`}> Clinic Admin</NavLink>\r\n                                    </div>\r\n                                     <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/appointments`}>Appointments</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/clinicstore`}>Checked In Clients</NavLink>\r\n                                    </div> \r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/encounter`}>Attend to Client</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/patients`}>Clients</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/clinicreports`}>Reports</NavLink>\r\n                                    </div>\r\n                                {/* <span className=\"navbar-item\">\r\n                                <div className=\"button is-info is-inverted\">\r\n                                    <span className=\"icon\">\r\n                                    <i className=\"fab fa-github\"></i>\r\n                                    </span>\r\n                                    <span>Download</span>\r\n                                </div>\r\n                                </span> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                    \r\n               {/*  </div> */}\r\n                \r\n                {/* <div className=\"section\"> */}\r\n                {/* <div className=\"container mvUp \" > */}\r\n                       \r\n                    <Switch>\r\n                        <Route path={path} exact>\r\n                            <ClinicHome />\r\n                        </Route>\r\n                        <Route path={`${path}/clinicsetup`} exact >\r\n                            <ClinicSetup />\r\n                        </Route>\r\n                        <Route path={`${path}/appointments`} exact>\r\n                            <Appointments/>\r\n                        </Route>\r\n                        <Route path={`${path}/clinicstore`} exact>\r\n                            <ClinicStore />\r\n                        </Route>\r\n                        <Route path={`${path}/encounter`} exact>\r\n                            <Encounter/>\r\n                        </Route>\r\n                        <Route path={`${path}/patients`} exact>\r\n                            <Patients />\r\n                        </Route>\r\n                        <Route path={`${path}/clinicreports`} exact>\r\n                            <ClinicReport />\r\n                        </Route>\r\n                        <Route path={`${path}/clinics`} exact>\r\n                            <Clinic />\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                  \r\n\r\n                    <div className={`modal ${showModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Clinic</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        <ClinicList standalone=\"true\" />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>        \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\HSModules.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Location.js",["331","332","333","334"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Location() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedLocation,setSelectedLocation]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Location  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <LocationList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.LocationModule.show ==='create')&&<LocationCreate />}\r\n                {(state.LocationModule.show ==='detail')&&<LocationDetail  />}\r\n                {(state.LocationModule.show ==='modify')&&<LocationModify Location={selectedLocation} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function LocationCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const LocationServ=client.service('location')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeLocation.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        LocationServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Location successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Location created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Location ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Location\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"locationType\" type=\"text\" placeholder=\"Type of Location\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Location\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function LocationList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const LocationServ=client.service('location')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedLocation, setSelectedLocation]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newLocationModule={\r\n            selectedLocation:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Location)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Location)\r\n\r\n        await setSelectedLocation(Location)\r\n\r\n        const    newLocationModule={\r\n            selectedLocation:Location,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       LocationServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Location  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Location, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findLocation= await LocationServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findLocation.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findLocation= await LocationServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findLocation.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Location  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Location, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                LocationServ.on('created', (obj)=>getFacilities())\r\n                LocationServ.on('updated', (obj)=>getFacilities())\r\n                LocationServ.on('patched', (obj)=>getFacilities())\r\n                LocationServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Locations\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Locations </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        <th><abbr title=\"Last Name\">Location Type</abbr></th>\r\n                                        {/*<th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                         <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> */}\r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Location, i)=>(\r\n\r\n                                            <tr key={Location._id} onClick={()=>handleRow(Location)} className={Location._id===(selectedLocation?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Location.name}</th>\r\n                                            <td>{Location.locationType}</td>\r\n                                            {/*< td>{Location.profession}</td>\r\n                                            <td>{Location.phone}</td>\r\n                                            <td>{Location.email}</td>\r\n                                            <td>{Location.department}</td>\r\n                                            <td>{Location.deptunit}</td> */}\r\n                                            <td>{Location.facility}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function LocationDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const LocationServ=client.service('/Location')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Location =state.LocationModule.selectedLocation \r\n\r\n    const handleEdit= async()=>{\r\n        const    newLocationModule={\r\n            selectedLocation:Location,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Location Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {Location.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Location Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"LocationType\">{Location.locationType} </span> \r\n                    </td>\r\n                </tr>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"LocationCity\">{Location.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"LocationContactPhone\" >{Location.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"LocationEmail\" >{Location.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"LocationOwner\">{Location.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"LocationType\">{Location.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"LocationCategory\">{Location.LocationCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function LocationModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const LocationServ=client.service('location')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Location =state.LocationModule.selectedLocation \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", Location.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"locationType\", Location.locationType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", Location.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Location.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Location.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Location.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Location.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"LocationCategory\", Location.LocationCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newLocationModule={\r\n        selectedLocation:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newLocationModule={\r\n            selectedLocation:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Location._id\r\n        if (conf){\r\n             \r\n        LocationServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Location successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Location deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Location, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Location, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Location.facility\r\n          //console.log(data);\r\n          \r\n        LocationServ.patch(Location._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Location successfully\")\r\n                 toast({\r\n                    message: 'Location updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Location, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Location, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Location Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Location Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"locationType\" type=\"text\" placeholder=\"Location Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Location Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"LocationCategory\" type=\"text\" placeholder=\"Location Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js",["335","336","337","338","339","340","341"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function ProductEntry() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ProductEntryList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ProductEntryModule.show ==='create')&&<ProductEntryCreate />}\r\n                {(state.ProductEntryModule.show ==='detail')&&<ProductEntryDetail  />}\r\n                {(state.ProductEntryModule.show ==='modify')&&<ProductEntryModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductEntryCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Purchase Invoice\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(\"\")\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [baseunit,setBaseunit] = useState(\"\")\r\n    const [quantity,setQuantity] = useState()\r\n    const [costprice,setCostprice] = useState()\r\n    const [productItem,setProductItem] = useState([])\r\n    const {state}=useContext(ObjectContext)\r\n    \r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const productItemI={\r\n        productId,\r\n        name,\r\n        quantity,\r\n        costprice,\r\n        amount:quantity*costprice,\r\n        baseunit\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setProductId(obj._id)\r\n        setName(obj.name)\r\n        setBaseunit(obj.baseunit)\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n    const handleClickProd=async()=>{\r\n        await setSuccess(false)\r\n        setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n        setName(\"\")\r\n        setBaseunit(\"\")\r\n        setQuantity(\"\")\r\n        setCostprice(\"\")\r\n       await setSuccess(true)\r\n       console.log(success)\r\n       console.log(productItem)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const resetform=()=>{\r\n     setType(\"Purchase Invoice\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setBaseunit()\r\n    setCostprice()\r\n    setProductItem([])\r\n    }\r\n\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        await setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n        productEntry.productitems=productItem\r\n        productEntry.createdby=user._id\r\n        productEntry.transactioncategory=\"credit\"\r\n\r\n          console.log(\"b4 facility\",productEntry);\r\n          if (user.currentEmployee){\r\n         productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }else{\r\n            toast({\r\n                message: 'You can not add inventory to any organization',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n          }\r\n          if (state.StoreModule.selectedStore._id){\r\n            productEntry.storeId=state.StoreModule.selectedStore._id\r\n          }else{\r\n            toast({\r\n                message: 'You need to select a store before adding inventory',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n\r\n          }\r\n          console.log(\"b4 create\",productEntry);\r\n        ProductEntryServ.create(productEntry)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                resetform()\r\n               /*  setMessage(\"Created ProductEntry successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'ProductEntry created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create ProductEntry: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n            <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n            <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType}>\r\n                           <option value=\"\">Choose Type </option>\r\n                            <option value=\"Purchase Invoice\">Purchase Invoice </option>\r\n                            <option value=\"Initialization\">Initialization</option>\r\n                            <option value=\"Audit\">Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"supplier\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n           \r\n            </div>\r\n            </div> {/* horizontal end */}\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                    <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n               <div className=\"field is-horizontal\">\r\n               <div className=\"field-body\">\r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={async e=> await setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-coins\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n\r\n                </div> \r\n                </div> \r\n               \r\n                </form>   \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Product Items:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={e=>setQuantity(e.target.value)} placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n        <label >{baseunit}</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"costprice\" value={costprice} type=\"text\" onChange={e=>setCostprice(e.target.value)} placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-dollar-sign\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n            \r\n       {(productItem.length>0) && <div>\r\n            <label>Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Create\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductEntryList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProductEntry, setSelectedProductEntry]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedProductEntry(ProductEntry)\r\n\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductEntryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                storeId:state.StoreModule.selectedStore._id,\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProductEntry= await ProductEntryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProductEntry.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        /* toast({\r\n                            message: 'You do not qualify to view this',\r\n                            type: 'is-danger',\r\n                            dismissible: true,\r\n                            pauseOnHover: true,\r\n                          }) \r\n                          return */\r\n                        const findProductEntry= await ProductEntryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProductEntry.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" ProductEntry  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (!state.StoreModule.selectedStore){\r\n                    toast({\r\n                        message: 'kindly select a store',\r\n                        type: 'is-danger',\r\n                        dismissible: true,\r\n                        pauseOnHover: true,\r\n                      }) \r\n                      return\r\n                    getFacilities()\r\n\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductEntryServ.on('created', (obj)=>getFacilities())\r\n                ProductEntryServ.on('updated', (obj)=>getFacilities())\r\n                ProductEntryServ.on('patched', (obj)=>getFacilities())\r\n                ProductEntryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                console.log(\"store changed\")\r\n                return () => {\r\n                   \r\n                }\r\n            }, [state.StoreModule.selectedStore])\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {state.StoreModule.selectedStore?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search ProductEntry\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Product Additions to Inventory </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th>Source</th>\r\n                                        <th><abbr title=\"Document No\">Document No</abbr></th>\r\n                                        <th><abbr title=\"Total Amount\">Total Amount</abbr></th>\r\n                                        <th><abbr title=\"Enteredby\">Entered By</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{ProductEntry.date}</td>\r\n                                            <th>{ProductEntry.type}</th>\r\n                                            <td>{ProductEntry.source}</td>\r\n                                            <td>{ProductEntry.documentNo}</td>\r\n                                            <td>{ProductEntry.totalamount}</td>\r\n                                            <td>{ProductEntry.enteredby}</td>\r\n                                            <td><span className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading... Choose a Store</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductEntryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductEntryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductEntryModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" onClick={handleAddproduct}> <span>Add {val} to product list</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.name}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        <ProductCreate />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Products.js",["342","343","344","345","346","347","348"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Product() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProduct,setSelectedProduct]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Product  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <ProductList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.ProductModule.show ==='create')&&<ProductCreate />}\r\n                {(state.ProductModule.show ==='detail')&&<ProductDetail  />}\r\n                {(state.ProductModule.show ==='modify')&&<ProductModify Product={selectedProduct} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductServ=client.service('products')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeProduct.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n        // data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        ProductServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Product successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Product created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Product ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Product\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            <p className=\" is-small\">\r\n                    Kindly search product list before creating new products!\r\n                </p>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"category\" type=\"text\" placeholder=\"Category of Product\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Product\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"baseunit\" type=\"text\" placeholder=\"Base unit of product\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n             {/*<div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n          {/*  <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductServ=client.service('products')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProduct, setSelectedProduct]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductModule={\r\n            selectedProduct:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductModule:newProductModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Product)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Product)\r\n\r\n        await setSelectedProduct(Product)\r\n\r\n        const    newProductModule={\r\n            selectedProduct:Product,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductModule:newProductModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n              // facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Product  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Product, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProduct= await ProductServ.find(\r\n                {query: {\r\n                   // facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProduct.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findProduct= await ProductServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProduct.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Product  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Product, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductServ.on('created', (obj)=>getFacilities())\r\n                ProductServ.on('updated', (obj)=>getFacilities())\r\n                ProductServ.on('patched', (obj)=>getFacilities())\r\n                ProductServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Products\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Products </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        \r\n                                       <th><abbr title=\"Base Unit\">Base Unit</abbr></th>\r\n                                         {/* <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                        <th><abbr title=\"Facility\">facility</abbr></th>*/}\r\n                                        <th><abbr title=\"Last Name\">Product Category</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Product, i)=>(\r\n\r\n                                            <tr key={Product._id} onClick={()=>handleRow(Product)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Product.name}</th>\r\n                                            <td>{Product.baseunit}</td>\r\n                                           < td>{Product.category}</td>\r\n                                             {/*<td>{Product.phone}</td>\r\n                                            <td>{Product.email}</td>\r\n                                            <td>{Product.department}</td>\r\n                                            <td>{Product.deptunit}</td> \r\n                                            <td>{Product.facility}</td>*/}\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductServ=client.service('/Product')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Product =state.ProductModule.selectedProduct \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductModule={\r\n            selectedProduct:Product,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductModule:newProductModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Product Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {Product.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Base Unit:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"ProductType\">{Product.baseunit} </span> \r\n                    </td>\r\n                </tr>\r\n                   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Product Category: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductCity\">{Product.category}</span> \r\n                </td>\r\n                </tr>\r\n             {/*         <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductContactPhone\" >{Product.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEmail\" >{Product.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductOwner\">{Product.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductType\">{Product.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductCategory\">{Product.ProductCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductServ=client.service('products')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Product =state.ProductModule.selectedProduct \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", Product.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"baseunit\", Product.baseunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"category\", Product.category,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /* setValue(\"phone\", Product.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Product.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Product.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Product.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductCategory\", Product.ProductCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductModule={\r\n        selectedProduct:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductModule:newProductModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductModule={\r\n            selectedProduct:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductModule:newProductModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Product._id\r\n        if (conf){\r\n             \r\n        ProductServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Product successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Product deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Product, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Product, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n       // console.log(data)\r\n      //  data.facility=Product.facility\r\n          //console.log(data);\r\n          \r\n        ProductServ.patch(Product._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Product successfully\")\r\n                 toast({\r\n                    message: 'Product updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Product, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Product, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Product Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Base Unit\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })}  name=\"baseunit\" type=\"text\" placeholder=\"Base Unit\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Product Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  disabled name=\"category\" type=\"text\" placeholder=\"Product Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n             {/*<div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Product Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductCategory\" type=\"text\" placeholder=\"Product Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    const ProductServ=client.service('products')\r\n   // const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            ProductServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicHome.js",["349","350","351","352","353","354"],"import React ,{useState,useEffect,useContext} from 'react'\r\nimport Store, { StoreList } from './Clinic'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\nexport default function InventoryHome() {\r\n   // const [activeModal, setActiveModal]=useState(\"modal is-active \")\r\n    const {state,setState}=useContext(ObjectContext)\r\n    const handleCloseModal=()=>{\r\n        state.showStoreModal  =  \"modal\"                                                                                                                                                        \r\n        setState(state)\r\n        console.log( state.showStoreModal)\r\n    }\r\n    \r\n       \r\n \r\n    return (\r\n       \r\n            <section className= \"section remPadTop\">\r\n              {/*  <div className=\"is-1\"> Appointment sdchedule for patients for this clinic</div>\r\n               <div className=\"is-1\"> Communication Command Center</div>     */}  \r\n               <section className=\"hero is-info is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                    <h1 className=\"title\">\r\n                      Clinic Module\r\n                    </h1>\r\n                    <h2 className=\"subtitle\">\r\n                        Have fun working today!\r\n                    </h2>\r\n                    </div>\r\n                </div>\r\n            </section>                  \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClientMgt\\PatientProfile.js",["355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport { formatDistanceToNowStrict } from 'date-fns'\r\nimport VideoConference from '../utils/VideoConference';\r\n\r\nexport default function PatientProfile () {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedClient,setSelectedClient]=useState() \r\n    const client =state.ClientModule.selectedClient\r\n    const {\r\n        firstname,\r\n        middlename,\r\n        lastname,\r\n        dob,\r\n        gender,\r\n        maritalstatus,\r\n        religion,\r\n        phone,\r\n        email,\r\n        profession,\r\n       \r\n        nok_name,\r\n        nok_phoneno,\r\n        nok_email,\r\n        nok_relationship ,\r\n        bloodgroup,\r\n        genotype,\r\n        disabilities,\r\n        specificDetails,\r\n        clientTags,\r\n        mrn,\r\n        address,\r\n        city,\r\n        lga,\r\n        //state,\r\n        country,\r\n        allergies,\r\n        comorbidities,\r\n        paymentinfo\r\n    } =state.ClientModule.selectedClient \r\n\r\n    const {\r\n        cash,\r\n        cashDetails,\r\n        familycover,\r\n        familyDetails,\r\n        companycover,\r\n        companyDetails,\r\n        hmocover,\r\n        hmoDetails\r\n        } =state.ClientModule.selectedClient.paymentinfo\r\n\r\n    useEffect(() => {\r\n        \r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n      setSelectedClient(state.ClientModule.selectedClient)\r\n        console.log(client)\r\n        console.log(selectedClient)\r\n        return () => {\r\n            \r\n        }\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <div className=\"card-content p-1\">\r\n                    <div className=\"media p-0 m-0 \">\r\n                        <div className=\"media-left\">\r\n                            <figure className=\"image is-48x48\">\r\n                             <img src=\"https://bulma.io/images/placeholders/96x96.png\" alt=\"Placeholder image\" />\r\n                            </figure>\r\n                        </div>\r\n                        <div className=\"media-content\">\r\n                            <p className=\"title is-7\">{firstname} {middlename} {lastname}</p>\r\n                            <p className=\"subtitle is-7 payment\">\r\n                                {cash && \"Cash\"}\r\n                                {familycover && \"Family Cover\"}\r\n                                {companycover && \"Company Cover\"}\r\n                                {hmocover && \"HMO Cover\"}\r\n                                </p>\r\n                            \r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                        <div className=\"content\">\r\n                        <time dateTime=\"2016-1-1\"> {formatDistanceToNowStrict(new Date(dob))}</time> { gender} {maritalstatus} {religion} {profession}<br/>\r\n                        {bloodgroup} {genotype} <br/>\r\n                        <strong> {clientTags}</strong>\r\n                       {/*  {phone} {email} */}\r\n                        \r\n                       \r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                    <div className=\"card mt-1\">\r\n                        <div className=\"card-content p-1\">\r\n                            {/*<div >\r\n                             <label className=\"label is-size-7\">Tags:</label> \r\n                           <strong> {clientTags}</strong>\r\n                            </div>*/}\r\n                            <div>\r\n                            <label className=\"label is-size-7\">Specific Instructions:</label>\r\n                            {specificDetails}\r\n                            </div>\r\n                            <div >\r\n                            <label className=\"label is-size-7\">Allergies:</label>\r\n                            {allergies}\r\n                            </div>\r\n                            <div>\r\n                            <label className=\"label is-size-7\">Co-morbidities:</label>\r\n                            {comorbidities}\r\n                            </div>\r\n                            <div>\r\n                            <label className=\"label is-size-7\">Disabilities:</label>\r\n                            {disabilities}\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card mt-1\">\r\n                        <div className=\"card-content p-1\">\r\n                            <div >\r\n                             <label className=\"label is-size-7\">Last Visit:</label> \r\n                            {/* {clientTags} */}\r\n                            </div>\r\n                            <div>\r\n                            <label className=\"label is-size-7\">Problem list:</label>\r\n                            {/* {specificDetails} */}\r\n                            </div>\r\n                            <div >\r\n                            <label className=\"label is-size-7\">History:</label>\r\n                            {/* {allergies} */}\r\n                            </div>\r\n                            <div>\r\n                            <label className=\"label is-size-7\">Current Medication:</label>\r\n                            {/* {comorbidities} */}\r\n                            </div>\r\n                            <div>\r\n                            <label className=\"label is-size-7\">Drug Intolerance:</label>\r\n                            {/* {disabilities} */}\r\n                            </div>\r\n                            <div>\r\n                            <label className=\"label is-size-7\">Tasks:</label>\r\n                            {/* {disabilities} */}\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        \r\n                    </div>\r\n                    {/* <VideoConference /> */}\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\utils\\VideoConference.js",["380","381","382","383"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport Draggable from 'react-draggable';\r\nimport { Jutsu } from 'react-jutsu'\r\n//import { useJitsi } from 'react-jutsu' // Custom hook\r\nimport {UserContext,ObjectContext} from '../../context'\r\n \r\nconst VideoConference = () => {\r\n  const [room, setRoom] = useState('')\r\n  const [name, setName] = useState('')\r\n  const [call, setCall] = useState(false)\r\n  const [password, setPassword] = useState('')\r\n  const {state}=useContext(ObjectContext) //,setState\r\n  // eslint-disable-next-line\r\n  const [selectedClient,setSelectedClient]=useState() \r\n  const client =state.ClientModule.selectedClient\r\n  const {user,setUser}=useContext(UserContext)\r\n \r\n  const handleClick = event => {\r\n    event.preventDefault()\r\n    setRoom(client._id)\r\n    setName(user.firstname)\r\n    if (room && name) setCall(true)\r\n  }\r\n \r\n  return call ? (\r\n    <Draggable>\r\n    <Jutsu\r\n      roomName={room}\r\n      displayName={name}\r\n      password={password}\r\n      onMeetingEnd={() => setCall(false)}\r\n      loadingComponent={<p>loading ...</p>}\r\n      errorComponent={<><p>Oops, something went wrong</p>   </>} \r\n      containerStyles={{ width: '100%', height: '250px' }}\r\n      />\r\n    </Draggable>  \r\n  ) : (\r\n    <form>\r\n      {/* <input id='room' type='text' placeholder='Room' value={room} onChange={(e) => setRoom(e.target.value)} />\r\n      <input id='name' type='text' placeholder='Name' value={name} onChange={(e) => setName(e.target.value)} /> */}\r\n     {/*  <input id='password' type='text' placeholder='Password (optional)' value={password} onChange={(e) => setPassword(e.target.value)} /> */}\r\n      <button className=\"button is-success is-small mt-1\" onClick={handleClick} type='submit'>\r\n        Start / Join Teleconsultation\r\n      </button>\r\n    </form>\r\n  )\r\n \r\n}\r\n \r\nexport default VideoConference","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Appointments.js",["384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink, useHistory} from 'react-router-dom'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport { formatDistanceToNowStrict, format } from 'date-fns'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Appointments() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedClient,setSelectedClient]=useState()\r\n    const [selectedAppointment,setSelectedAppointment]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n            <div className=\"columns \">\r\n           \r\n            <div className=\"column is-8 \">\r\n                <ClientList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.AppointmentModule.show ==='create')&&<AppointmentCreate />}\r\n                {(state.AppointmentModule.show ==='detail')&&<ClientDetail  />}\r\n                {(state.AppointmentModule.show ==='modify')&&<ClientModify Client={selectedClient} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function AppointmentCreate(){\r\n    const {state,setState}=useContext(ObjectContext) \r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const [clientId,setClientId] = useState()\r\n    const [type,setType] = useState()\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('appointments')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [selectedClient,setSelectedClient]=useState()\r\n    const [selectedAppointment,setSelectedAppointment]=useState()\r\n   // const [appointment_reason,setAppointment_reason]= useState()\r\n    const [appointment_status,setAppointment_status]=useState(\"\")\r\n    const [appointment_type, setAppointment_type]=useState(\"\")\r\n    const [chosen, setChosen]=useState()\r\n\r\n\r\n   /*  const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    } */\r\n    const handleChangeType=async (e)=>{\r\n        await setAppointment_type(e.target.value)\r\n    }\r\n\r\n    const handleChangeStatus=async (e)=>{\r\n        await setAppointment_status(e.target.value)\r\n    }\r\n\r\n    const getSearchfacility=(obj)=>{\r\n\r\n       setClientId(obj._id)\r\n       setChosen(obj)\r\n       \r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setClientId()\r\n            setChosen()\r\n           \r\n        }\r\n    \r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n          data.locationId=state.ClinicModule.selectedClinic._id\r\n          data.appointment_type=appointment_type\r\n         // data.appointment_reason=appointment_reason\r\n          data.appointment_status=appointment_status\r\n          data.clientId=clientId\r\n          data.firstname=chosen.firstname\r\n            data.middlename=chosen.middlename\r\n            data.lastname=chosen.lastname\r\n            data.dob=chosen.dob\r\n            data.gender=chosen.gender\r\n            data.phone=chosen.phone\r\n            data.email=chosen.email\r\n          data.actions=[{\r\n              action:appointment_status,\r\n              actor:user.currentEmployee._id\r\n          }]\r\n\r\n        ClientServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               setAppointment_type(\"\")\r\n               setAppointment_status(\"\")\r\n               setClientId(\"\")\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Appointment created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Appointment ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            \r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Client\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           {/*  <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p> */}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <input name=\"start_time\" ref={register ({ required: true })} type=\"datetime-local\" />\r\n           \r\n            <label className=\"label is-small\">Client:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <ClientSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\"  /* ref={register ({ required: true }) } */  /* add array no */  value={clientId} name=\"ClientId\" type=\"text\" onChange={e=>setClientId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                 {/* {sellingprice &&   \"N\"}{sellingprice} {sellingprice &&   \"per\"}  {baseunit} {invquantity} {sellingprice &&   \"remaining\"}  */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType}>\r\n                           <option value=\"\">Choose Appointment Type  </option>\r\n                            <option value=\"New\">New</option>\r\n                            <option value=\"Followup\">Followup</option>\r\n                            <option value=\"Readmission with 24hrs\">Readmission with 24hrs</option>\r\n                            <option value=\"Annual Checkup\">Annual Checkup</option>\r\n                            <option value=\"Walk in\">Walk-in</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"appointment_status\" value={appointment_status} onChange={handleChangeStatus}>\r\n                           <option value=\"\">Appointment Status  </option>\r\n                            <option value=\"Scheduled\">Scheduled</option>\r\n                            <option value=\"Confirmed\">Confirmed</option>\r\n                            <option value=\"Checked In\">Checked In</option>\r\n                            <option value=\"Vitals Taken\">Vitals Taken</option>\r\n                            <option value=\"With Nurse\">With Nurse</option>\r\n                            <option value=\"With Doctor\">With Doctor</option>\r\n                            <option value=\"No Show\">No Show</option>\r\n                            <option value=\"Cancelled\">Cancelled</option>\r\n                            <option value=\"Billed\">Billed</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left has-icons-right\">\r\n                <input className=\"input is-small\" ref={register()}  name=\"appointment_reason\" type=\"text\" placeholder=\"Reason For Appointment\" />\r\n                <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital\"></i>\r\n                </span>                    \r\n            </p>\r\n        </div>\r\n        <div className=\"field \" style={{display:\"none\"}} >\r\n            <p className=\"control has-icons-left has-icons-right\">\r\n                <input className=\"input is-small\" ref={register()}  name=\"billingservice\" type=\"text\" placeholder=\"Billing service\" />\r\n                <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital\"></i>\r\n                </span>                    \r\n            </p>\r\n        </div>\r\n           \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 {/*  <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n         {/*   <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ClientList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ClientServ=client.service('appointments')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedClient, setSelectedClient]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n    \r\n    const [selectedAppointment,setSelectedAppointment]=useState()\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const newClientModule={\r\n            selectedAppointment:{},\r\n            show :'create'\r\n            }\r\n        await setState((prevstate)=>({...prevstate, AppointmentModule:newClientModule}))\r\n       //console.log(state)\r\n        } \r\n\r\n    \r\n    const handleRow= async(Client)=>{\r\n        await setSelectedAppointment(Client)\r\n        const    newClientModule={\r\n            selectedAppointment:Client,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, AppointmentModule:newClientModule}))\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='firstname'\r\n       console.log(val)\r\n       ClientServ.find({query: {\r\n                $or:[\r\n                    { firstname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { lastname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { middlename: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { phone: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { clientTags: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { mrn: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { specificDetails: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                ],\r\n              \r\n              facility:user.currentEmployee.facilityDetail._id, // || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Client  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Client, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n    const getFacilities= async()=>{\r\n            if (user.currentEmployee){      \r\n            const findClient= await ClientServ.find(\r\n                {query: {\r\n                   // facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findClient.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findClient= await ClientServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findClient.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Client  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Client, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n    /* useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n    useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ClientServ.on('created', (obj)=>getFacilities())\r\n                ClientServ.on('updated', (obj)=>getFacilities())\r\n                ClientServ.on('patched', (obj)=>getFacilities())\r\n                ClientServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Appointments\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Appointments </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Time\">Date/Time</abbr></th>\r\n                                        <th>First Name</th>\r\n                                        <th><abbr title=\"Middle Name\">Middle Name</abbr></th>\r\n                                       <th><abbr title=\"Last Name\">Last Name</abbr></th>\r\n                                       <th><abbr title=\"Age\">Age</abbr></th>\r\n                                        <th><abbr title=\"Gender\">Gender</abbr></th> \r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                        <th><abbr title=\"Reason\">Reason</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Client, i)=>(\r\n\r\n                                            <tr key={Client._id} onClick={()=>handleRow(Client)}  className={Client._id===(selectedAppointment?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <td><strong>{format(new Date(Client.start_time),\"dd-MM-yy HH:mm:ss\")}</strong></td>\r\n                                            <th>{Client.firstname}</th>\r\n                                            <td>{Client.middlename}</td>\r\n                                           < td>{Client.lastname}</td>\r\n                                           < td>{formatDistanceToNowStrict(new Date(Client.dob))}</td>\r\n                                            <td>{Client.gender}</td>\r\n                                             <td>{Client.phone}</td>\r\n                                            <td>{Client.email}</td>\r\n                                            <td>{Client.appointment_type}</td>\r\n                                            <td>{Client.appointment_status}</td>\r\n                                            <td>{Client.appointment_reason}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\n\r\nexport function ClientDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const history =useHistory()\r\n    let { path, url } = useRouteMatch();\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ClientServ=client.service('/Client')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const [selectedClient,setSelectedClient]=useState()\r\n    const [selectedAppointment,setSelectedAppointment]=useState()\r\n\r\n   \r\n\r\n   const Client =state.AppointmentModule.selectedAppointment \r\n    //const client=Client\r\n    const handleEdit= async()=>{\r\n        const    newClientModule={\r\n            selectedAppointment:Client,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, AppointmentModule:newClientModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n    const handleAttend=async()=>{\r\n        \r\n        const patient = await client.service('client').get(Client.clientId)\r\n        await setSelectedClient(patient)\r\n        const    newClientModule={\r\n            selectedClient:patient, \r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n        history.push('/app/clinic/encounter')\r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Client Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.firstname &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <label className=\"label is-size-7 my-0 \"   name=\"firstname\" type=\"text\">First Name </label><label className=\"is-size-7 my-0 \">{Client.firstname }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>}\r\n\r\n\r\n                    {Client.middlename &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <label className=\"label is-size-7 my-0\"   name=\"middlename\" type=\"text\"> Middle Name </label><label className=\"is-size-7 my-0\">{Client.middlename }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>}\r\n             {Client.lastname &&\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"lastname\" type=\"text\">Last Name</label><label className=\"is-size-7 my-0\">{Client.lastname }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" nop-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                </div>  \r\n                </div>\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.dob &&<div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"dob\" type=\"text\">Date of Birth </label><label className=\"is-size-7 my-0\">{ new Date(Client.dob).toLocaleDateString('en-GB')}</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.gender &&<div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"gender\" type=\"text\">Gender </label><label className=\"is-size-7 my-0\">{Client.gender }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.maritalstatus && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"maritalstatus\" type=\"text\">Marital Status </label><label className=\"is-size-7 my-0\">{Client.maritalstatus }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.mrn && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"mrn\" type=\"text\">Medical Records Number  </label><label className=\"is-size-7 my-0\">{Client.mrn }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                </div>\r\n                </div>\r\n                <div className=\"field is-horizontal\">\r\n                    <div className=\"field-body\">\r\n                    {Client.religion && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"religion\" type=\"text\">Religion  </label><label className=\"is-size-7 my-0\">{Client.religion }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.profession &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"profession\" type=\"text\">Profession  </label><label className=\"is-size-7 my-0\">{Client.profession }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.phone &&<div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                            <label className=\"label is-size-7 my-0\"  name=\"phone\" type=\"text\"> Phone No</label><label className=\"is-size-7 my-0\">{Client.phone }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-phone-alt\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n\r\n                    {Client.email && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"email\" type=\"email\">Email  </label><label className=\"is-size-7 my-0\">{Client.email }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    </div>\r\n                </div>\r\n\r\n                {Client.address &&<div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n\r\n                    <label className=\"label is-size-7 my-0\"  name=\"address\" type=\"text\">Residential Address  </label><label className=\"is-size-7 my-0\">{Client.address }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div>} \r\n                <div className=\"field is-horizontal\">\r\n                    <div className=\"field-body\">\r\n                        {Client.city && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                            \r\n                                <label className=\"label is-size-7 my-0\"  name=\"city\" type=\"text\">Town/City  </label><label className=\"is-size-7 my-0\">{Client.city }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.lga && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                            \r\n                                <label className=\"label is-size-7 my-0\"  name=\"lga\" type=\"text\">Local Govt Area  </label><label className=\"is-size-7 my-0\">{Client.lga }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.state && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                                <label className=\"label is-size-7 my-0\"  name=\"state\" type=\"text\">State  </label><label className=\"is-size-7 my-0\">{Client.state }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.country &&<div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"country\" type=\"text\">Country  </label><label className=\"is-size-7 my-0\">{Client.country }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n                    </div>\r\n                </div> \r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                     {Client.bloodgroup &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"bloodgroup\" type=\"text\">Blood Group </label><label className=\"is-size-7 my-0\">{Client.bloodgroup }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n                   \r\n                    {Client.genotype && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"genotype\" type=\"text\">Genotype  </label><label className=\"is-size-7 my-0\">{Client.genotype }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.disabilities && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"disabilities\" type=\"text\">Disabilities  </label><label className=\"is-size-7 my-0\">{Client.disabilities }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                </div> \r\n                </div>  \r\n\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n\r\n                {Client.allergies && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"allergies\" type=\"text\">Allergies  </label><label className=\"is-size-7 my-0\">{Client.allergies }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.comorbidities && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"comorbidities\" type=\"text\">Co-mobidities  </label><label className=\"is-size-7 my-0\">{Client.comorbidities }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                </div>\r\n                </div>\r\n               {Client.clientTags && <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n\r\n                    <label className=\"label is-size-7 my-0\"  name=\"clientTags\" type=\"text\">Tags </label><label className=\"is-size-7 my-0\">{Client.clientTags }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div> }\r\n                {Client.specificDetails && <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <label className=\"label is-size-7 my-0\"  name=\"specificDetails\" type=\"text\">Specific Details about Client </label><label className=\"is-size-7 my-0\">{Client.specificDetails }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div> }\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.nok_name && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_name\" type=\"text\">Next of Kin Full Name</label><label className=\"is-size-7 my-0\">{Client.nok_name }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                {Client.nok_phoneno && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_phoneno\" type=\"text\">Next of Kin Phone Number</label><label className=\"is-size-7 my-0\">{Client.nok_phoneno }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.nok_email && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_email\" type=\"email\">Next of Kin Email </label><label className=\"is-size-7 my-0\">{Client.nok_email }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                {Client.nok_relationship && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_relationship\" type=\"text\">Next of Kin Relationship\"  </label><label className=\"is-size-7 my-0\">{Client.nok_relationship }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                </div>\r\n                </div> \r\n            <div className=\"field is-grouped  mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit Details\r\n                    </button>\r\n                </p>\r\n              {/*   <p className=\"control\">\r\n                    <button className=\"button is-info is-small\" >\r\n                        Financial Info\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" >\r\n                        Schedule appointment\r\n                    </button>\r\n                </p> */}\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" >\r\n                        Check into Clinic \r\n                    </button>\r\n                </p> */}\r\n                <p className=\"control\">\r\n                    <button className=\"button is-link is-small\" onClick={()=>handleAttend()} >\r\n                        Attend to Client\r\n                    </button>\r\n                </p>\r\n\r\n            </div>\r\n            \r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ClientModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ClientServ=client.service('client')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const [selectedClient,setSelectedClient]=useState()\r\n    const [selectedAppointment,setSelectedAppointment]=useState()\r\n\r\n    const Client =state.AppointmentModule.selectedAppointment\r\n\r\n        useEffect(() => {\r\n            setValue(\"firstname\", Client.firstname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"middlename\", Client.middlename,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"lastname\", Client.lastname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Client.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Client.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"dob\", Client.dob,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"gender\", Client.gender,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"profession\", Client.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n            setValue(\"address\", Client.address,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"city\", Client.city,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"state\", Client.state,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"country\", Client.country,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_name\", Client.nok_name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_email\", Client.nok_email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_phoneno\", Client.nokphoneno,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"lga\", Client.lga,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n            setValue(\"bloodgroup\", Client.bloodgroup,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"genotype\", Client.genotype,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"disabilities\", Client.disabilities,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"specificDetails\", Client.specificDetails,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"clientTags\", Client.clientTags,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"mrn\", Client.mrn,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"comorbidities\", Client.comorbidities,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"allergies\", Client.allergies,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n           \r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newClientModule={\r\n        selectedAppointment:{},\r\n        show :'create'\r\n      }\r\n         await setState((prevstate)=>({...prevstate, AppointmentModule:newClientModule}))\r\n            //console.log(state)\r\n           }\r\n\r\n\r\n    const changeState =()=>{\r\n        const    newClientModule={\r\n            selectedAppointment:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, AppointmentModule:newClientModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Client._id\r\n        if (conf){\r\n             \r\n        ClientServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Client successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Client deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Client, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Client, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n       // console.log(data)\r\n      //  data.facility=Client.facility\r\n          //console.log(data);\r\n          \r\n        ClientServ.patch(Client._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Client successfully\")\r\n                 toast({\r\n                    message: 'Client updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Client, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Client, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Client Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <label className=\"label is-size-7\"   >First Name </label> <input className=\"input is-small\" ref={register()} name=\"firstname\" type=\"text\"placeholder=\"First Name \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-hospital\"></i>\r\n                    </span>                    \r\n                </p>\r\n            </div>\r\n\r\n\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                <label className=\"label is-size-7\"   > Middle Name </label><input className=\"input is-small\" ref={register()} name=\"middlename\" type=\"text\" placeholder=\"Middle Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-map-signs\"></i>\r\n                </span>\r\n                \r\n                </p>\r\n            </div>\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  >Last Name</label><input className=\"input is-small\" ref={register()} name=\"lastname\" type=\"text\"placeholder=\"Last Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\" nop-user-md \"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>  \r\n        </div>\r\n        \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Date of Birth  </label><input className=\"input is-small\" ref={register()} name=\"dob\" type=\"text\"placeholder=\"Date of Birth \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Gender  </label><input className=\"input is-small\" ref={register()} name=\"gender\" type=\"text\"placeholder=\"Gender  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Marital Status  </label><input className=\"input is-small\" ref={register()} name=\"maritalstatus\" type=\"text\"placeholder=\"Marital Status  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  > Records Number </label><input className=\"input is-small\" ref={register()} name=\"mrn\" type=\"text\"placeholder=\"Records Number  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Religion</label><input className=\"input is-small\" ref={register()} name=\"religion\" type=\"text\"placeholder=\"Religion \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Profession  </label><input className=\"input is-small\" ref={register()} name=\"profession\" type=\"text\" placeholder=\"Profession\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  > Phone No</label><input className=\"input is-small\" ref={register()} name=\"phone\" type=\"text\" placeholder=\" Phone No \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-phone-alt\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Email  </label><input className=\"input is-small\" ref={register()} name=\"email\" type=\"email\"placeholder=\"Email  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n\r\n            <label className=\"label is-size-7\"  >Residential Address  </label><input className=\"input is-small\" ref={register()} name=\"address\" type=\"text\" placeholder=\"Residential Address  \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Town/City  </label><input className=\"input is-small\" ref={register()} name=\"city\" type=\"text\" placeholder=\"Town/City  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Local Govt Area  </label><input className=\"input is-small\" ref={register()} name=\"lga\" type=\"text\"placeholder=\"Local Govt Area  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >State  </label><input className=\"input is-small\" ref={register()} name=\"state\" type=\"text\"placeholder=\"State\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Country  </label><input className=\"input is-small\" ref={register()} name=\"country\" type=\"text\" placeholder=\"Country  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\"  >Blood Group </label><input className=\"input is-small\" ref={register()} name=\"bloodgroup\" type=\"text\"placeholder=\"Blood Group \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\"  >Genotype  </label><input className=\"input is-small\" ref={register()} name=\"genotype\" type=\"text\" placeholder=\"Genotype \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\" >Disabilities  </label><input className=\"input is-small\" ref={register()}  name=\"disabilities\" type=\"text\"placeholder=\"Disabilities  \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n        </div> \r\n        </div>  \r\n\r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Allergies  </label><input className=\"input is-small\" ref={register()} name=\"allergies\" type=\"text\"placeholder=\"Allergies  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Co-mobidities </label><input className=\"input is-small\" ref={register()} name=\"comorbidities\" type=\"text\"placeholder=\"Co-mobidities \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n\r\n            <label className=\"label is-size-7\"  >Tags  </label><input className=\"input is-small\" ref={register()} name=\"clientTags\" type=\"text\" placeholder=\"Tags \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n            <label className=\"label is-size-7\"  >Specific Details about client  </label><input className=\"input is-small\" ref={register()} name=\"specificDetails\" type=\"text\"placeholder=\"Specific Details about client \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  >Next of Kin Full Name</label><input className=\"input is-small\" ref={register()} name=\"nok_name\" type=\"text\"placeholder=\"Next of Kin Full Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-clinic-medical\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\" >Phone Number</label><input className=\"input is-small\" ref={register()}  name=\"nok_phoneno\" type=\"text\"placeholder=\" \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-clinic-medical\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Next of Kin Email  </label><input className=\"input is-small\" ref={register()} name=\"nok_email\" type=\"email\"placeholder=\"Next of Kin Email  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  > Relationship  </label><input className=\"input is-small\" ref={register()} name=\"nok_relationship\" type=\"text\" placeholder=\"Next of Kin Relationship\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>\r\n        </div> \r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ClientSearch({getSearchfacility,clear}) {\r\n    \r\n    const ClientServ=client.service('client')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n   const {user} = useContext(UserContext) \r\n   const {state}=useContext(ObjectContext)\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.firstname + \" \"+ obj.middlename+ \" \"+obj.lastname + \" \"+obj.gender+\" \"+obj.phone )\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n    }\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        setVal(val)\r\n        if (val===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (val.length>=3 ){\r\n            ClientServ.find({query: {\r\n                $or:[\r\n                    { firstname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { lastname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { middlename: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { phone: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { clientTags: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { mrn: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { specificDetails: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                ],\r\n              \r\n                 //facility: user.currentEmployee.facilityDetail._id,\r\n                 //storeId: state.StoreModule.selectedStore._id,\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small  is-expanded mb-0\" \r\n                                type=\"text\" placeholder=\"Search for Client\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu expanded\" style={{width:\"100%\"}}>\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" /* onClick={handleAddproduct} */> <span> {val} is not yet your client</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <div><span>{facility.firstname}</span>\r\n                                        <span className=\"padleft\">{facility.middlename}</span>\r\n                                        <span className=\"padleft\">{facility.lastname}</span>\r\n                                        <span className=\"padleft\"> {formatDistanceToNowStrict(new Date(facility.dob))}</span>\r\n                                        <span className=\"padleft\">{facility.gender}</span>\r\n                                        <span className=\"padleft\">{facility.profession}</span>\r\n                                        <span className=\"padleft\">{facility.phone}</span>\r\n                                        <span className=\"padleft\">{facility.email}</span>\r\n                                        </div>\r\n                                       \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        {/* <ProductCreate /> */}\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}",["418","419"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicReport.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Clinic.js",["420","421","422","423","424"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Clinic() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedClinic,setSelectedClinic]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Clinic  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <ClinicList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.ClinicModule.show ==='create')&&<ClinicCreate />}\r\n                {(state.ClinicModule.show ==='detail')&&<ClinicDetail  />}\r\n                {(state.ClinicModule.show ==='modify')&&<ClinicModify Clinic={selectedClinic} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ClinicCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClinicServ=client.service('location')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{ // buble-up from inputsearch for creating resource\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClinic.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n          data.locationType=\"Clinic\"\r\n        ClinicServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Clinic successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Clinic created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Clinic ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Clinic\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n               {/*  <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"ClinicType\" type=\"text\" placeholder=\"Type of Clinic\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div> */}\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Clinic\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ClinicList({standalone}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ClinicServ=client.service('location')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedClinic, setSelectedClinic]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Clinic)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Clinic)\r\n\r\n        await setSelectedClinic(Clinic)\r\n\r\n        const    newClinicModule={\r\n            selectedClinic:Clinic,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ClinicServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                locationType:\"Clinic\",\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Clinic  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Clinic, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findClinic= await ClinicServ.find(\r\n                {query: {\r\n                    locationType:\"Clinic\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        name: 1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findClinic.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findClinic= await ClinicServ.find(\r\n                            {query: {\r\n                                locationType:\"Clinic\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    name: 1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findClinic.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Clinic  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Clinic, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ClinicServ.on('created', (obj)=>getFacilities())\r\n                ClinicServ.on('updated', (obj)=>getFacilities())\r\n                ClinicServ.on('patched', (obj)=>getFacilities())\r\n                ClinicServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Clinics\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Clinics</span></div>\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        {/* <th><abbr title=\"Last Name\">Clinic Type</abbr></th>\r\n                                       <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                         <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>*/}\r\n                                       { !standalone &&  <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Clinic, i)=>(\r\n\r\n                                            <tr key={Clinic._id} onClick={()=>handleRow(Clinic)}  className={Clinic._id===(selectedClinic?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Clinic.name}</th>\r\n                                            {/*<td>{Clinic.ClinicType}</td>\r\n                                            < td>{Clinic.profession}</td>\r\n                                            <td>{Clinic.phone}</td>\r\n                                            <td>{Clinic.email}</td>\r\n                                            <td>{Clinic.department}</td>\r\n                                            <td>{Clinic.deptunit}</td> \r\n                                            <td>{Clinic.facility}</td>*/}\r\n                                          { !standalone &&   <td><span   className=\"showAction\"  >...</span></td>}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ClinicDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ClinicServ=client.service('/Clinic')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Clinic =state.ClinicModule.selectedClinic \r\n\r\n    const handleEdit= async()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:Clinic,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Clinic Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {Clinic.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Location Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"ClinicType\">{Clinic.locationType} </span> \r\n                    </td>\r\n                </tr>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ClinicCity\">{Clinic.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ClinicContactPhone\" >{Clinic.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ClinicEmail\" >{Clinic.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ClinicOwner\">{Clinic.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ClinicType\">{Clinic.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ClinicCategory\">{Clinic.ClinicCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ClinicModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ClinicServ=client.service('location')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Clinic =state.ClinicModule.selectedClinic \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", Clinic.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"locationType\", Clinic.locationType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", Clinic.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Clinic.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Clinic.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Clinic.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Clinic.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ClinicCategory\", Clinic.ClinicCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newClinicModule={\r\n        selectedClinic:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Clinic._id\r\n        if (conf){\r\n             \r\n        ClinicServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Clinic successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Clinic deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Clinic, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Clinic, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Clinic.facility\r\n          //console.log(data);\r\n          \r\n        ClinicServ.patch(Clinic._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Clinic successfully\")\r\n                 toast({\r\n                    message: 'Clinic updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Clinic, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Clinic, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Clinic Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Location Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ClinicType\" type=\"text\" placeholder=\"Clinic Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Clinic Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ClinicCategory\" type=\"text\" placeholder=\"Clinic Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                {/* <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicStore.js",["425","426","427","428","429","430","431","432"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Inventory() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedInventory,setSelectedInventory]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Inventory  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <InventoryList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.InventoryModule.show ==='create')&&<InventoryCreate />}\r\n                {(state.InventoryModule.show ==='detail')&&<InventoryDetail  />}\r\n                {(state.InventoryModule.show ==='modify')&&<InventoryModify Inventory={selectedInventory} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function InventoryCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeInventory.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        InventoryServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Inventory successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Inventory created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Inventory ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Inventory: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field\">    \r\n                <div class=\"control\">\r\n                    <div class=\"select is-small\">\r\n                        <select>\r\n                            <option>Purchase Invoice </option>\r\n                            <option>Initialization</option>\r\n                            <option>Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> {/* Audit/initialization/Purchase Invoice */}\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"supplier\" type=\"text\" placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"date\" type=\"text\" placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"totalamount\" type=\"text\" placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n         {/* array of inventory items */}\r\n         <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\"> +</span>\r\n                    </button>\r\n                </p>\r\n           <div className=\"field\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } /* add array no */ name=\"productId\" type=\"text\" placeholder=\"Product Id\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"quantity\" type=\"text\" placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                <label className=\"label is-small\">Base Unit</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"costprice\" type=\"text\" placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function InventoryList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedInventory, setSelectedInventory]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n    }\r\n\r\n    const handleRow= async(Inventory)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Inventory)\r\n\r\n        await setSelectedInventory(Inventory)\r\n\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       InventoryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Inventory  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Inventory, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findInventory= await InventoryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findInventory.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findInventory= await InventoryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findInventory.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Inventory  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                InventoryServ.on('created', (obj)=>getFacilities())\r\n                InventoryServ.on('updated', (obj)=>getFacilities())\r\n                InventoryServ.on('patched', (obj)=>getFacilities())\r\n                InventoryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n        \r\n        useEffect(() => {\r\n            getFacilities()\r\n            return () => {\r\n               \r\n            }\r\n        }, [state.StoreModule.selectedStore])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Inventory\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Inventories </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        {/* <th><abbr title=\"Category\">Category</abbr></th> */}\r\n                                        <th>Product</th>\r\n                                        <th><abbr title=\"Quantity\">Quantity</abbr></th>\r\n                                        <th><abbr title=\"Base Unit\">Base Unit</abbr></th>\r\n                                        <th><abbr title=\"Stock Value\">Stock Value</abbr></th>\r\n                                         <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                                        <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                                        <th><abbr title=\"Re-Order Level\">Re-Order Level</abbr></th>\r\n                                        <th><abbr title=\"Expiry\">Expiry</abbr></th> \r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Inventory, i)=>(\r\n\r\n                                            <tr key={Inventory._id} onClick={()=>handleRow(Inventory)}>\r\n                                            <th>{i+1}</th>\r\n                                            {/* <td>{Inventory.productDetail.category}</td> */}\r\n                                            <th>{Inventory.name}</th>\r\n                                            <td>{Inventory.quantity}</td>\r\n                                            <td>{Inventory.baseunit}</td>\r\n                                            <td>{Inventory.stockvalue}</td>\r\n                                            <td>{Inventory.costprice}</td>\r\n                                            <td>{Inventory.sellingprice}</td>\r\n                                            <td>{Inventory.reorder_level}</td> \r\n                                            <td>{Inventory.expiry}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function InventoryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const InventoryServ=client.service('/Inventory')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const {user} = useContext(UserContext) //,setUser\r\n    \r\n   \r\n\r\n   const Inventory =state.InventoryModule.selectedInventory \r\n   console.log(\"selected\",Inventory)\r\n\r\n   \r\n  const getFacilities= async()=>{\r\n    \r\n    \r\n     const findProductEntry= await client.service('productentry').find(\r\n        {query: {\r\n            'productitems.productId':Inventory.productId,\r\n            facility:user.currentEmployee.facilityDetail._id,\r\n            storeId:state.StoreModule.selectedStore._id,\r\n            $limit:20,\r\n            $sort: {\r\n                createdAt: -1\r\n            }\r\n            }})\r\n\r\n        console.log(findProductEntry)\r\n       }\r\n    \r\n       useEffect(() => {\r\n        getFacilities()\r\n           return () => {\r\n               \r\n           }\r\n       }, [Inventory])\r\n /* await setFacilities(findProductEntry.data)\r\n        }\r\n        else {\r\n            if (user.stacker){ */\r\n                /* toast({\r\n                    message: 'You do not qualify to view this',\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  }) \r\n                  return */\r\n               /*  const findProductEntry= await ProductEntryServ.find(\r\n                    {query: {\r\n                        \r\n                        $limit:20,\r\n                        $sort: {\r\n                            createdAt: -1\r\n                        }\r\n                        }})\r\n    \r\n            await setFacilities(findProductEntry.data)\r\n\r\n            }\r\n        }  */\r\n  /*   .then((res)=>{\r\n        console.log(res)\r\n            setFacilities(res.data)\r\n            setMessage(\" ProductEntry  fetched successfully\")\r\n            setSuccess(true)\r\n        })\r\n        .catch((err)=>{\r\n            setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n            setError(true)\r\n        }) */\r\n    \r\n    \r\n\r\n\r\n\r\n    const handleEdit= async()=>{\r\n        const    newInventoryModule={\r\n            selectedInventory:Inventory,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Inventory Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Product Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"><strong> {Inventory.name} </strong></span>\r\n                        </td>\r\n                    </tr>\r\n                   {/*  <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Inventory Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"InventoryType\">{Inventory.InventoryType} </span> \r\n                    </td>\r\n                </tr> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Set Price\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\"  /*  onClick={handleSetPrice} */>\r\n                        Audit\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-info is-small\" /* onClick={handleEdit} */>\r\n                        Transaction History\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" /* onClick={handleEdit} */>\r\n                        Reorder Level\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function InventoryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    const [billservice,setBillService] = useState()\r\n    // eslint-disable-next-line \r\n    const InventoryServ=client.service('inventory')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const billServ=client.service('billing')\r\n\r\n    const Inventory =state.InventoryModule.selectedInventory // set inventory\r\n    const handleSetPrice = async()=>{\r\n    \r\n        const service = await  billServ.get(Inventory.billingId) // get the service\r\n            const contractSel= service.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n            \r\n            setValue(\"price\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"oldprice\", contractSel[0].price,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            await setBillService(service)\r\n            console.log(contractSel,service)\r\n    }\r\n \r\n        useEffect(() => {\r\n            handleSetPrice()\r\n     \r\n            return () => {\r\n                \r\n            }\r\n        },[])\r\n\r\n   const handleCancel=async()=>{\r\n   \r\n    const    newInventoryModule={\r\n        selectedInventory:{},\r\n        show :'detail'\r\n      }\r\n        await setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n            const    newInventoryModule={\r\n                selectedInventory:{},\r\n                show :'detail'\r\n            }\r\n        setState((prevstate)=>({...prevstate, InventoryModule:newInventoryModule}))\r\n\r\n        }\r\n\r\n\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Inventory._id\r\n        if (conf){\r\n             \r\n        InventoryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Inventory successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Inventory deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Inventory, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n       // data.facility=Inventory.facility\r\n          //console.log(data);\r\n          const contractSel= billservice.contracts.filter(element=>(element.source_org===Inventory.facility && element.dest_org===Inventory.facility))\r\n          contractSel[0].price=data.price \r\n          billServ.patch(billservice._id,billservice)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Inventory successfully\")\r\n                 toast({\r\n                    message: 'Price updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Inventory, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Price, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            }) \r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Set Price for {Inventory.name} per {Inventory.baseunit}\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> New Selling Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"price\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Old Price\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"oldprice\" type=\"text\" placeholder=\"Inventory Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n           \r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='name' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryHome.js",["433","434","435","436","437","438"],"import React ,{useState,useEffect,useContext} from 'react'\r\nimport Store, { StoreList } from './Store'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\nexport default function InventoryHome() {\r\n   // const [activeModal, setActiveModal]=useState(\"modal is-active \")\r\n    const {state,setState}=useContext(ObjectContext)\r\n    const handleCloseModal=()=>{\r\n        state.showStoreModal  =  \"modal\"                                                                                                                                                        \r\n        setState(state)\r\n        console.log( state.showStoreModal)\r\n    }\r\n    \r\n       \r\n \r\n    return (\r\n       \r\n            <section className= \"section remPadTop\">\r\n              <section className=\"hero is-info is-fullheight\">\r\n                <div className=\"hero-body\">\r\n                    <div className=\"container has-text-centered\">\r\n                    <h1 className=\"title\">\r\n                      Inventory Module\r\n                    </h1>\r\n                    <h2 className=\"subtitle\">\r\n                        Have fun working today!\r\n                    </h2>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n                                         \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js",["439","440","441","442","443","444","445","446","447","448","449","450","451"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\nvar random = require('random-string-generator');\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function ProductEntry() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ProductExitList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ProductExitModule.show ==='create')&&<ProductExitCreate />}\r\n                {(state.ProductExitModule.show ==='detail')&&<ProductExitDetail  />}\r\n                {(state.ProductExitModule.show ==='modify')&&<ProductExitModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductExitCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Sales\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(0)\r\n    const [qamount,setQAmount] = useState(null)\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [inventoryId,setInventoryId] = useState(\"\")\r\n    const [baseunit,setBaseunit] = useState(\"\")\r\n    const [quantity,setQuantity] = useState(\"\")\r\n    const [sellingprice,setSellingPrice] = useState(\"\")\r\n    const [costprice,setCostprice] = useState(0)\r\n    const [invquantity,setInvQuantity] = useState(\"\")\r\n    const [calcamount,setCalcAmount] = useState(0)\r\n    const [productItem,setProductItem] = useState([])\r\n    const [billingId,setBilllingId]=useState(\"\")  \r\n    const [changeAmount, setChangeAmount] = useState(true)\r\n    const {state}=useContext(ObjectContext)\r\n    const inputEl = useRef(0);\r\n    let calcamount1\r\n    let hidestatus\r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const productItemI={\r\n        productId,\r\n        name,\r\n        quantity,\r\n        sellingprice,\r\n        amount:calcamount, //qamount||\r\n        baseunit,\r\n        costprice,\r\n        billingId\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setProductId(obj.productId)\r\n        setName(obj.name)\r\n        setBaseunit(obj.baseunit)\r\n        setInventoryId(obj.inventoryId)\r\n        setSellingPrice(obj.sellingprice)\r\n        setInvQuantity(obj.quantity)\r\n        setCostprice(obj.costprice)\r\n        setBilllingId(obj.billingId)\r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setProductId(\"\")\r\n            setName(\"\")\r\n            setBaseunit(\"\")\r\n            setInventoryId(\"\")\r\n            setSellingPrice(\"\")\r\n            setInvQuantity(\"\")\r\n            setQAmount(null)\r\n            setCostprice(\"\")\r\n           // setCalcAmount(null)\r\n\r\n        }\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n    const handleUpdateTotal=()=>{\r\n\r\n        \r\n        setTotalamount(prevtotal=>Number(prevtotal) + Number(calcamount))\r\n    }\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n\r\n    const handleAmount= async()=>{\r\n        await setQAmount(null)\r\n       // alert(\"Iam chaning qamount\")\r\n    }\r\n    const handleClickProd=async()=>{\r\n        console.log(\"amount: \",productItemI.amount)\r\n        console.log(\"qamount: \",qamount)\r\n        console.log(\"calcamount: \",calcamount)\r\n\r\n        if ( quantity===0||quantity===\"\"|| productId===\"\"){\r\n            toast({\r\n                message: 'You need to choose a product and quantity to proceed',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return \r\n        }\r\n\r\n        await setSuccess(false)\r\n        await setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n       handleUpdateTotal()\r\n        setName(\"\")\r\n        setBaseunit(\"\")\r\n        setQuantity(\"\")\r\n        setInventoryId(\"\")\r\n        setSellingPrice(\"\")\r\n        setInvQuantity(\"\")\r\n            handleAmount()\r\n       // setCalcAmount(null)\r\n       await setSuccess(true)\r\n      /*  console.log(success)\r\n       console.log(qamount)\r\n       console.log(productItem) */\r\n       setChangeAmount(true)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const handleQtty=async(e)=>{\r\n        if (invquantity<e.target.value){\r\n            toast({\r\n                message: 'You can not sell more quantity than exist in inventory ' ,\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n            return\r\n        }\r\n        setQuantity(e.target.value)\r\n        calcamount1=quantity*sellingprice\r\n        await setCalcAmount(calcamount1)\r\n        console.log(calcamount)\r\n\r\n       \r\n\r\n    }\r\n\r\n    useEffect( () => {\r\n         setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n       setCalcAmount(quantity*sellingprice) \r\n        return () => {\r\n            \r\n        }\r\n    },[date])\r\n\r\n    const resetform=()=>{\r\n     setType(\"Sales\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setBaseunit()\r\n    setCostprice()\r\n    setProductItem([])\r\n    }\r\n\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        await setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n        productEntry.productitems=productItem\r\n        productEntry.createdby=user._id\r\n        productEntry.transactioncategory=\"debit\"\r\n       \r\n          console.log(\"b4 facility\",productEntry);\r\n          if (user.currentEmployee){\r\n         productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }else{\r\n            toast({\r\n                message: 'You can not remove inventory from any organization',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n          }\r\n          if (state.StoreModule.selectedStore._id){\r\n            productEntry.storeId=state.StoreModule.selectedStore._id\r\n          }else{\r\n            toast({\r\n                message: 'You need to select a store before removing inventory',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n\r\n          }\r\n          console.log(\"b4 create\",productEntry);\r\n        ProductEntryServ.create(productEntry)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                resetform()\r\n               /*  setMessage(\"Created ProductEntry successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'ProductExit created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n                  const today=new Date().toLocaleString()\r\n      \r\n                  setDate(today)\r\n                  const invoiceNo=random(6,'uppernumeric')\r\n                setDocumentNo(invoiceNo)\r\n                setType(\"Sales\")\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductExit ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n      const handleChangeAmount=()=>{\r\n        setChangeAmount((rev)=>(!rev))\r\n        \r\n    }\r\n   // console.log(\"i am rendering\")\r\n\r\n    useEffect(() => {\r\n        const today=new Date().toLocaleString()\r\n        console.log(today)\r\n        setDate(today)\r\n        const invoiceNo=random(6,'uppernumeric')\r\n        setDocumentNo(invoiceNo)\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        calcamount1=quantity*sellingprice\r\n         setCalcAmount(calcamount1)\r\n         console.log(calcamount)\r\n         setChangeAmount(true)\r\n        return () => {\r\n            \r\n        }\r\n    }, [quantity])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Product Exit: Product Exit- Sales, Dispense, Audit, Transfer out\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n            <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n            <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType} className=\"selectadd\">\r\n                           <option value=\"\">Choose Type </option>\r\n                            <option value=\"Sales\">Sales </option>\r\n                            <option value=\"In-house\">In-House </option>\r\n                            <option value=\"Dispense\">Dispense</option>\r\n                            <option value=\"Audit\">Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"client\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Client\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n           \r\n            </div>\r\n            </div> {/* horizontal end */}\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                    <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n               <div className=\"field is-horizontal\">\r\n               <div className=\"field-body\">\r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={e=>setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-coins\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n\r\n                </div> \r\n                </div> \r\n               \r\n                </form>   \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Product Items:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <InventorySearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                 {sellingprice &&   \"N\"}{sellingprice} {sellingprice &&   \"per\"}  {baseunit} {invquantity} {sellingprice &&   \"remaining\"} \r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\" >\r\n                <div className=\"field\" style={{width:\"40%\"}}>\r\n                <p className=\"control has-icons-left\" >\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={ e=> handleQtty(e)} placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hashtag\"></i>\r\n                    </span>\r\n                   \r\n                </p>\r\n        <label >{baseunit}</label>\r\n            </div> \r\n            <div className=\"field\">\r\n            <label>Amount:</label>{/* <p>{quantity*sellingprice}</p> */}\r\n            </div>\r\n            <div className=\"field\" style={{width:\"40%\"}}>\r\n                <p className=\"control has-icons-left \" /* style={{display:\"none\"}} */>\r\n                    <input className=\"input is-small\" name=\"qamount\" disabled={changeAmount} value={calcamount} type=\"text\"  onChange={async e=> await setCalcAmount(e.target.value)}  placeholder=\"Amount\"   />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-dollar-sign\"></i>\r\n                    </span>\r\n                </p>\r\n                <button className=\"button is-small is-success btnheight\" onClick={handleChangeAmount}>Adjust</button>\r\n            </div> \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n            \r\n       {(productItem.length>0) && <div>\r\n            <label>Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Selling Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.sellingprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Sell\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" disabled={!productItem.length>0} /* onClick={onSubmit} */>\r\n                        Clear\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductExitList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProductEntry, setSelectedProductEntry]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedProductEntry(ProductEntry)\r\n\r\n        const    newProductExitModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductEntryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                transactioncategory:\"debit\",\r\n                storeId:state.StoreModule.selectedStore._id,\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProductEntry= await ProductEntryServ.find(\r\n                {query: {\r\n                    transactioncategory:\"debit\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProductEntry.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        /* toast({\r\n                            message: 'You do not qualify to view this',\r\n                            type: 'is-danger',\r\n                            dismissible: true,\r\n                            pauseOnHover: true,\r\n                          }) \r\n                          return */\r\n                        const findProductEntry= await ProductEntryServ.find(\r\n                            {query: {\r\n                                transactioncategory:\"debit\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProductEntry.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" ProductEntry  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n         /*    useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n            useEffect(() => {\r\n               \r\n                if (!state.StoreModule.selectedStore){\r\n                    toast({\r\n                        message: 'kindly select a store',\r\n                        type: 'is-danger',\r\n                        dismissible: true,\r\n                        pauseOnHover: true,\r\n                      }) \r\n                      return\r\n                    getFacilities()\r\n\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductEntryServ.on('created', (obj)=>getFacilities())\r\n                ProductEntryServ.on('updated', (obj)=>getFacilities())\r\n                ProductEntryServ.on('patched', (obj)=>getFacilities())\r\n                ProductEntryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                console.log(\"store changed\")\r\n                return () => {\r\n                   \r\n                }\r\n            }, [state.StoreModule.selectedStore])\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {state.StoreModule.selectedStore?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search ProductEntry\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Product Exits </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th>Client</th>\r\n                                        <th><abbr title=\"Document No\">Document No</abbr></th>\r\n                                        <th><abbr title=\"Total Amount\">Total Amount</abbr></th>\r\n                                        <th><abbr title=\"Enteredby\">Entered By</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{ProductEntry.date}</td>\r\n                                            <th>{ProductEntry.type}</th>\r\n                                            <td>{ProductEntry.source}</td>\r\n                                            <td>{ProductEntry.documentNo}</td>\r\n                                            <td>{ProductEntry.totalamount}</td>\r\n                                            <td>{ProductEntry.enteredby}</td>\r\n                                            <td><span className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading... Choose a Store</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductExitDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductExitModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                    <th><abbr title=\"Amount\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.sellingprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductExitModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductExitModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductExitModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InventorySearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('inventory')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n   const {user} = useContext(UserContext) \r\n   const {state}=useContext(ObjectContext)\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n    }\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 facility: user.currentEmployee.facilityDetail._id,\r\n                 storeId: state.StoreModule.selectedStore._id,\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small  is-expanded\" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu expanded\" style={{width:\"100%\"}}>\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" /* onClick={handleAddproduct} */> <span> {val} is not in your inventory</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <div><span>{facility.name}</span></div>\r\n                                        <div><span><strong>{facility.quantity}</strong></span>\r\n                                        <span>{facility.baseunit}(s) remaining</span>\r\n                                        <span className=\"padleft\"><strong>Price:</strong> N{facility.sellingprice}</span></div>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        <ProductCreate />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\EncounterMgt\\Prescription.js",["452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport FacilityPopup from '../helpers/FacilityPopup'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\n/* import {ProductCreate} from './Products' */\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Prescription() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <PrescriptionList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.OrderModule.show ==='create')&&<PrescriptionCreate />}\r\n                {(state.OrderModule.show ==='detail')&&<ProductEntryDetail  />}\r\n                {(state.OrderModule.show ==='modify')&&<ProductEntryModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function PrescriptionCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Purchase Invoice\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(\"\")\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [destination,setDestination] = useState('')\r\n    const [destinationId,setDestinationId] = useState('')\r\n    const [destinationModal,setDestinationModal] = useState(false)\r\n    const [medication,setMedication] = useState()\r\n    const [instruction,setInstruction] = useState()\r\n    const [productItem,setProductItem] = useState([])\r\n    const {state}=useContext(ObjectContext)\r\n    const ClientServ=client.service('clinicaldocument')\r\n    \r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const handlecloseModal =()=>{\r\n        setDestinationModal(false)\r\n        //handleSearch(val)\r\n    }\r\n    const productItemI={\r\n      /*   productId,\r\n        name, */\r\n        medication,\r\n        destination,\r\n        instruction,\r\n        destinationId\r\n        /* costprice,\r\n        amount:quantity*costprice,\r\n        baseunit */\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setInstruction(obj.instruction)\r\n        setMedication(obj.medication)\r\n\r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setInstruction(\"\")\r\n            setMedication(\"\")\r\n           \r\n        }\r\n       // setBaseunit(obj.baseunit)\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n   /*  useEffect(() => {\r\n        setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n        console.log(productItem)\r\n        return () => {\r\n            \r\n        }\r\n    },[productItemI])\r\n */\r\n    useEffect(() => {\r\n        \r\n        setDestination(state.DestinationModule.selectedDestination.facilityName)\r\n        setDestinationId(state.DestinationModule.selectedDestination._id)\r\n        return () => {\r\n           \r\n        }\r\n    }, [state.DestinationModule.selectedDestination])\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n    const handleClickProd=async()=>{\r\n        await setSuccess(false)\r\n        if (!(productItemI.medication && productItemI.medication.length>0 )){\r\n            toast({\r\n                message: 'medication can not be empty ' ,\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n              return\r\n        }\r\n        await setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n        setName(\"\")\r\n        setMedication(\"\")\r\n        setInstruction(\"\")\r\n        setDestination( user.currentEmployee.facilityDetail.facilityName)\r\n        setDestinationId( user.currentEmployee.facilityDetail._id)\r\n       // setDestination(\"\")\r\n       await setSuccess(true)\r\n       console.log(success)\r\n       console.log(productItem)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const handleChangeDestination=()=>{\r\n        setDestinationModal(true)\r\n    }\r\n\r\n    const resetform=()=>{\r\n     setType(\"Purchase Invoice\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setMedication(\"\")\r\n    setInstruction(\"\")\r\n    setProductItem([])\r\n    }\r\n    const onSubmit = () =>{\r\n        //data,e\r\n       // e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        //write document\r\n        let document={}\r\n         // data.createdby=user._id\r\n         // console.log(data);\r\n          if (user.currentEmployee){\r\n          document.facility=user.currentEmployee.facilityDetail._id \r\n          document.facilityname=user.currentEmployee.facilityDetail.facilityName // or from facility dropdown\r\n          }\r\n         document.documentdetail=productItem\r\n         console.log(document.documentdetail)\r\n          document.documentname=\"Prescription\" //state.DocumentClassModule.selectedDocumentClass.name\r\n         // document.documentClassId=state.DocumentClassModule.selectedDocumentClass._id\r\n          document.location=state.ClinicModule.selectedClinic.name+\" \"+state.ClinicModule.selectedClinic.locationType\r\n          document.locationId=state.ClinicModule.selectedClinic._id\r\n          document.client=state.ClientModule.selectedClient._id\r\n          document.clientname=state.ClientModule.selectedClient.firstname+ \" \"+state.ClientModule.selectedClient.middlename+\" \"+state.ClientModule.selectedClient.lastname\r\n          document.clientobj=state.ClientModule.selectedClient\r\n          document.createdBy=user._id\r\n          document.createdByname=user.firstname+ \" \"+user.lastname\r\n          document.status=\"completed\"\r\n          console.log(document)\r\n        ClientServ.create(document)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Presciption created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Prescription ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    useEffect(() => {\r\n        setDestination( user.currentEmployee.facilityDetail.facilityName)\r\n        setDestinationId( user.currentEmployee.facilityDetail._id)\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Prescription\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n           {/*  <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit)  </form>  */}\r\n           \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Medication:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n             <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */  > \r\n                    <MedicationHelperSearch  getSearchfacility={getSearchfacility} clear={success} />  \r\n                  <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\"  /* ref={register ({ required: true }) }  */   value={medication} name=\"medication\" type=\"text\" onChange={e=>setMedication(e.target.value)} placeholder=\"medication\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p> \r\n                </div>\r\n               {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"medication\" value={medication} type=\"text\" onChange={e=>setMedication(e.target.value)} placeholder=\"medication\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n       \r\n            </div>  */}\r\n            \r\n          \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n         <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"instruction\" value={instruction} type=\"text\" onChange={e=>setInstruction(e.target.value)} placeholder=\"Instructions/Note\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n       \r\n            </div>  \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small \" disabled /* ref={register({ required: true })} */ name=\"destination\" value={destination===user.currentEmployee.facilityDetail.facilityName?\"In-house\":destination} type=\"text\" onChange={e=>setDestination(e.target.value)} placeholder=\"Destination Pharmacy\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                <button className=\"button is-small is-success btnheight\" onClick={handleChangeDestination}>Change</button>\r\n       \r\n            </div>  \r\n            </div> \r\n            </div> \r\n\r\n       {(productItem.length>0) && <div>\r\n            <label className=\"label is-size-7\">Medications:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                   {/*  <th><abbr title=\"Type\">Name</abbr></th> */}\r\n                    <th><abbr title=\"Medication\">Medication</abbr></th>\r\n                    <th><abbr title=\"Destination\">Destination</abbr></th>\r\n                     {/*<th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th> */}\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        {/* <td>{ProductEntry.name}</td> */}\r\n                        <td>{ProductEntry.medication}<br/>\r\n                        <span className=\"help\">{ProductEntry.instruction}</span></td>\r\n                       <td>{ProductEntry.destination===user.currentEmployee.facilityDetail.facilityName?\"In-house\":ProductEntry.destination}</td>\r\n                         {/* <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td> */}\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Create\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n            <div className={`modal ${destinationModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Destination</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                            <FacilityPopup facilityType=\"Pharmacy\"  closeModal={handlecloseModal}/>\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                       {/*  <ProductCreate /> */}\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function PrescriptionList({standalone}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const OrderServ=client.service('order')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedOrder, setSelectedOrder]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedOrder:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, OrderModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedOrder(ProductEntry)\r\n\r\n        const    newProductEntryModule={\r\n            selectedOrder:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, OrderModule:newProductEntryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       OrderServ.find({query: {\r\n                order: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_status: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_category:\"Prescription\",\r\n               // storeId:state.StoreModule.selectedStore._id,\r\n               //facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n const getFacilities= async()=>{\r\n       \r\n            console.log(\"here b4 server\")\r\n            console.log(state.ClientModule.selectedClient._id)\r\n             const findProductEntry= await OrderServ.find(\r\n                {query: {\r\n                    order_category:\"Prescription\",\r\n                    //destination: user.currentEmployee.facilityDetail._id,\r\n                   \r\n                    //storeId:state.StoreModule.selectedStore._id,\r\n                    clientId:state.ClientModule.selectedClient._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n         await setFacilities(findProductEntry.data)\r\n         }   \r\n\r\n            useEffect(() => {\r\n                console.log(\"started\")\r\n                getFacilities()\r\n              \r\n               \r\n               OrderServ.on('created', (obj)=>getFacilities())\r\n                OrderServ.on('updated', (obj)=>getFacilities())\r\n                OrderServ.on('patched', (obj)=>getFacilities())\r\n                OrderServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            \r\n    return(\r\n        \r\n            <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Medications\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Prescriptions </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                        <th>Fulfilled</th>\r\n                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                        <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                        {/* <th><abbr title=\"Client Name\">Client Name</abbr></th> */}\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)} className={ProductEntry._id===(selectedOrder?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */}<span>{format(new Date(ProductEntry.createdAt),'dd-MM-yy')}</span></td>\r\n                                            <th>{ProductEntry.order}</th>\r\n                                            <td>{ProductEntry.fulfilled?\"Yes\":\"No\"}</td>\r\n                                            <td>{ProductEntry.order_status}</td>\r\n                                            <td>{ProductEntry.requestingdoctor_Name}</td>\r\n                                            {/* <td>{ProductEntry.clientId}</td> */}\r\n                                            <td><span className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductEntryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductEntryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductEntryModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function MedicationHelperSearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('medicationhelper')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n    const [productModal,setProductModal]=useState(false)\r\n   let value\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n  \r\n       \r\n       await  setSimpa(obj.medication)\r\n      \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='medication' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res) \r\n                    if(res.total>0){\r\n                        setFacilities(res.data)\r\n                        setSearchMessage(\" product  fetched successfully\")\r\n                        setShowPanel(true)\r\n                    }else{\r\n                        setShowPanel(false)\r\n                        getSearchfacility({\r\n                            medication:value,\r\n                            instruction:\"\"\r\n                        })\r\n                    }\r\n               \r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error fetching medication ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n       // setDestinationModal(false)\r\n        //handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n        setSimpa(value)\r\n        return () => {\r\n            \r\n        }\r\n    }, [simpa])\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                               /*  onBlur={(e)=>handleBlur(e)} */\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu\" style={{width:\"100%\"}} >\r\n                            <div className=\"dropdown-content\">\r\n                         {/*  { facilities.length>0?\"\":<div className=\"dropdown-item\" onClick={handleAddproduct}> <span>Add {val} to product list</span> </div>} */}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.medication}</span> // <span>{facility.instruction}</span>\r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Store.js",["473","474","475","476","477"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Store() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedStore,setSelectedStore]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Store  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <StoreList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.StoreModule.show ==='create')&&<StoreCreate />}\r\n                {(state.StoreModule.show ==='detail')&&<StoreDetail  />}\r\n                {(state.StoreModule.show ==='modify')&&<StoreModify Store={selectedStore} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function StoreCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{ // buble-up from inputsearch for creating resource\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeStore.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n          data.locationType=\"Store\"\r\n        StoreServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Store successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Store created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Store ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Store\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n               {/*  <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"StoreType\" type=\"text\" placeholder=\"Type of Store\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div> */}\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Store\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function StoreList({standalone}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedStore, setSelectedStore]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newStoreModule={\r\n            selectedStore:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Store)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Store)\r\n\r\n        await setSelectedStore(Store)\r\n\r\n        const    newStoreModule={\r\n            selectedStore:Store,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       StoreServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                locationType:\"Store\",\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Store  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Store, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findStore= await StoreServ.find(\r\n                {query: {\r\n                    locationType:\"Store\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        name: 1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findStore.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findStore= await StoreServ.find(\r\n                            {query: {\r\n                                locationType:\"Store\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    name: 1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findStore.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Store  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Store, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                StoreServ.on('created', (obj)=>getFacilities())\r\n                StoreServ.on('updated', (obj)=>getFacilities())\r\n                StoreServ.on('patched', (obj)=>getFacilities())\r\n                StoreServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Stores\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Stores </span></div>\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        {/* <th><abbr title=\"Last Name\">Store Type</abbr></th>\r\n                                       <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                         <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>*/}\r\n                                       { !standalone &&  <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Store, i)=>(\r\n\r\n                                            <tr key={Store._id} onClick={()=>handleRow(Store)} className={Store._id===(selectedStore?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Store.name}</th>\r\n                                            {/*<td>{Store.StoreType}</td>\r\n                                            < td>{Store.profession}</td>\r\n                                            <td>{Store.phone}</td>\r\n                                            <td>{Store.email}</td>\r\n                                            <td>{Store.department}</td>\r\n                                            <td>{Store.deptunit}</td> \r\n                                            <td>{Store.facility}</td>*/}\r\n                                          { !standalone &&   <td><span   className=\"showAction\"  >...</span></td>}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function StoreDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const StoreServ=client.service('/Store')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Store =state.StoreModule.selectedStore \r\n\r\n    const handleEdit= async()=>{\r\n        const    newStoreModule={\r\n            selectedStore:Store,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Store Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {Store.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Location Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"StoreType\">{Store.locationType} </span> \r\n                    </td>\r\n                </tr>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"StoreCity\">{Store.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"StoreContactPhone\" >{Store.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"StoreEmail\" >{Store.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"StoreOwner\">{Store.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"StoreType\">{Store.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"StoreCategory\">{Store.StoreCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function StoreModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Store =state.StoreModule.selectedStore \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", Store.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"locationType\", Store.locationType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", Store.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Store.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Store.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Store.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Store.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"StoreCategory\", Store.StoreCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newStoreModule={\r\n        selectedStore:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newStoreModule={\r\n            selectedStore:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Store._id\r\n        if (conf){\r\n             \r\n        StoreServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Store successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Store deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Store, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Store, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Store.facility\r\n          //console.log(data);\r\n          \r\n        StoreServ.patch(Store._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Store successfully\")\r\n                 toast({\r\n                    message: 'Store updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Store, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Store, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Store Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Location Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"StoreType\" type=\"text\" placeholder=\"Store Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Store Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"StoreCategory\" type=\"text\" placeholder=\"Store Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                {/* <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)} >\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js",["478","479"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Employee() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedEmployee,setSelectedEmployee]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Employee  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <EmployeeList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.EmployeeModule.show ==='create')&&<EmployeeCreate />}\r\n                {(state.EmployeeModule.show ==='detail')&&<EmployeeDetail  />}\r\n                {(state.EmployeeModule.show ==='modify')&&<EmployeeModify Employee={selectedEmployee} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function EmployeeCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeEmployee.FacilityId)//\r\n      if (!user.stacker){\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    },[user])\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          if (user.currentEmployee){\r\n         // data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        EmployeeServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Employee successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Employee created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating employee ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Employee\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            { error && <div className=\"is-danger\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"lastname\" type=\"text\" placeholder=\"Last Name\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function EmployeeList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedEmployee, setSelectedEmployee]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Employee)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Employee)\r\n\r\n        await setSelectedEmployee(Employee)\r\n\r\n        const    newEmployeeModule={\r\n            selectedEmployee:Employee,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='firstname'\r\n       console.log(val)\r\n       EmployeeServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Employee  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Employee, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findEmployee= await EmployeeServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findEmployee.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findEmployee= await EmployeeServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findEmployee.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Employee  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Employee, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                EmployeeServ.on('created', (obj)=>getFacilities())\r\n                EmployeeServ.on('updated', (obj)=>getFacilities())\r\n                EmployeeServ.on('patched', (obj)=>getFacilities())\r\n                EmployeeServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Employees </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>First Name</th>\r\n                                        <th><abbr title=\"Last Name\">Last Name</abbr></th>\r\n                                        <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th>\r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Employee, i)=>(\r\n\r\n                                            <tr key={Employee._id} onClick={()=>handleRow(Employee)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Employee.firstname}</th>\r\n                                            <td>{Employee.lastname}</td>\r\n                                            <td>{Employee.profession}</td>\r\n                                            <td>{Employee.phone}</td>\r\n                                            <td>{Employee.email}</td>\r\n                                            <td>{Employee.department}</td>\r\n                                            <td>{Employee.deptunit}</td>\r\n                                            <td>{Employee.facility}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function EmployeeDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const EmployeeServ=client.service('/Employee')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Employee =state.EmployeeModule.selectedEmployee \r\n\r\n    const handleEdit= async()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:Employee,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Employee Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <fieldset>\r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        First Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-medium \"   name=\"EmployeeName\"> {Employee.firstname} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Last Name:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"EmployeeAddress\">{Employee.lastname} </span> \r\n                    </td>\r\n                </tr>\r\n                    <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"EmployeeCity\">{Employee.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-small \"  name=\"EmployeeContactPhone\" >{Employee.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-small \"  name=\"EmployeeEmail\" >{Employee.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"EmployeeOwner\">{Employee.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"EmployeeType\">{Employee.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr>\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-small \"  name= \"EmployeeCategory\">{Employee.EmployeeCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </fieldset>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function EmployeeModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Employee =state.EmployeeModule.selectedEmployee \r\n\r\n        useEffect(() => {\r\n            setValue(\"firstname\", Employee.firstname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"lastname\", Employee.lastname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"profession\", Employee.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Employee.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Employee.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Employee.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Employee.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n          /*   setValue(\"EmployeeCategory\", Employee.EmployeeCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newEmployeeModule={\r\n        selectedEmployee:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Employee._id\r\n        if (conf){\r\n             \r\n        EmployeeServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Employee successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Employee deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Employee, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Employee, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Employee.facility\r\n          //console.log(data);\r\n          \r\n        EmployeeServ.patch(Employee._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Employee successfully\")\r\n                 toast({\r\n                    message: 'Employee updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Employee, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Employee, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Employee Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\">First Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Last Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"lastname\" type=\"text\" placeholder=\"Last Name\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Employee Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"EmployeeCategory\" type=\"text\" placeholder=\"Employee Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            <div className=\"block\">\r\n            <div className=\"field  is-grouped\">\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Dispensary.js",["480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\nimport BillDispenseCreate from './BillDispense'\r\n/* import {ProductCreate} from './Products' */\r\n// eslint-disable-next-line\r\n//const searchfacility={};\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\n\r\n// Demo styles, see 'Styles' section below for some notes on use.\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\n\r\n\r\n\r\nexport default function Dispense() {\r\n    //const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line\r\n   const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line\r\n  const [message, setMessage] = useState(\"\") \r\n   const OrderServ=client.service('order')\r\n   //const history = useHistory()\r\n  // const {user,setUser} = useContext(UserContext)\r\n   const [facilities,setFacilities]=useState([])\r\n    // eslint-disable-next-line\r\n  const [selectedDispense, setSelectedDispense]=useState() //\r\n   // eslint-disable-next-line\r\n   const {state,setState}=useContext(ObjectContext)\r\n   // eslint-disable-next-line\r\n   const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n   const getFacilities= async()=>{\r\n       \r\n    // console.log(\"here b4 server\")\r\n      const findProductEntry= await OrderServ.find(\r\n         {query: {\r\n             order_category:\"Prescription\",\r\n             fulfilled:false,\r\n             destination: user.currentEmployee.facilityDetail._id,\r\n             //storeId:state.StoreModule.selectedStore._id,\r\n             //clientId:state.ClientModule.selectedClient._id,\r\n             $limit:50,\r\n             $sort: {\r\n                 createdAt: -1\r\n             }\r\n             }})\r\n\r\n            console.log(\"updatedorder\", findProductEntry.groupedOrder)\r\n            await setFacilities(findProductEntry.groupedOrder)\r\n            await setState((prevstate)=>({...prevstate, currentClients:findProductEntry.groupedOrder}))\r\n            }   \r\n\r\n    //1.consider using props for global data\r\n    useEffect(() => {\r\n        // console.log(\"started\")\r\n         getFacilities()\r\n         OrderServ.on('created', (obj)=>getFacilities())\r\n         OrderServ.on('updated', (obj)=>getFacilities())\r\n         OrderServ.on('patched', (obj)=>getFacilities())\r\n         OrderServ.on('removed', (obj)=>getFacilities())\r\n         return () => {\r\n         \r\n         }\r\n         },[])\r\n\r\n     const handleRow= async(ProductEntry)=>{\r\n    \r\n        await setSelectedDispense(ProductEntry)\r\n\r\n        const    newProductEntryModule={\r\n            selectedDispense:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n      \r\n      }\r\n\r\n    /*  useEffect(() => {\r\n        const updatedOne= state.currentClients.filter(el=>(JSON.stringify(el.client_id)===JSON.stringify(state.DispenseModule.selectedDispense.client_id)))\r\n        console.log(\"udatedone\", updatedOne)\r\n        console.log(\"state\", state.currentClients)\r\n        handleRow(updatedOne)\r\n         return () => {\r\n             \r\n         }\r\n     }, []) */\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n                <div className=\"column is-7 \">\r\n                    <DispenseList />\r\n                    </div>\r\n               {/*  <div className=\"column is-5 \"> */}\r\n                   {/*  {(state.DispenseModule.show ==='create')&&<DispenseCreate />} */}\r\n                   {/*  {(state.DispenseModule.show ==='detail')&&<DispenseDetail  />} */}\r\n               {/*      {(state.DispenseModule.show ==='modify')&&<DispenseModify ProductEntry={selectedProductEntry} />} */}\r\n                \r\n               {/*  </div> */}\r\n                <div className=\"column is-5 \">\r\n                \r\n                {(state.medicationModule.show ==='detail')&&<BillDispenseCreate />}\r\n                </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function DispenseList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const OrderServ=client.service('order')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedDispense, setSelectedDispense]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n    const [selectedMedication, setSelectedMedication] =useState(\"\")\r\n\r\n    const handleMedicationRow= async(ProductEntry)=>{ //handle selected single order\r\n        //console.log(\"b4\",state)\r\n    \r\n        //console.log(\"handlerow\",ProductEntry)\r\n    \r\n        await setSelectedMedication(ProductEntry)\r\n    \r\n        const    newProductEntryModule={\r\n            selectedMedication:ProductEntry,\r\n            show :'detail'\r\n        }\r\n      await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n       //console.log(state)\r\n      // ProductEntry.show=!ProductEntry.show\r\n    \r\n    }\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n   /*  const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedDispense(ProductEntry)\r\n\r\n        const    newProductEntryModule={\r\n            selectedDispense:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n      // ProductEntry.show=!ProductEntry.show\r\n     const i= facilities.findIndex((element, index) => {\r\n        if (JSON.stringify(element.client_id) === JSON.stringify( ProductEntry.client_id)) {\r\n          return true\r\n        }\r\n      })\r\n     console.log(i)\r\n      setFacilities((prevstate)=>([...prevstate, prevstate[i].show=!prevstate[i].show]))\r\n\r\n    } */\r\n\r\n    const handleSearch=(val)=>{\r\n       const field='name'\r\n       //console.log(val)\r\n       OrderServ.find({query: {\r\n                order: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_status: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_category:\"Prescription\",\r\n               // storeId:state.StoreModule.selectedStore._id,\r\n               //facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n               // console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n               // console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n\r\n\r\n    return(     \r\n            <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Medications\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Prescriptions </span></div>\r\n                     {/* <div className=\"level-right\">\r\n                       <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div> \r\n                    </div>*/}\r\n\r\n                </div>\r\n                <div className=\" pullup \">\r\n                    <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                    <Accordion allowZeroExpanded>\r\n                        {state.currentClients.map((Clinic, i)=>(\r\n                            <AccordionItem  key={Clinic.client_id} >\r\n                               <AccordionItemHeading >\r\n                               <AccordionItemButton  >\r\n                                       {i+1} {Clinic.clientname} with {Clinic.orders.length} medication(s)  \r\n                                </AccordionItemButton>\r\n                                </AccordionItemHeading>\r\n                                <AccordionItemPanel>\r\n                                    <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable mr-2\">\r\n                                            <thead>\r\n                                                <tr>\r\n                                                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                                    <th><abbr title=\"Date\">Date</abbr></th>\r\n                                                    <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                                    <th>Fulfilled</th>\r\n                                                    <th><abbr title=\"Status\">Status</abbr></th>\r\n                                                    <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                                </tr>\r\n                                            </thead>\r\n                                            <tbody>\r\n                                            { Clinic.orders.map((order, i)=>(\r\n\r\n                                                        <tr key={order._id} onClick={()=>handleMedicationRow(order)} className={order._id===(selectedMedication?._id||null)?\"is-selected\":\"\"}>                                         \r\n                                                        <th>{i+1}</th>\r\n                                                        <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                                        <th>{order.order}</th>\r\n                                                        <td>{order.fulfilled?\"Yes\":\"No\"}</td>\r\n                                                        <td>{order.order_status}</td>\r\n                                                        <td>{order.requestingdoctor_Name}</td>\r\n                                                        </tr>\r\n                                                ))}\r\n                                            </tbody>\r\n                                            </table>\r\n                              </AccordionItemPanel>                                          \r\n                                </AccordionItem>\r\n                            ))}\r\n                            {/* <!-- Add Ref to Load More div --> */}\r\n                            {/*  <div className=\"loading\" ref={loader}>\r\n                                    <h2>Load More</h2>\r\n                        </div> */}\r\n                        </Accordion>\r\n                    </div>                   \r\n                </div>  \r\n            </>          \r\n    )\r\n    }\r\n\r\n\r\nexport function DispenseDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    const [selectedMedication, setSelectedMedication] =useState(\"\")\r\n    const [currentOrder, setCurrentOrder] =useState(\"\")\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const OrderServ=client.service('order')\r\n    /* const [ProductEntry, setProductEntry] = useState(\"\")\r\n    const [facilities, setFacilities] = useState(\"\") */\r\n\r\n let ProductEntry =state.DispenseModule.selectedDispense\r\n   //const facilities=ProductEntry.orders\r\n\r\n   const handleRow= async(ProductEntry)=>{\r\n    //console.log(\"b4\",state)\r\n\r\n    //console.log(\"handlerow\",ProductEntry)\r\n\r\n    await setSelectedMedication(ProductEntry)\r\n\r\n    const    newProductEntryModule={\r\n        selectedMedication:ProductEntry,\r\n        show :'detail'\r\n    }\r\n  await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n   //console.log(state)\r\n  // ProductEntry.show=!ProductEntry.show\r\n\r\n}\r\n\r\n    const handleEdit= async(ProductEntry)=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n      const client1=  state.currentClients.find(el=>{\r\n            return JSON.stringify(el.client_id)===JSON.stringify(state.DispenseModule.selectedDispense)\r\n        })\r\n\r\n    setCurrentOrder(client1)\r\n   // console.log(client1)\r\n        return () => {\r\n        \r\n        }\r\n    }, [])\r\n   \r\n\r\n /*  \r\n     const setprod=async()=>{\r\n        await setProductEntry(state.DispenseModule.selectedDispense)\r\n    } */\r\n \r\n    useEffect(() => {\r\n        /* OrderServ.on('created', (obj)=>getFacilities())\r\n        OrderServ.on('updated', (obj)=>getFacilities())\r\n       \r\n        OrderServ.on('removed', (obj)=>getFacilities()) */\r\n        OrderServ.on('patched',  (obj)=>{\r\n            //update state.DispenseModule.selectedDispense\r\n           // console.log(obj.clientId)\r\n           // console.log(\"currentClients\",state.currentClients)\r\n           const current1=state.currentClients.find(el=>(JSON.stringify(el.client_id)===JSON.stringify(obj.clientId)))\r\n           setCurrentOrder(current1)\r\n          // console.log(\"currentone\",current1)\r\n        })\r\n      \r\n        return () => {\r\n         \r\n        }\r\n    },[])\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Dispense Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* {JSON.stringify(ProductEntry.orders,2,10)} */}\r\n            <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        {/* <th><abbr title=\"Client Name\">Client Name</abbr></th> */}\r\n                                        {/* <th><abbr title=\"Number of Orders\"># of Medication</abbr></th> */}\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                        <th>Fulfilled</th>\r\n                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                        <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                        \r\n                                        {/* <th><abbr title=\"Actions\">Actions</abbr></th> */}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {state.DispenseModule.selectedDispense.orders.map((order, i)=>(\r\n\r\n                                            <tr key={order._id} onClick={()=>handleRow(order)} className={order._id===(selectedMedication?._id||null)?\"is-selected\":\"\"}>\r\n                                            \r\n                                               <th>{i+1}</th>\r\n                                                 {/* <td>{ProductEntry.clientname}</td> \r\n                                                <td>{ProductEntry.orders.length}</td> */}\r\n                                           \r\n                                           \r\n                                            <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                          <th>{order.order}</th>\r\n                                            <td>{order.fulfilled?\"Yes\":\"No\"}</td>\r\n                                            <td>{order.order_status}</td>\r\n                                            <td>{order.requestingdoctor_Name}</td>\r\n                                            \r\n                                           {/*  <td><span className=\"showAction\"  >...</span></td> */}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                        \r\n                </div>              \r\n               \r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js",["497","498"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\helpers\\FacilityPopup.js",["499","500"],"import React, {useState,useContext, useEffect} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\n\r\nexport function Facility() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedFacility,setSelectedFacility]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    //console.log(\"facility parent\", state)\r\n    \r\n\r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Facility  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n              {/*   <FacilityList /> */}\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n               {/*  {(state.facilityModule.show ==='create')&&<FacilityCreate />}\r\n                {(state.facilityModule.show ==='detail')&&<FacilityDetail  />}\r\n                {(state.facilityModule.show ==='modify')&&<FacilityModify facility={selectedFacility} />} */}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function FacilityCreate(){\r\n    const { register, handleSubmit} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n\r\n    \r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n                setMessage(\"Created facility successfully\")\r\n                setSuccess(true)\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n        <section className= \"section remPadTop\">\r\n        <div className=\"columns \">\r\n        <div /* className=\"column is-4 \" */>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Facility\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        </div>\r\n        </section>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport default function FacilityPopup({facilityType,closeModal}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const facilityServ=client.service('facility')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedFacility, setSelectedFacility]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n\r\n   \r\n\r\n  /*   const handleCreateNew = async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    } */\r\n    const handleRow= async(facility)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",facility)\r\n\r\n        await setSelectedFacility(facility)\r\n\r\n        const    newfacilityModule={\r\n            selectedDestination:facility,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DestinationModule:newfacilityModule}))\r\n       //console.log(state)\r\n       closeModal()\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='facilityName'\r\n       console.log(val)\r\n       facilityServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                facilityType,\r\n                $limit:10,\r\n                $sort: {\r\n                    facilityName: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" facility  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n\r\n           /*  if (val.length>2){\r\n                console.log(\"in\")\r\n               \r\n            }\r\n\r\n        }\r\n     */\r\n        const getFacilities=()=>{\r\n            facilityServ.find({query: {\r\n                facilityType,\r\n                $limit:20,\r\n                $sort: {\r\n                    facilityName: 1\r\n                  }\r\n                    }})\r\n            .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" facility  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                    setError(true)\r\n                })\r\n\r\n        }\r\n\r\n    useEffect(() => {\r\n        getFacilities()\r\n\r\n        facilityServ.on('created', (obj)=>getFacilities())\r\n        facilityServ.on('updated', (obj)=>getFacilities())\r\n        facilityServ.on('patched', (obj)=>getFacilities())\r\n        facilityServ.on('removed', (obj)=>getFacilities())\r\n        return () => {\r\n           \r\n        }\r\n    },[])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n            <>  \r\n            <section className= \"section remPadTop\">\r\n            <div /* className=\"columns \" */>\r\n            <div /* className=\"column is-4 \" */>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Facilities </span></div>\r\n                    {/* <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div> */}\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"S/No\">S/No</abbr></th>\r\n                                        <th>Facility Name</th>\r\n                                        <th><abbr title=\"Address\"> Address</abbr></th>\r\n                                        <th><abbr title=\"City\">City</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th><abbr title=\"Category\">Category</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((facility, i)=>(\r\n\r\n                                            <tr key={facility._id} onClick={()=>handleRow(facility)} className={facility._id===(selectedFacility?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{facility.facilityName}</th>\r\n                                            <td>{facility.facilityAddress}</td>\r\n                                            <td>{facility.facilityCity}</td>\r\n                                            <td>{facility.facilityContactPhone}</td>\r\n                                            <td>{facility.facilityEmail}</td>\r\n                                            <td>{facility.facilityType}</td>\r\n                                            <td>{facility.facilityCategory}</td>\r\n                                           \r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div> \r\n                </div> \r\n                </div> \r\n                </section>              \r\n            </>\r\n              \r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\BillDispense.js",["501","502","503","504","505","506","507","508","509","510","511","512","513","514","515"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\DispensaryMain.js",["516","517","518","519","520","521","522","523"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {DocumentClassList} from './DocumentClass'\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\nimport  VideoConference  from '../utils/VideoConference';\r\nimport  Prescription, { PrescriptionCreate } from './Prescription';\r\n\r\nexport default function DispensaryMain() {\r\n // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ClinicServ=client.service('clinicaldocument')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedClinic, setSelectedClinic]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n    const [showModal,setShowModal]=useState(false)\r\n    const [showPrescriptionModal,setShowPrescriptionModal]=useState(false)\r\n    // tracking on which page we currently are\r\n    const [page, setPage] = useState(0);\r\n    // add loader refrence \r\n    const loader = useRef(null);\r\n    \r\n    const standalone=false\r\n\r\n    const handleNewDocument= async()=>{\r\n        await setShowModal(true)                                                                                                                                                        \r\n        console.log( showModal)\r\n    }\r\n    const handleNewPrescription= async()=>{\r\n        await setShowPrescriptionModal(true)                                                                                                                                                        \r\n        console.log( showPrescriptionModal)\r\n    }\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Clinic)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Clinic)\r\n\r\n        await setSelectedClinic(Clinic)\r\n\r\n        const    newClinicModule={\r\n            selectedClinic:Clinic,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n       Clinic.show=!Clinic.show\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='documentname'\r\n       console.log(val)\r\n       ClinicServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n              // facility:user.currentEmployee.facilityDetail._id || \"\",\r\n               // locationType:\"Clinic\",\r\n               client:state.ClientModule.selectedClient._id,\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Clinic  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Clinic, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n    const getFacilities= async(page=0)=>{\r\n            /* const limit=20\r\n            alert(page) */\r\n            if (user.currentEmployee){\r\n            \r\n        const findClinic= await ClinicServ.find(\r\n                {query: {\r\n                    //locationType:\"Clinic\",\r\n                    //facility:user.currentEmployee.facilityDetail._id,\r\n                    client:state.ClientModule.selectedClient._id,\r\n                    $limit:20,\r\n                   /*  $skip:page*limit, */\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n            const total= findClinic.total\r\n            const ulimit=total*page\r\n           /*  if (total>(ulimit)){ //only load if we have not reached the total\r\n                alert(\"skip:\",ulimit )\r\n                console.log(\"skip:\",ulimit ) */\r\n            await setFacilities(findClinic.data)\r\n            console.log(findClinic.data)\r\n           /*  } */\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findClinic= await ClinicServ.find(\r\n                            {query: {\r\n                                client:state.ClientModule.selectedClient._id,\r\n                                    $limit:20,\r\n                                    $sort: {\r\n                                        createdAt: -1\r\n                                    }\r\n                                }})\r\n            \r\n                    await setFacilities(findClinic.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Clinic  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Clinic, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n           /*  useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                if (user){\r\n                    \r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ClinicServ.on('created', (obj)=>getFacilities(page))\r\n                ClinicServ.on('updated', (obj)=>getFacilities(page))\r\n                ClinicServ.on('patched', (obj)=>getFacilities(page))\r\n                ClinicServ.on('removed', (obj)=>getFacilities(page))\r\n\r\n                /* var options = {\r\n                    root: null,\r\n                    rootMargin: \"20px\",\r\n                    threshold: 1.0\r\n                 }; */\r\n                // initialize IntersectionObserver\r\n                // and attaching to Load More div\r\n                /*  const observer = new IntersectionObserver(handleObserver, options);\r\n                 if (loader.current) {\r\n                    observer.observe(loader.current)\r\n                 } */\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n           /*  useEffect(() => {\r\n                // here we simulate adding new posts to List\r\n                getFacilities()\r\n            }, [page]) */\r\n\r\n             // here we handle what happens when user scrolls to Load More div\r\n            // in this case we just update page variable\r\n                /* const handleObserver = (entities) => {\r\n                    const target = entities[0];\r\n                    if (target.isIntersecting) {   \r\n                        setPage((page) => page + 1) //load more \r\n                        \r\n                    }\r\n                } */\r\n\r\n    return (\r\n        <div>\r\n            <VideoConference/>\r\n            <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search documentation\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                   {/*  <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Clinics</span></div> */}\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\">\r\n                            <div className=\"button is-danger is-small mr-2\" onClick={handleNewPrescription}>Presciption</div>\r\n                                <div className=\"button is-success is-small\" onClick={handleNewDocument}>New Document</div>\r\n                                </div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                \r\n                <div className=\" pullup \">\r\n                                <div className=\" is-fullwidth vscrollable pr-1\">\r\n                                   \r\n                                        {facilities.map((Clinic, i)=>(\r\n\r\n                                            <div key={Clinic._id}  onClick={()=>handleRow(Clinic)}   className={Clinic._id===(selectedClinic?._id||null)?\"is-selected\":\"\"}>\r\n                                               <div className=\"card mt-1 hovercard\">\r\n                                                    <header className=\"card-header\" onClick={(Clinic)=>Clinic.show=!Clinic.show}>\r\n                                                        <div className=\"card-header-title\">\r\n                                                        <div className=\"docdate\">{formatDistanceToNowStrict(new Date(Clinic.createdAt),{addSuffix: true})} <br/><span>{format(new Date(Clinic.createdAt),'dd-MM-yy')}</span></div> {Clinic.documentname} by {Clinic.createdByname} at {Clinic.location},{Clinic.facilityname} \r\n                                                        <p className=\"right ml-2 mr-0\">{Clinic.status} </p> \r\n                                                        </div>\r\n                                                       {/*  <button className=\"card-header-icon\" aria-label=\"more options\">\r\n                                                        <span className=\"icon\">\r\n                                                            <i className=\"fas fa-angle-down\" aria-hidden=\"true\"></i>\r\n                                                        </span>\r\n                                                        </button> */}\r\n                                                    </header>\r\n                                                  {Clinic.documentname!==\"Prescription\" &&  <div className={Clinic.show?\"card-content p-1\":\"card-content p-1 is-hidden\"}>\r\n                                                        { Object.entries(Clinic.documentdetail).map(([keys,value],i)=>(\r\n                                                            <div className=\"field is-horizontal\"> \r\n                                                                    <div className=\"field-label\"> \r\n                                                                        <label className=\"label is-size-7\" key={i}>\r\n                                                                            {keys}:\r\n                                                                            </label>\r\n                                                                    </div>\r\n                                                                    <div className=\"field-body\"> \r\n                                                                        <div className=\"field\" >\r\n                                                                            {value}   \r\n                                                                        </div>  \r\n                                                                    </div>                                                 \r\n                                                            </div>\r\n                                                            ))\r\n                                                        }\r\n                                                </div>}\r\n                                                {Clinic.documentname===\"Prescription\" &&  \r\n                                                <div className={Clinic.show?\"card-content p-1\":\"card-content p-1 is-hidden\"}>\r\n                                                        \r\n                                                        {(Clinic.documentdetail.length>0) && <div>\r\n                                                            <label>Medications:</label>\r\n                                                        <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable mr-2\">\r\n                                                                <thead>\r\n                                                                    <tr>\r\n                                                                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                                                \r\n                                                                    <th><abbr title=\"Type\">Medication</abbr></th>\r\n                                                                    <th><abbr title=\"Destination\">Destination</abbr></th>\r\n                                                                    </tr>\r\n                                                                </thead>\r\n                                                                <tfoot>\r\n                                                                    \r\n                                                                </tfoot>\r\n                                                                <tbody>\r\n                                                                { Clinic.documentdetail.map((ProductEntry, i)=>(\r\n\r\n                                                                        <tr key={i}>\r\n                                                                        <th>{i+1}</th>\r\n                                                                        {/* <td>{ProductEntry.name}</td> */}\r\n                                                                        <td>{ProductEntry.medication}<br/>\r\n                                                                        <span className=\"help is-size-7\">{ProductEntry.instruction}</span></td> \r\n                                                                        <td>{ProductEntry.destination}</td>                                                                     \r\n                                                                        </tr>\r\n\r\n                                                                    ))}\r\n                                                                </tbody>\r\n                                                                </table>\r\n                                                                </div>}                                                   \r\n                                                            </div>}\r\n                                                    </div>                                           \r\n                                            </div>\r\n\r\n                                        ))}\r\n                                      {/* <!-- Add Ref to Load More div --> */}\r\n                                       {/*  <div className=\"loading\" ref={loader}>\r\n                                                <h2>Load More</h2>\r\n                                    </div> */}\r\n                                </div>\r\n                                    \r\n                </div> \r\n                <div className={`modal  ${showModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card \">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Document Class</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        <DocumentClassList standalone=\"true\" />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>\r\n                                <div className={`modal ${showPrescriptionModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card larger\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Prescription</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowPrescriptionModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        <Prescription standalone=\"true\" />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>                            \r\n        </div>\r\n    )\r\n}\r\n",{"ruleId":"524","severity":1,"message":"525","line":4,"column":10,"nodeType":"526","messageId":"527","endLine":4,"endColumn":17},{"ruleId":"524","severity":1,"message":"528","line":8,"column":9,"nodeType":"526","messageId":"527","endLine":8,"endColumn":14},{"ruleId":"524","severity":1,"message":"529","line":11,"column":25,"nodeType":"526","messageId":"527","endLine":11,"endColumn":43},{"ruleId":"524","severity":1,"message":"530","line":34,"column":18,"nodeType":"526","messageId":"527","endLine":34,"endColumn":25},{"ruleId":"524","severity":1,"message":"531","line":36,"column":11,"nodeType":"526","messageId":"527","endLine":36,"endColumn":17},{"ruleId":"524","severity":1,"message":"532","line":50,"column":11,"nodeType":"526","messageId":"527","endLine":50,"endColumn":26},{"ruleId":"524","severity":1,"message":"533","line":123,"column":19,"nodeType":"526","messageId":"527","endLine":123,"endColumn":25},{"ruleId":"534","severity":1,"message":"535","line":202,"column":15,"nodeType":"536","endLine":202,"endColumn":17,"suggestions":"537"},{"ruleId":"524","severity":1,"message":"538","line":1,"column":16,"nodeType":"526","messageId":"527","endLine":1,"endColumn":24},{"ruleId":"524","severity":1,"message":"539","line":1,"column":25,"nodeType":"526","messageId":"527","endLine":1,"endColumn":35},{"ruleId":"524","severity":1,"message":"540","line":1,"column":37,"nodeType":"526","messageId":"527","endLine":1,"endColumn":46},{"ruleId":"524","severity":1,"message":"541","line":1,"column":47,"nodeType":"526","messageId":"527","endLine":1,"endColumn":53},{"ruleId":"524","severity":1,"message":"542","line":2,"column":8,"nodeType":"526","messageId":"527","endLine":2,"endColumn":14},{"ruleId":"524","severity":1,"message":"528","line":3,"column":9,"nodeType":"526","messageId":"527","endLine":3,"endColumn":14},{"ruleId":"543","replacedBy":"544"},{"ruleId":"545","replacedBy":"546"},{"ruleId":"524","severity":1,"message":"547","line":43,"column":12,"nodeType":"526","messageId":"527","endLine":43,"endColumn":17},{"ruleId":"524","severity":1,"message":"548","line":45,"column":12,"nodeType":"526","messageId":"527","endLine":45,"endColumn":19},{"ruleId":"534","severity":1,"message":"549","line":317,"column":15,"nodeType":"536","endLine":317,"endColumn":17,"suggestions":"550"},{"ruleId":"524","severity":1,"message":"551","line":548,"column":53,"nodeType":"526","messageId":"527","endLine":548,"endColumn":59},{"ruleId":"524","severity":1,"message":"552","line":621,"column":11,"nodeType":"526","messageId":"527","endLine":621,"endColumn":23},{"ruleId":"543","replacedBy":"553"},{"ruleId":"545","replacedBy":"554"},{"ruleId":"524","severity":1,"message":"525","line":4,"column":10,"nodeType":"526","messageId":"527","endLine":4,"endColumn":17},{"ruleId":"524","severity":1,"message":"555","line":8,"column":23,"nodeType":"526","messageId":"527","endLine":8,"endColumn":35},{"ruleId":"524","severity":1,"message":"556","line":13,"column":5,"nodeType":"526","messageId":"527","endLine":13,"endColumn":11},{"ruleId":"534","severity":1,"message":"557","line":40,"column":12,"nodeType":"536","endLine":40,"endColumn":14,"suggestions":"558"},{"ruleId":"524","severity":1,"message":"559","line":205,"column":11,"nodeType":"526","messageId":"527","endLine":205,"endColumn":27},{"ruleId":"524","severity":1,"message":"541","line":1,"column":47,"nodeType":"526","messageId":"527","endLine":1,"endColumn":53},{"ruleId":"524","severity":1,"message":"560","line":3,"column":9,"nodeType":"526","messageId":"527","endLine":3,"endColumn":22},{"ruleId":"524","severity":1,"message":"561","line":5,"column":9,"nodeType":"526","messageId":"527","endLine":5,"endColumn":26},{"ruleId":"524","severity":1,"message":"562","line":11,"column":18,"nodeType":"526","messageId":"527","endLine":11,"endColumn":26},{"ruleId":"524","severity":1,"message":"547","line":24,"column":12,"nodeType":"526","messageId":"527","endLine":24,"endColumn":17},{"ruleId":"524","severity":1,"message":"563","line":25,"column":12,"nodeType":"526","messageId":"527","endLine":25,"endColumn":19},{"ruleId":"524","severity":1,"message":"548","line":26,"column":12,"nodeType":"526","messageId":"527","endLine":26,"endColumn":19},{"ruleId":"524","severity":1,"message":"564","line":38,"column":11,"nodeType":"526","messageId":"527","endLine":38,"endColumn":28},{"ruleId":"524","severity":1,"message":"547","line":244,"column":12,"nodeType":"526","messageId":"527","endLine":244,"endColumn":17},{"ruleId":"524","severity":1,"message":"563","line":245,"column":12,"nodeType":"526","messageId":"527","endLine":245,"endColumn":19},{"ruleId":"524","severity":1,"message":"548","line":246,"column":12,"nodeType":"526","messageId":"527","endLine":246,"endColumn":19},{"ruleId":"524","severity":1,"message":"564","line":258,"column":11,"nodeType":"526","messageId":"527","endLine":258,"endColumn":28},{"ruleId":"524","severity":1,"message":"547","line":481,"column":12,"nodeType":"526","messageId":"527","endLine":481,"endColumn":17},{"ruleId":"524","severity":1,"message":"563","line":482,"column":12,"nodeType":"526","messageId":"527","endLine":482,"endColumn":19},{"ruleId":"524","severity":1,"message":"548","line":483,"column":12,"nodeType":"526","messageId":"527","endLine":483,"endColumn":19},{"ruleId":"524","severity":1,"message":"564","line":495,"column":11,"nodeType":"526","messageId":"527","endLine":495,"endColumn":28},{"ruleId":"524","severity":1,"message":"547","line":700,"column":12,"nodeType":"526","messageId":"527","endLine":700,"endColumn":17},{"ruleId":"524","severity":1,"message":"563","line":701,"column":12,"nodeType":"526","messageId":"527","endLine":701,"endColumn":19},{"ruleId":"524","severity":1,"message":"548","line":702,"column":12,"nodeType":"526","messageId":"527","endLine":702,"endColumn":19},{"ruleId":"524","severity":1,"message":"564","line":714,"column":11,"nodeType":"526","messageId":"527","endLine":714,"endColumn":28},{"ruleId":"543","replacedBy":"565"},{"ruleId":"545","replacedBy":"566"},{"ruleId":"524","severity":1,"message":"567","line":133,"column":18,"nodeType":"526","messageId":"527","endLine":133,"endColumn":23},{"ruleId":"534","severity":1,"message":"568","line":154,"column":4,"nodeType":"536","endLine":154,"endColumn":6,"suggestions":"569"},{"ruleId":"524","severity":1,"message":"570","line":6,"column":7,"nodeType":"526","messageId":"527","endLine":6,"endColumn":12},{"ruleId":"524","severity":1,"message":"571","line":8,"column":7,"nodeType":"526","messageId":"527","endLine":8,"endColumn":10},{"ruleId":"524","severity":1,"message":"572","line":2,"column":40,"nodeType":"526","messageId":"527","endLine":2,"endColumn":44},{"ruleId":"524","severity":1,"message":"573","line":13,"column":12,"nodeType":"526","messageId":"527","endLine":13,"endColumn":16},{"ruleId":"524","severity":1,"message":"574","line":13,"column":17,"nodeType":"526","messageId":"527","endLine":13,"endColumn":24},{"ruleId":"524","severity":1,"message":"575","line":84,"column":16,"nodeType":"526","messageId":"527","endLine":84,"endColumn":20},{"ruleId":"534","severity":1,"message":"576","line":109,"column":7,"nodeType":"536","endLine":109,"endColumn":9,"suggestions":"577"},{"ruleId":"524","severity":1,"message":"578","line":8,"column":37,"nodeType":"526","messageId":"527","endLine":8,"endColumn":42},{"ruleId":"524","severity":1,"message":"551","line":8,"column":44,"nodeType":"526","messageId":"527","endLine":8,"endColumn":50},{"ruleId":"524","severity":1,"message":"579","line":11,"column":11,"nodeType":"526","messageId":"527","endLine":11,"endColumn":19},{"ruleId":"524","severity":1,"message":"572","line":2,"column":40,"nodeType":"526","messageId":"527","endLine":2,"endColumn":44},{"ruleId":"543","replacedBy":"580"},{"ruleId":"545","replacedBy":"581"},{"ruleId":"534","severity":1,"message":"582","line":275,"column":7,"nodeType":"536","endLine":275,"endColumn":9,"suggestions":"583"},{"ruleId":"524","severity":1,"message":"547","line":43,"column":12,"nodeType":"526","messageId":"527","endLine":43,"endColumn":17},{"ruleId":"524","severity":1,"message":"548","line":45,"column":12,"nodeType":"526","messageId":"527","endLine":45,"endColumn":19},{"ruleId":"534","severity":1,"message":"584","line":416,"column":15,"nodeType":"536","endLine":416,"endColumn":17,"suggestions":"585"},{"ruleId":"534","severity":1,"message":"586","line":423,"column":12,"nodeType":"536","endLine":423,"endColumn":45,"suggestions":"587"},{"ruleId":"534","severity":1,"message":"586","line":544,"column":11,"nodeType":"536","endLine":544,"endColumn":22,"suggestions":"588"},{"ruleId":"524","severity":1,"message":"551","line":666,"column":53,"nodeType":"526","messageId":"527","endLine":666,"endColumn":59},{"ruleId":"534","severity":1,"message":"589","line":706,"column":11,"nodeType":"536","endLine":706,"endColumn":13,"suggestions":"590"},{"ruleId":"524","severity":1,"message":"552","line":729,"column":11,"nodeType":"526","messageId":"527","endLine":729,"endColumn":23},{"ruleId":"543","replacedBy":"591"},{"ruleId":"545","replacedBy":"592"},{"ruleId":"524","severity":1,"message":"593","line":2,"column":9,"nodeType":"526","messageId":"527","endLine":2,"endColumn":14},{"ruleId":"524","severity":1,"message":"594","line":2,"column":16,"nodeType":"526","messageId":"527","endLine":2,"endColumn":22},{"ruleId":"524","severity":1,"message":"572","line":2,"column":40,"nodeType":"526","messageId":"527","endLine":2,"endColumn":44},{"ruleId":"524","severity":1,"message":"595","line":2,"column":46,"nodeType":"526","messageId":"527","endLine":2,"endColumn":53},{"ruleId":"524","severity":1,"message":"547","line":42,"column":12,"nodeType":"526","messageId":"527","endLine":42,"endColumn":17},{"ruleId":"524","severity":1,"message":"563","line":43,"column":12,"nodeType":"526","messageId":"527","endLine":43,"endColumn":19},{"ruleId":"524","severity":1,"message":"548","line":44,"column":12,"nodeType":"526","messageId":"527","endLine":44,"endColumn":19},{"ruleId":"524","severity":1,"message":"564","line":55,"column":11,"nodeType":"526","messageId":"527","endLine":55,"endColumn":28},{"ruleId":"524","severity":1,"message":"596","line":506,"column":14,"nodeType":"526","messageId":"527","endLine":506,"endColumn":19},{"ruleId":"534","severity":1,"message":"597","line":630,"column":15,"nodeType":"536","endLine":630,"endColumn":17,"suggestions":"598"},{"ruleId":"524","severity":1,"message":"599","line":716,"column":11,"nodeType":"526","messageId":"527","endLine":716,"endColumn":15},{"ruleId":"524","severity":1,"message":"600","line":716,"column":17,"nodeType":"526","messageId":"527","endLine":716,"endColumn":20},{"ruleId":"524","severity":1,"message":"547","line":717,"column":12,"nodeType":"526","messageId":"527","endLine":717,"endColumn":17},{"ruleId":"524","severity":1,"message":"601","line":717,"column":19,"nodeType":"526","messageId":"527","endLine":717,"endColumn":27},{"ruleId":"524","severity":1,"message":"602","line":729,"column":11,"nodeType":"526","messageId":"527","endLine":729,"endColumn":17},{"ruleId":"524","severity":1,"message":"551","line":1061,"column":53,"nodeType":"526","messageId":"527","endLine":1061,"endColumn":59},{"ruleId":"524","severity":1,"message":"552","line":1199,"column":11,"nodeType":"526","messageId":"527","endLine":1199,"endColumn":23},{"ruleId":"524","severity":1,"message":"572","line":2,"column":40,"nodeType":"526","messageId":"527","endLine":2,"endColumn":44},{"ruleId":"524","severity":1,"message":"603","line":12,"column":9,"nodeType":"526","messageId":"527","endLine":12,"endColumn":20},{"ruleId":"524","severity":1,"message":"562","line":15,"column":18,"nodeType":"526","messageId":"527","endLine":15,"endColumn":26},{"ruleId":"534","severity":1,"message":"604","line":31,"column":12,"nodeType":"536","endLine":31,"endColumn":14,"suggestions":"605"},{"ruleId":"524","severity":1,"message":"572","line":2,"column":40,"nodeType":"526","messageId":"527","endLine":2,"endColumn":44},{"ruleId":"524","severity":1,"message":"603","line":11,"column":9,"nodeType":"526","messageId":"527","endLine":11,"endColumn":20},{"ruleId":"524","severity":1,"message":"562","line":14,"column":18,"nodeType":"526","messageId":"527","endLine":14,"endColumn":26},{"ruleId":"534","severity":1,"message":"606","line":30,"column":12,"nodeType":"536","endLine":30,"endColumn":14,"suggestions":"607"},{"ruleId":"524","severity":1,"message":"547","line":43,"column":12,"nodeType":"526","messageId":"527","endLine":43,"endColumn":17},{"ruleId":"524","severity":1,"message":"548","line":45,"column":12,"nodeType":"526","messageId":"527","endLine":45,"endColumn":19},{"ruleId":"534","severity":1,"message":"608","line":389,"column":15,"nodeType":"536","endLine":389,"endColumn":17,"suggestions":"609"},{"ruleId":"524","severity":1,"message":"551","line":620,"column":53,"nodeType":"526","messageId":"527","endLine":620,"endColumn":59},{"ruleId":"524","severity":1,"message":"547","line":44,"column":12,"nodeType":"526","messageId":"527","endLine":44,"endColumn":17},{"ruleId":"524","severity":1,"message":"548","line":46,"column":12,"nodeType":"526","messageId":"527","endLine":46,"endColumn":19},{"ruleId":"610","severity":1,"message":"611","line":537,"column":21,"nodeType":"612","messageId":"613","endLine":537,"endColumn":36},{"ruleId":"534","severity":1,"message":"614","line":555,"column":15,"nodeType":"536","endLine":555,"endColumn":17,"suggestions":"615"},{"ruleId":"534","severity":1,"message":"586","line":563,"column":16,"nodeType":"536","endLine":563,"endColumn":49,"suggestions":"616"},{"ruleId":"524","severity":1,"message":"617","line":654,"column":11,"nodeType":"526","messageId":"527","endLine":654,"endColumn":21},{"ruleId":"524","severity":1,"message":"551","line":862,"column":53,"nodeType":"526","messageId":"527","endLine":862,"endColumn":59},{"ruleId":"524","severity":1,"message":"547","line":43,"column":12,"nodeType":"526","messageId":"527","endLine":43,"endColumn":17},{"ruleId":"524","severity":1,"message":"563","line":44,"column":12,"nodeType":"526","messageId":"527","endLine":44,"endColumn":19},{"ruleId":"524","severity":1,"message":"548","line":45,"column":12,"nodeType":"526","messageId":"527","endLine":45,"endColumn":19},{"ruleId":"524","severity":1,"message":"564","line":56,"column":11,"nodeType":"526","messageId":"527","endLine":56,"endColumn":28},{"ruleId":"534","severity":1,"message":"618","line":392,"column":15,"nodeType":"536","endLine":392,"endColumn":17,"suggestions":"619"},{"ruleId":"524","severity":1,"message":"551","line":624,"column":53,"nodeType":"526","messageId":"527","endLine":624,"endColumn":59},{"ruleId":"524","severity":1,"message":"552","line":697,"column":11,"nodeType":"526","messageId":"527","endLine":697,"endColumn":23},{"ruleId":"524","severity":1,"message":"538","line":1,"column":16,"nodeType":"526","messageId":"527","endLine":1,"endColumn":24},{"ruleId":"524","severity":1,"message":"540","line":1,"column":25,"nodeType":"526","messageId":"527","endLine":1,"endColumn":34},{"ruleId":"524","severity":1,"message":"620","line":2,"column":8,"nodeType":"526","messageId":"527","endLine":2,"endColumn":13},{"ruleId":"524","severity":1,"message":"621","line":2,"column":17,"nodeType":"526","messageId":"527","endLine":2,"endColumn":26},{"ruleId":"524","severity":1,"message":"603","line":3,"column":9,"nodeType":"526","messageId":"527","endLine":3,"endColumn":20},{"ruleId":"524","severity":1,"message":"622","line":8,"column":11,"nodeType":"526","messageId":"527","endLine":8,"endColumn":27},{"ruleId":"524","severity":1,"message":"541","line":1,"column":47,"nodeType":"526","messageId":"527","endLine":1,"endColumn":53},{"ruleId":"524","severity":1,"message":"542","line":2,"column":8,"nodeType":"526","messageId":"527","endLine":2,"endColumn":14},{"ruleId":"524","severity":1,"message":"560","line":3,"column":9,"nodeType":"526","messageId":"527","endLine":3,"endColumn":22},{"ruleId":"524","severity":1,"message":"525","line":4,"column":10,"nodeType":"526","messageId":"527","endLine":4,"endColumn":17},{"ruleId":"524","severity":1,"message":"603","line":6,"column":9,"nodeType":"526","messageId":"527","endLine":6,"endColumn":20},{"ruleId":"524","severity":1,"message":"528","line":7,"column":9,"nodeType":"526","messageId":"527","endLine":7,"endColumn":14},{"ruleId":"524","severity":1,"message":"623","line":9,"column":8,"nodeType":"526","messageId":"527","endLine":9,"endColumn":23},{"ruleId":"524","severity":1,"message":"624","line":24,"column":9,"nodeType":"526","messageId":"527","endLine":24,"endColumn":14},{"ruleId":"524","severity":1,"message":"625","line":25,"column":9,"nodeType":"526","messageId":"527","endLine":25,"endColumn":14},{"ruleId":"524","severity":1,"message":"626","line":28,"column":9,"nodeType":"526","messageId":"527","endLine":28,"endColumn":17},{"ruleId":"524","severity":1,"message":"627","line":29,"column":9,"nodeType":"526","messageId":"527","endLine":29,"endColumn":20},{"ruleId":"524","severity":1,"message":"628","line":30,"column":9,"nodeType":"526","messageId":"527","endLine":30,"endColumn":18},{"ruleId":"524","severity":1,"message":"629","line":31,"column":9,"nodeType":"526","messageId":"527","endLine":31,"endColumn":25},{"ruleId":"524","severity":1,"message":"630","line":37,"column":9,"nodeType":"526","messageId":"527","endLine":37,"endColumn":12},{"ruleId":"524","severity":1,"message":"631","line":38,"column":9,"nodeType":"526","messageId":"527","endLine":38,"endColumn":16},{"ruleId":"524","severity":1,"message":"632","line":39,"column":9,"nodeType":"526","messageId":"527","endLine":39,"endColumn":13},{"ruleId":"524","severity":1,"message":"633","line":40,"column":9,"nodeType":"526","messageId":"527","endLine":40,"endColumn":12},{"ruleId":"524","severity":1,"message":"634","line":42,"column":9,"nodeType":"526","messageId":"527","endLine":42,"endColumn":16},{"ruleId":"524","severity":1,"message":"635","line":45,"column":9,"nodeType":"526","messageId":"527","endLine":45,"endColumn":20},{"ruleId":"524","severity":1,"message":"636","line":50,"column":9,"nodeType":"526","messageId":"527","endLine":50,"endColumn":20},{"ruleId":"524","severity":1,"message":"637","line":52,"column":9,"nodeType":"526","messageId":"527","endLine":52,"endColumn":22},{"ruleId":"524","severity":1,"message":"638","line":54,"column":9,"nodeType":"526","messageId":"527","endLine":54,"endColumn":23},{"ruleId":"524","severity":1,"message":"639","line":56,"column":9,"nodeType":"526","messageId":"527","endLine":56,"endColumn":19},{"ruleId":"534","severity":1,"message":"640","line":66,"column":5,"nodeType":"526","endLine":66,"endColumn":14,"suggestions":"641"},{"ruleId":"642","severity":1,"message":"643","line":82,"column":30,"nodeType":"644","endLine":82,"endColumn":114},{"ruleId":"524","severity":1,"message":"540","line":1,"column":37,"nodeType":"526","messageId":"527","endLine":1,"endColumn":46},{"ruleId":"524","severity":1,"message":"541","line":1,"column":47,"nodeType":"526","messageId":"527","endLine":1,"endColumn":53},{"ruleId":"524","severity":1,"message":"645","line":11,"column":20,"nodeType":"526","messageId":"527","endLine":11,"endColumn":31},{"ruleId":"524","severity":1,"message":"574","line":16,"column":15,"nodeType":"526","messageId":"527","endLine":16,"endColumn":22},{"ruleId":"524","severity":1,"message":"593","line":2,"column":9,"nodeType":"526","messageId":"527","endLine":2,"endColumn":14},{"ruleId":"524","severity":1,"message":"594","line":2,"column":16,"nodeType":"526","messageId":"527","endLine":2,"endColumn":22},{"ruleId":"524","severity":1,"message":"572","line":2,"column":40,"nodeType":"526","messageId":"527","endLine":2,"endColumn":44},{"ruleId":"524","severity":1,"message":"595","line":2,"column":46,"nodeType":"526","messageId":"527","endLine":2,"endColumn":53},{"ruleId":"524","severity":1,"message":"646","line":18,"column":12,"nodeType":"526","messageId":"527","endLine":18,"endColumn":31},{"ruleId":"524","severity":1,"message":"647","line":18,"column":32,"nodeType":"526","messageId":"527","endLine":18,"endColumn":54},{"ruleId":"524","severity":1,"message":"562","line":43,"column":18,"nodeType":"526","messageId":"527","endLine":43,"endColumn":26},{"ruleId":"524","severity":1,"message":"648","line":44,"column":36,"nodeType":"526","messageId":"527","endLine":44,"endColumn":44},{"ruleId":"524","severity":1,"message":"547","line":45,"column":12,"nodeType":"526","messageId":"527","endLine":45,"endColumn":17},{"ruleId":"524","severity":1,"message":"548","line":47,"column":12,"nodeType":"526","messageId":"527","endLine":47,"endColumn":19},{"ruleId":"524","severity":1,"message":"649","line":49,"column":17,"nodeType":"526","messageId":"527","endLine":49,"endColumn":24},{"ruleId":"524","severity":1,"message":"650","line":57,"column":12,"nodeType":"526","messageId":"527","endLine":57,"endColumn":26},{"ruleId":"524","severity":1,"message":"651","line":57,"column":27,"nodeType":"526","messageId":"527","endLine":57,"endColumn":44},{"ruleId":"524","severity":1,"message":"646","line":58,"column":12,"nodeType":"526","messageId":"527","endLine":58,"endColumn":31},{"ruleId":"524","severity":1,"message":"647","line":58,"column":32,"nodeType":"526","messageId":"527","endLine":58,"endColumn":54},{"ruleId":"524","severity":1,"message":"596","line":359,"column":14,"nodeType":"526","messageId":"527","endLine":359,"endColumn":19},{"ruleId":"534","severity":1,"message":"597","line":483,"column":15,"nodeType":"536","endLine":483,"endColumn":17,"suggestions":"652"},{"ruleId":"524","severity":1,"message":"599","line":575,"column":11,"nodeType":"526","messageId":"527","endLine":575,"endColumn":15},{"ruleId":"524","severity":1,"message":"600","line":575,"column":17,"nodeType":"526","messageId":"527","endLine":575,"endColumn":20},{"ruleId":"524","severity":1,"message":"547","line":576,"column":12,"nodeType":"526","messageId":"527","endLine":576,"endColumn":17},{"ruleId":"524","severity":1,"message":"601","line":576,"column":19,"nodeType":"526","messageId":"527","endLine":576,"endColumn":27},{"ruleId":"524","severity":1,"message":"650","line":584,"column":12,"nodeType":"526","messageId":"527","endLine":584,"endColumn":26},{"ruleId":"524","severity":1,"message":"646","line":585,"column":12,"nodeType":"526","messageId":"527","endLine":585,"endColumn":31},{"ruleId":"524","severity":1,"message":"647","line":585,"column":32,"nodeType":"526","messageId":"527","endLine":585,"endColumn":54},{"ruleId":"524","severity":1,"message":"551","line":933,"column":53,"nodeType":"526","messageId":"527","endLine":933,"endColumn":59},{"ruleId":"524","severity":1,"message":"650","line":946,"column":12,"nodeType":"526","messageId":"527","endLine":946,"endColumn":26},{"ruleId":"524","severity":1,"message":"651","line":946,"column":27,"nodeType":"526","messageId":"527","endLine":946,"endColumn":44},{"ruleId":"524","severity":1,"message":"646","line":947,"column":12,"nodeType":"526","messageId":"527","endLine":947,"endColumn":31},{"ruleId":"524","severity":1,"message":"647","line":947,"column":32,"nodeType":"526","messageId":"527","endLine":947,"endColumn":54},{"ruleId":"524","severity":1,"message":"552","line":1073,"column":11,"nodeType":"526","messageId":"527","endLine":1073,"endColumn":23},{"ruleId":"524","severity":1,"message":"573","line":1485,"column":11,"nodeType":"526","messageId":"527","endLine":1485,"endColumn":15},{"ruleId":"524","severity":1,"message":"653","line":1486,"column":11,"nodeType":"526","messageId":"527","endLine":1486,"endColumn":16},{"ruleId":"524","severity":1,"message":"596","line":1531,"column":15,"nodeType":"526","messageId":"527","endLine":1531,"endColumn":20},{"ruleId":"524","severity":1,"message":"559","line":1598,"column":11,"nodeType":"526","messageId":"527","endLine":1598,"endColumn":27},{"ruleId":"543","replacedBy":"654"},{"ruleId":"545","replacedBy":"655"},{"ruleId":"524","severity":1,"message":"547","line":43,"column":12,"nodeType":"526","messageId":"527","endLine":43,"endColumn":17},{"ruleId":"524","severity":1,"message":"548","line":45,"column":12,"nodeType":"526","messageId":"527","endLine":45,"endColumn":19},{"ruleId":"534","severity":1,"message":"656","line":392,"column":15,"nodeType":"536","endLine":392,"endColumn":17,"suggestions":"657"},{"ruleId":"524","severity":1,"message":"551","line":623,"column":53,"nodeType":"526","messageId":"527","endLine":623,"endColumn":59},{"ruleId":"524","severity":1,"message":"552","line":696,"column":11,"nodeType":"526","messageId":"527","endLine":696,"endColumn":23},{"ruleId":"524","severity":1,"message":"547","line":43,"column":12,"nodeType":"526","messageId":"527","endLine":43,"endColumn":17},{"ruleId":"524","severity":1,"message":"548","line":45,"column":12,"nodeType":"526","messageId":"527","endLine":45,"endColumn":19},{"ruleId":"534","severity":1,"message":"584","line":416,"column":15,"nodeType":"536","endLine":416,"endColumn":17,"suggestions":"658"},{"ruleId":"534","severity":1,"message":"586","line":423,"column":12,"nodeType":"536","endLine":423,"endColumn":45,"suggestions":"659"},{"ruleId":"534","severity":1,"message":"586","line":546,"column":11,"nodeType":"536","endLine":546,"endColumn":22,"suggestions":"660"},{"ruleId":"524","severity":1,"message":"551","line":668,"column":53,"nodeType":"526","messageId":"527","endLine":668,"endColumn":59},{"ruleId":"534","severity":1,"message":"589","line":708,"column":11,"nodeType":"536","endLine":708,"endColumn":13,"suggestions":"661"},{"ruleId":"524","severity":1,"message":"552","line":731,"column":11,"nodeType":"526","messageId":"527","endLine":731,"endColumn":23},{"ruleId":"524","severity":1,"message":"538","line":1,"column":16,"nodeType":"526","messageId":"527","endLine":1,"endColumn":24},{"ruleId":"524","severity":1,"message":"540","line":1,"column":25,"nodeType":"526","messageId":"527","endLine":1,"endColumn":34},{"ruleId":"524","severity":1,"message":"620","line":2,"column":8,"nodeType":"526","messageId":"527","endLine":2,"endColumn":13},{"ruleId":"524","severity":1,"message":"621","line":2,"column":17,"nodeType":"526","messageId":"527","endLine":2,"endColumn":26},{"ruleId":"524","severity":1,"message":"603","line":3,"column":9,"nodeType":"526","messageId":"527","endLine":3,"endColumn":20},{"ruleId":"524","severity":1,"message":"622","line":8,"column":11,"nodeType":"526","messageId":"527","endLine":8,"endColumn":27},{"ruleId":"524","severity":1,"message":"547","line":45,"column":12,"nodeType":"526","messageId":"527","endLine":45,"endColumn":17},{"ruleId":"524","severity":1,"message":"548","line":47,"column":12,"nodeType":"526","messageId":"527","endLine":47,"endColumn":19},{"ruleId":"524","severity":1,"message":"662","line":63,"column":12,"nodeType":"526","messageId":"527","endLine":63,"endColumn":23},{"ruleId":"524","severity":1,"message":"663","line":74,"column":11,"nodeType":"526","messageId":"527","endLine":74,"endColumn":18},{"ruleId":"524","severity":1,"message":"664","line":76,"column":9,"nodeType":"526","messageId":"527","endLine":76,"endColumn":19},{"ruleId":"534","severity":1,"message":"665","line":231,"column":7,"nodeType":"536","endLine":231,"endColumn":13,"suggestions":"666"},{"ruleId":"534","severity":1,"message":"667","line":338,"column":21,"nodeType":"668","endLine":338,"endColumn":42},{"ruleId":"610","severity":1,"message":"611","line":682,"column":21,"nodeType":"612","messageId":"613","endLine":682,"endColumn":36},{"ruleId":"534","severity":1,"message":"614","line":700,"column":15,"nodeType":"536","endLine":700,"endColumn":17,"suggestions":"669"},{"ruleId":"534","severity":1,"message":"586","line":708,"column":16,"nodeType":"536","endLine":708,"endColumn":49,"suggestions":"670"},{"ruleId":"524","severity":1,"message":"617","line":799,"column":11,"nodeType":"526","messageId":"527","endLine":799,"endColumn":21},{"ruleId":"524","severity":1,"message":"551","line":1007,"column":53,"nodeType":"526","messageId":"527","endLine":1007,"endColumn":59},{"ruleId":"524","severity":1,"message":"559","line":1388,"column":11,"nodeType":"526","messageId":"527","endLine":1388,"endColumn":27},{"ruleId":"524","severity":1,"message":"671","line":9,"column":17,"nodeType":"526","messageId":"527","endLine":9,"endColumn":42},{"ruleId":"524","severity":1,"message":"547","line":46,"column":12,"nodeType":"526","messageId":"527","endLine":46,"endColumn":17},{"ruleId":"524","severity":1,"message":"548","line":48,"column":12,"nodeType":"526","messageId":"527","endLine":48,"endColumn":19},{"ruleId":"524","severity":1,"message":"672","line":51,"column":11,"nodeType":"526","messageId":"527","endLine":51,"endColumn":27},{"ruleId":"524","severity":1,"message":"673","line":59,"column":12,"nodeType":"526","messageId":"527","endLine":59,"endColumn":21},{"ruleId":"524","severity":1,"message":"674","line":62,"column":12,"nodeType":"526","messageId":"527","endLine":62,"endColumn":16},{"ruleId":"524","severity":1,"message":"675","line":72,"column":12,"nodeType":"526","messageId":"527","endLine":72,"endColumn":24},{"ruleId":"524","severity":1,"message":"676","line":72,"column":25,"nodeType":"526","messageId":"527","endLine":72,"endColumn":40},{"ruleId":"524","severity":1,"message":"677","line":145,"column":11,"nodeType":"526","messageId":"527","endLine":145,"endColumn":27},{"ruleId":"524","severity":1,"message":"678","line":189,"column":11,"nodeType":"526","messageId":"527","endLine":189,"endColumn":20},{"ruleId":"534","severity":1,"message":"679","line":260,"column":8,"nodeType":"536","endLine":260,"endColumn":10,"suggestions":"680"},{"ruleId":"524","severity":1,"message":"596","line":454,"column":14,"nodeType":"526","messageId":"527","endLine":454,"endColumn":19},{"ruleId":"534","severity":1,"message":"681","line":518,"column":15,"nodeType":"536","endLine":518,"endColumn":17,"suggestions":"682"},{"ruleId":"524","severity":1,"message":"617","line":608,"column":11,"nodeType":"526","messageId":"527","endLine":608,"endColumn":21},{"ruleId":"524","severity":1,"message":"551","line":816,"column":53,"nodeType":"526","messageId":"527","endLine":816,"endColumn":59},{"ruleId":"524","severity":1,"message":"683","line":1110,"column":12,"nodeType":"526","messageId":"527","endLine":1110,"endColumn":24},{"ruleId":"524","severity":1,"message":"684","line":1131,"column":11,"nodeType":"526","messageId":"527","endLine":1131,"endColumn":21},{"ruleId":"524","severity":1,"message":"559","line":1204,"column":11,"nodeType":"526","messageId":"527","endLine":1204,"endColumn":27},{"ruleId":"524","severity":1,"message":"685","line":1207,"column":11,"nodeType":"526","messageId":"527","endLine":1207,"endColumn":27},{"ruleId":"534","severity":1,"message":"686","line":1216,"column":8,"nodeType":"536","endLine":1216,"endColumn":15,"suggestions":"687"},{"ruleId":"688","severity":1,"message":"689","line":1254,"column":75,"nodeType":"690","endLine":1254,"endColumn":79},{"ruleId":"524","severity":1,"message":"547","line":43,"column":12,"nodeType":"526","messageId":"527","endLine":43,"endColumn":17},{"ruleId":"524","severity":1,"message":"548","line":45,"column":12,"nodeType":"526","messageId":"527","endLine":45,"endColumn":19},{"ruleId":"534","severity":1,"message":"691","line":392,"column":15,"nodeType":"536","endLine":392,"endColumn":17,"suggestions":"692"},{"ruleId":"524","severity":1,"message":"551","line":623,"column":53,"nodeType":"526","messageId":"527","endLine":623,"endColumn":59},{"ruleId":"524","severity":1,"message":"552","line":696,"column":11,"nodeType":"526","messageId":"527","endLine":696,"endColumn":23},{"ruleId":"534","severity":1,"message":"693","line":81,"column":7,"nodeType":"536","endLine":81,"endColumn":13,"suggestions":"694"},{"ruleId":"534","severity":1,"message":"695","line":389,"column":15,"nodeType":"536","endLine":389,"endColumn":17,"suggestions":"696"},{"ruleId":"524","severity":1,"message":"541","line":1,"column":47,"nodeType":"526","messageId":"527","endLine":1,"endColumn":53},{"ruleId":"524","severity":1,"message":"525","line":4,"column":10,"nodeType":"526","messageId":"527","endLine":4,"endColumn":17},{"ruleId":"524","severity":1,"message":"528","line":7,"column":9,"nodeType":"526","messageId":"527","endLine":7,"endColumn":14},{"ruleId":"524","severity":1,"message":"671","line":8,"column":17,"nodeType":"526","messageId":"527","endLine":8,"endColumn":42},{"ruleId":"524","severity":1,"message":"547","line":31,"column":12,"nodeType":"526","messageId":"527","endLine":31,"endColumn":17},{"ruleId":"524","severity":1,"message":"601","line":31,"column":19,"nodeType":"526","messageId":"527","endLine":31,"endColumn":27},{"ruleId":"524","severity":1,"message":"697","line":39,"column":11,"nodeType":"526","messageId":"527","endLine":39,"endColumn":21},{"ruleId":"534","severity":1,"message":"681","line":80,"column":12,"nodeType":"536","endLine":80,"endColumn":14,"suggestions":"698"},{"ruleId":"524","severity":1,"message":"699","line":82,"column":12,"nodeType":"526","messageId":"527","endLine":82,"endColumn":21},{"ruleId":"524","severity":1,"message":"697","line":143,"column":12,"nodeType":"526","messageId":"527","endLine":143,"endColumn":22},{"ruleId":"524","severity":1,"message":"532","line":169,"column":11,"nodeType":"526","messageId":"527","endLine":169,"endColumn":26},{"ruleId":"524","severity":1,"message":"596","line":204,"column":14,"nodeType":"526","messageId":"527","endLine":204,"endColumn":19},{"ruleId":"524","severity":1,"message":"700","line":322,"column":12,"nodeType":"526","messageId":"527","endLine":322,"endColumn":24},{"ruleId":"524","severity":1,"message":"701","line":333,"column":6,"nodeType":"526","messageId":"527","endLine":333,"endColumn":18},{"ruleId":"524","severity":1,"message":"617","line":353,"column":11,"nodeType":"526","messageId":"527","endLine":353,"endColumn":21},{"ruleId":"534","severity":1,"message":"702","line":375,"column":8,"nodeType":"536","endLine":375,"endColumn":10,"suggestions":"703"},{"ruleId":"534","severity":1,"message":"704","line":400,"column":7,"nodeType":"536","endLine":400,"endColumn":9,"suggestions":"705"},{"ruleId":"524","severity":1,"message":"578","line":7,"column":37,"nodeType":"526","messageId":"527","endLine":7,"endColumn":42},{"ruleId":"524","severity":1,"message":"551","line":7,"column":44,"nodeType":"526","messageId":"527","endLine":7,"endColumn":50},{"ruleId":"524","severity":1,"message":"653","line":10,"column":12,"nodeType":"526","messageId":"527","endLine":10,"endColumn":17},{"ruleId":"534","severity":1,"message":"582","line":283,"column":7,"nodeType":"536","endLine":283,"endColumn":9,"suggestions":"706"},{"ruleId":"524","severity":1,"message":"525","line":4,"column":10,"nodeType":"526","messageId":"527","endLine":4,"endColumn":17},{"ruleId":"524","severity":1,"message":"707","line":8,"column":9,"nodeType":"526","messageId":"527","endLine":8,"endColumn":22},{"ruleId":"524","severity":1,"message":"548","line":17,"column":13,"nodeType":"526","messageId":"527","endLine":17,"endColumn":20},{"ruleId":"524","severity":1,"message":"672","line":20,"column":12,"nodeType":"526","messageId":"527","endLine":20,"endColumn":28},{"ruleId":"524","severity":1,"message":"708","line":29,"column":13,"nodeType":"526","messageId":"527","endLine":29,"endColumn":20},{"ruleId":"524","severity":1,"message":"662","line":34,"column":13,"nodeType":"526","messageId":"527","endLine":34,"endColumn":24},{"ruleId":"524","severity":1,"message":"663","line":48,"column":12,"nodeType":"526","messageId":"527","endLine":48,"endColumn":19},{"ruleId":"524","severity":1,"message":"664","line":50,"column":10,"nodeType":"526","messageId":"527","endLine":50,"endColumn":20},{"ruleId":"534","severity":1,"message":"665","line":319,"column":8,"nodeType":"536","endLine":319,"endColumn":14,"suggestions":"709"},{"ruleId":"524","severity":1,"message":"678","line":321,"column":12,"nodeType":"526","messageId":"527","endLine":321,"endColumn":21},{"ruleId":"534","severity":1,"message":"710","line":480,"column":8,"nodeType":"536","endLine":480,"endColumn":20,"suggestions":"711"},{"ruleId":"534","severity":1,"message":"667","line":495,"column":21,"nodeType":"668","endLine":495,"endColumn":42},{"ruleId":"524","severity":1,"message":"683","line":746,"column":12,"nodeType":"526","messageId":"527","endLine":746,"endColumn":24},{"ruleId":"524","severity":1,"message":"559","line":831,"column":11,"nodeType":"526","messageId":"527","endLine":831,"endColumn":27},{"ruleId":"524","severity":1,"message":"685","line":834,"column":11,"nodeType":"526","messageId":"527","endLine":834,"endColumn":27},{"ruleId":"524","severity":1,"message":"525","line":4,"column":10,"nodeType":"526","messageId":"527","endLine":4,"endColumn":17},{"ruleId":"524","severity":1,"message":"528","line":8,"column":9,"nodeType":"526","messageId":"527","endLine":8,"endColumn":14},{"ruleId":"524","severity":1,"message":"529","line":11,"column":25,"nodeType":"526","messageId":"527","endLine":11,"endColumn":43},{"ruleId":"524","severity":1,"message":"530","line":34,"column":18,"nodeType":"526","messageId":"527","endLine":34,"endColumn":25},{"ruleId":"524","severity":1,"message":"531","line":36,"column":11,"nodeType":"526","messageId":"527","endLine":36,"endColumn":17},{"ruleId":"524","severity":1,"message":"532","line":50,"column":11,"nodeType":"526","messageId":"527","endLine":50,"endColumn":26},{"ruleId":"524","severity":1,"message":"533","line":123,"column":19,"nodeType":"526","messageId":"527","endLine":123,"endColumn":25},{"ruleId":"534","severity":1,"message":"535","line":202,"column":15,"nodeType":"536","endLine":202,"endColumn":17,"suggestions":"712"},"no-unused-vars","'useForm' is defined but never used.","Identifier","unusedVar","'toast' is defined but never used.","'PrescriptionCreate' is defined but never used.","'setPage' is assigned a value but never used.","'loader' is assigned a value but never used.","'handleCreateNew' is assigned a value but never used.","'ulimit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'ClinicServ', 'getFacilities', 'page', and 'user'. Either include them or remove the dependency array.","ArrayExpression",["713"],"'useState' is defined but never used.","'useContext' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'client' is defined but never used.","no-native-reassign",["714"],"no-negated-in-lhs",["715"],"'error' is assigned a value but never used.","'message' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'DocumentClassServ' and 'getFacilities'. Either include them or remove the dependency array.",["716"],"'errors' is assigned a value but never used.","'handleDelete' is assigned a value but never used.",["714"],["715"],"'ClientDetail' is defined but never used.","'random' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleChangeClient' and 'state.ClientModule.selectedClient'. Either include them or remove the dependency array.",["717"],"'handleAddproduct' is assigned a value but never used.","'DebounceInput' is defined but never used.","'DocumentClassList' is defined but never used.","'setState' is assigned a value but never used.","'success' is assigned a value but never used.","'getSearchfacility' is assigned a value but never used.",["714"],["715"],"'user1' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setUser' and 'user'. Either include them or remove the dependency array.",["718"],"'herok' is assigned a value but never used.","'API' is assigned a value but never used.","'Link' is defined but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","'resp' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'reAuth', 'setUser', and 'user'. Either include them or remove the dependency array.",["719"],"'watch' is assigned a value but never used.","'userServ' is assigned a value but never used.",["714"],["715"],"React Hook useEffect has missing dependencies: 'facilityServ' and 'getFacilities'. Either include them or remove the dependency array.",["720"],"React Hook useEffect has missing dependencies: 'InventoryServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["721"],"React Hook useEffect has a missing dependency: 'getFacilities'. Either include it or remove the dependency array.",["722"],["723"],"React Hook useEffect has a missing dependency: 'handleSetPrice'. Either include it or remove the dependency array.",["724"],["714"],["715"],"'Route' is defined but never used.","'Switch' is defined but never used.","'NavLink' is defined but never used.","'field' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ClientServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["725"],"'path' is assigned a value but never used.","'url' is assigned a value but never used.","'setError' is assigned a value but never used.","'client' is assigned a value but never used.","'UserContext' is defined but never used.","React Hook useEffect has missing dependencies: 'handleChangeStore' and 'selectedStore'. Either include them or remove the dependency array.",["726"],"React Hook useEffect has missing dependencies: 'handleChangeClinic' and 'selectedClinic'. Either include them or remove the dependency array.",["727"],"React Hook useEffect has missing dependencies: 'LocationServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["728"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","React Hook useEffect has missing dependencies: 'ProductEntryServ', 'getFacilities', and 'state.StoreModule.selectedStore'. Either include them or remove the dependency array.",["729"],["730"],"'handleEdit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ProductServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["731"],"'Store' is defined but never used.","'StoreList' is defined but never used.","'handleCloseModal' is assigned a value but never used.","'VideoConference' is defined but never used.","'phone' is assigned a value but never used.","'email' is assigned a value but never used.","'nok_name' is assigned a value but never used.","'nok_phoneno' is assigned a value but never used.","'nok_email' is assigned a value but never used.","'nok_relationship' is assigned a value but never used.","'mrn' is assigned a value but never used.","'address' is assigned a value but never used.","'city' is assigned a value but never used.","'lga' is assigned a value but never used.","'country' is assigned a value but never used.","'paymentinfo' is assigned a value but never used.","'cashDetails' is assigned a value but never used.","'familyDetails' is assigned a value but never used.","'companyDetails' is assigned a value but never used.","'hmoDetails' is assigned a value but never used.","React Hook useEffect contains a call to 'setSelectedClient'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [state.ClientModule.selectedClient, client, selectedClient] as a second argument to the useEffect Hook.",["732"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'setPassword' is assigned a value but never used.","'selectedAppointment' is assigned a value but never used.","'setSelectedAppointment' is assigned a value but never used.","'setValue' is assigned a value but never used.","'setType' is assigned a value but never used.","'selectedClient' is assigned a value but never used.","'setSelectedClient' is assigned a value but never used.",["733"],"'state' is assigned a value but never used.",["714"],["715"],"React Hook useEffect has missing dependencies: 'ClinicServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["734"],["735"],["736"],["737"],["738"],"'inventoryId' is assigned a value but never used.","'inputEl' is assigned a value but never used.","'hidestatus' is defined but never used.","React Hook useEffect has missing dependencies: 'documentNo', 'quantity', 'sellingprice', 'source', 'totalamount', and 'type'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProductEntry' needs the current value of 'documentNo'.",["739"],"Assignments to the 'calcamount1' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","BinaryExpression",["740"],["741"],"'formatDistanceToNowStrict' is defined but never used.","'ProductEntryServ' is assigned a value but never used.","'productId' is assigned a value but never used.","'name' is assigned a value but never used.","'productEntry' is assigned a value but never used.","'setProductEntry' is assigned a value but never used.","'handleChangeType' is assigned a value but never used.","'resetform' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'user.currentEmployee.facilityDetail._id' and 'user.currentEmployee.facilityDetail.facilityName'. Either include them or remove the dependency array.",["742"],"React Hook useEffect has missing dependencies: 'OrderServ' and 'getFacilities'. Either include them or remove the dependency array.",["743"],"'productModal' is assigned a value but never used.","'handleBlur' is assigned a value but never used.","'handlecloseModal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["744"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","React Hook useEffect has missing dependencies: 'StoreServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["745"],"React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["746"],"React Hook useEffect has missing dependencies: 'EmployeeServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["747"],"'facilities' is assigned a value but never used.",["748"],"'handleRow' is assigned a value but never used.","'currentOrder' is assigned a value but never used.","'ProductEntry' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'state.DispenseModule.selectedDispense' and 'state.currentClients'. Either include them or remove the dependency array.",["749"],"React Hook useEffect has missing dependencies: 'OrderServ' and 'state.currentClients'. Either include them or remove the dependency array.",["750"],["751"],"'ProductCreate' is defined but never used.","'qamount' is assigned a value but never used.",["752"],"React Hook useEffect has a missing dependency: 'handleSelectedClient'. Either include it or remove the dependency array.",["753"],["754"],{"desc":"755","fix":"756"},"no-global-assign","no-unsafe-negation",{"desc":"757","fix":"758"},{"desc":"759","fix":"760"},{"desc":"761","fix":"762"},{"desc":"763","fix":"764"},{"desc":"765","fix":"766"},{"desc":"767","fix":"768"},{"desc":"769","fix":"770"},{"desc":"771","fix":"772"},{"desc":"773","fix":"774"},{"desc":"775","fix":"776"},{"desc":"777","fix":"778"},{"desc":"779","fix":"780"},{"desc":"781","fix":"782"},{"desc":"783","fix":"784"},{"desc":"769","fix":"785"},{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},{"desc":"775","fix":"790"},{"desc":"791","fix":"792"},{"desc":"767","fix":"793"},{"desc":"769","fix":"794"},{"desc":"771","fix":"795"},{"desc":"773","fix":"796"},{"desc":"797","fix":"798"},{"desc":"783","fix":"799"},{"desc":"769","fix":"800"},{"desc":"801","fix":"802"},{"desc":"803","fix":"804"},{"desc":"805","fix":"806"},{"desc":"807","fix":"808"},{"desc":"809","fix":"810"},{"desc":"811","fix":"812"},{"desc":"803","fix":"813"},{"desc":"814","fix":"815"},{"desc":"816","fix":"817"},{"desc":"765","fix":"818"},{"desc":"797","fix":"819"},{"desc":"820","fix":"821"},{"desc":"755","fix":"822"},"Update the dependencies array to be: [ClinicServ, getFacilities, page, user]",{"range":"823","text":"824"},"Update the dependencies array to be: [DocumentClassServ, getFacilities]",{"range":"825","text":"826"},"Update the dependencies array to be: [handleChangeClient, state.ClientModule.selectedClient]",{"range":"827","text":"828"},"Update the dependencies array to be: [setUser, user]",{"range":"829","text":"830"},"Update the dependencies array to be: [reAuth, setUser, user]",{"range":"831","text":"832"},"Update the dependencies array to be: [facilityServ, getFacilities]",{"range":"833","text":"834"},"Update the dependencies array to be: [InventoryServ, getFacilities, user]",{"range":"835","text":"836"},"Update the dependencies array to be: [getFacilities, state.StoreModule.selectedStore]",{"range":"837","text":"838"},"Update the dependencies array to be: [Inventory, getFacilities]",{"range":"839","text":"840"},"Update the dependencies array to be: [handleSetPrice]",{"range":"841","text":"842"},"Update the dependencies array to be: [ClientServ, getFacilities, user]",{"range":"843","text":"844"},"Update the dependencies array to be: [handleChangeStore, selectedStore]",{"range":"845","text":"846"},"Update the dependencies array to be: [handleChangeClinic, selectedClinic]",{"range":"847","text":"848"},"Update the dependencies array to be: [LocationServ, getFacilities, user]",{"range":"849","text":"850"},"Update the dependencies array to be: [ProductEntryServ, getFacilities, state.StoreModule.selectedStore]",{"range":"851","text":"852"},{"range":"853","text":"838"},"Update the dependencies array to be: [ProductServ, getFacilities, user]",{"range":"854","text":"855"},"Add dependencies array: [state.ClientModule.selectedClient, client, selectedClient]",{"range":"856","text":"857"},{"range":"858","text":"844"},"Update the dependencies array to be: [ClinicServ, getFacilities, user]",{"range":"859","text":"860"},{"range":"861","text":"836"},{"range":"862","text":"838"},{"range":"863","text":"840"},{"range":"864","text":"842"},"Update the dependencies array to be: [date, documentNo, quantity, sellingprice, source, totalamount, type]",{"range":"865","text":"866"},{"range":"867","text":"852"},{"range":"868","text":"838"},"Update the dependencies array to be: [user.currentEmployee.facilityDetail._id, user.currentEmployee.facilityDetail.facilityName]",{"range":"869","text":"870"},"Update the dependencies array to be: [OrderServ, getFacilities]",{"range":"871","text":"872"},"Update the dependencies array to be: [simpa, value]",{"range":"873","text":"874"},"Update the dependencies array to be: [StoreServ, getFacilities, user]",{"range":"875","text":"876"},"Update the dependencies array to be: [setValue, user]",{"range":"877","text":"878"},"Update the dependencies array to be: [EmployeeServ, getFacilities, user]",{"range":"879","text":"880"},{"range":"881","text":"872"},"Update the dependencies array to be: [state.DispenseModule.selectedDispense, state.currentClients]",{"range":"882","text":"883"},"Update the dependencies array to be: [OrderServ, state.currentClients]",{"range":"884","text":"885"},{"range":"886","text":"834"},{"range":"887","text":"866"},"Update the dependencies array to be: [handleSelectedClient, medication]",{"range":"888","text":"889"},{"range":"890","text":"824"},[7627,7629],"[ClinicServ, getFacilities, page, user]",[11271,11273],"[DocumentClassServ, getFacilities]",[1601,1603],"[handleChangeClient, state.ClientModule.selectedClient]",[3432,3434],"[setUser, user]",[3133,3135],"[reAuth, setUser, user]",[10381,10383],"[facilityServ, getFacilities]",[16336,16338],"[InventoryServ, getFacilities, user]",[16478,16511],"[getFacilities, state.StoreModule.selectedStore]",[22339,22350],"[Inventory, getFacilities]",[28037,28039],"[handleSetPrice]",[26612,26614],"[ClientServ, getFacilities, user]",[1196,1198],"[handleChangeStore, selectedStore]",[1106,1108],"[handleChangeClinic, selectedClinic]",[14869,14871],"[LocationServ, getFacilities, user]",[21183,21185],"[ProductEntryServ, getFacilities, state.StoreModule.selectedStore]",[21387,21420],[14978,14980],"[ProductServ, getFacilities, user]",[1845,1845],", [state.ClientModule.selectedClient, client, selectedClient]",[19050,19052],[14953,14955],"[ClinicServ, getFacilities, user]",[16336,16338],[16478,16511],[22351,22362],[28049,28051],[7305,7311],"[date, documentNo, quantity, sellingprice, source, totalamount, type]",[25911,25913],[26115,26148],[9033,9035],"[user.currentEmployee.facilityDetail._id, user.currentEmployee.facilityDetail.facilityName]",[20178,20180],"[OrderServ, getFacilities]",[48199,48206],"[simpa, value]",[14893,14895],"[StoreServ, getFacilities, user]",[2746,2752],"[setValue, user]",[14951,14953],"[EmployeeServ, getFacilities, user]",[3004,3006],[15413,15415],"[state.DispenseModule.selectedDispense, state.currentClients]",[16244,16246],"[OrderServ, state.currentClients]",[10690,10692],[10296,10302],[15465,15477],"[handleSelectedClient, medication]",[7628,7630]]
[{"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js":"1","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js":"2","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js":"3","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js":"4","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js":"5","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Facility.js":"6","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js":"7","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js":"8","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\HSModules.js":"9","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js":"10","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js":"11","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\reportWebVitals.js":"12","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryReport.js":"13","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js":"14","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js":"15","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js":"16","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryHome.js":"17","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\DeptUnits.js":"18","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Roaster.js":"19","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js":"20","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Location.js":"21","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Store.js":"22","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js":"23","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Accessibility.js":"24","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js":"25","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js":"26","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js":"27","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js":"28","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FacilityModule.js":"29"},{"size":2729,"mtime":1611153513382,"results":"30","hashOfConfig":"31"},{"size":6521,"mtime":1611133546884,"results":"32","hashOfConfig":"31"},{"size":8922,"mtime":1610239068500,"results":"33","hashOfConfig":"31"},{"size":8916,"mtime":1610239622739,"results":"34","hashOfConfig":"31"},{"size":3070,"mtime":1611089651447,"results":"35","hashOfConfig":"31"},{"size":29287,"mtime":1610499792755,"results":"36","hashOfConfig":"31"},{"size":40586,"mtime":1611144169606,"results":"37","hashOfConfig":"31"},{"size":958,"mtime":1611095384833,"results":"38","hashOfConfig":"31"},{"size":156,"mtime":1610340977169,"results":"39","hashOfConfig":"31"},{"size":602,"mtime":1610166221216,"results":"40","hashOfConfig":"31"},{"size":500,"mtime":1606167681327,"results":"41","hashOfConfig":"31"},{"size":362,"mtime":1606167681327,"results":"42","hashOfConfig":"31"},{"size":8924,"mtime":1610239695153,"results":"43","hashOfConfig":"31"},{"size":8918,"mtime":1610239636746,"results":"44","hashOfConfig":"31"},{"size":148,"mtime":1610340754492,"results":"45","hashOfConfig":"31"},{"size":144,"mtime":1610340849334,"results":"46","hashOfConfig":"31"},{"size":9605,"mtime":1610242118830,"results":"47","hashOfConfig":"31"},{"size":153,"mtime":1610341642391,"results":"48","hashOfConfig":"31"},{"size":142,"mtime":1610340882234,"results":"49","hashOfConfig":"31"},{"size":9318,"mtime":1610307391617,"results":"50","hashOfConfig":"31"},{"size":40475,"mtime":1611156093148,"results":"51","hashOfConfig":"31"},{"size":138,"mtime":1610119013877,"results":"52","hashOfConfig":"31"},{"size":146,"mtime":1610340786924,"results":"53","hashOfConfig":"31"},{"size":153,"mtime":1610345735519,"results":"54","hashOfConfig":"31"},{"size":4814,"mtime":1610345113662,"results":"55","hashOfConfig":"31"},{"size":161,"mtime":1610350517503,"results":"56","hashOfConfig":"31"},{"size":412,"mtime":1610551204385,"results":"57","hashOfConfig":"31"},{"size":9542,"mtime":1610481859369,"results":"58","hashOfConfig":"31"},{"size":6714,"mtime":1610347518133,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"vuhkqw",{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js",["128","129"],"//import logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter as Router, Route,  Switch, Redirect} from 'react-router-dom'\nimport Home from './components/Home'\nimport Login from './components/Login' \nimport SignUp from './components/SignUp'\nimport {useState, useContext, useEffect} from 'react'\nimport {UserContext,ObjectContext} from './context'\nimport MyUserProvider from './context'\nimport client from './feathers'\n\nimport 'bulma/css/bulma.css'\nimport \"@fortawesome/fontawesome-free/css/all.css\"; \n\n\nfunction App() {\n  \n  const [state,setState] = useState({\n    facilityModule:{\n      show:'create',\n      selectedFacility:{}\n    },\n    EmployeeModule:{\n      show:'create',\n      selectedEmployee:{}\n    },\n    LocationModule:{\n      show:'create',\n      selectedLocation:{}\n    }\n  })\n  \n \n  return (\n    <ObjectContext.Provider value={{state,setState}}>\n   {/*  <UserContext.Provider value={{user,setUser}}> */}\n   <MyUserProvider>\n    <Router>\n      <div className=\"App has-background-info\">\n        <Switch>\n          <Route path='/signup' exact>\n            <SignUp />\n          </Route>\n         <ProtectedRoute path='/app' >\n            <Home/>\n          </ProtectedRoute>\n          <Route path='/' exact>\n            <Login /> \n          </Route>\n          <Route path='*' >\n            <div>404-not found</div>\n          </Route>\n        </Switch>  \n      </div>\n    </Router>\n    </MyUserProvider>\n    {/* </UserContext.Provider> */}\n    </ObjectContext.Provider>\n  );\n}\n\nexport default App;\n\n// eslint-disable-next-line \nconst ProtectedRoute =({children,...props})=>{\n  \n  const {user,setUser} = useContext(UserContext)\n\n \nuseEffect(()=>{\nconst check=async ()=>{\n  if (!user){\n    (async () => {\n      try {\n        // First try to log in with an existing JWT\n        const resp= await client.reAuthenticate();\n            console.log(resp)\n           const user1=await resp.user \n           return    await setUser(resp.user)\n        \n      } catch (error) {\n        // If that errors, log in with email/password\n        // Here we would normally show a login page\n        // to get the login information\n        /* return await client.authenticate({\n          strategy: 'local',\n          email: 'hello@feathersjs.com',\n          password: 'supersecret'\n        }); */\n        console.log(error)\n      }\n    })()\n   }\n}\n check().then((resp)=>{\n  console.log(\"testing\")\n })\n  \n}, [])\n\n\n  return  (<Route {...props} render={({location}) => {\n    return  user/* fakeAuth.isAuthenticated === true */\n      ? children\n      : <Redirect to={{\n        pathname: '/',\n        state: { from: location }\n      }} />\n  }} />)\n  /* user? <Route {...props}>{children}</Route>:<Redirect to='/'></Redirect> */\n\n}\n\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js",["130","131","132","133","134"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js",["135","136","137"],"import React, {useState,useContext} from 'react'\r\nimport client from '../feathers'\r\nimport { useForm } from \"react-hook-form\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport {UserContext} from '../context'\r\n\r\nexport default function Login() {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [error, setError] =useState(true)\r\n    const [errorMessage,setErrorMessage] = useState(\"\")\r\n    const userServ=client.service('/users')\r\n    const history = useHistory()\r\n    const {user,setUser} = useContext(UserContext)\r\n\r\n   \r\nconst onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setErrorMessage(\"\")\r\n        setError(false)\r\n           const  email=data.email\r\n           const password=data.password\r\n         \r\n          \r\n          client.authenticate({\r\n            strategy:'local',\r\n            email,\r\n            password\r\n        }).then(async (res)=>{\r\n                console.log(JSON.stringify(res.user))\r\n                e.target.reset();\r\n               await setUser(res.user)\r\n               console.log(user)\r\n               localStorage.setItem(\"user\",JSON.stringify(res.user))\r\n               history.push(\"/app\")\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setErrorMessage(\"Error loggin in User, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <section className=\"section\">\r\n        <div className=\"container\">\r\n        <div className=\"columns is-centered\">\r\n        <div className=\"column is-4 \">\r\n        <div className=\"card v-centered\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Health Stack\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n           <div className=\"field\">\r\n            <p className=\"control has-icons-left has-icons-right\">\r\n                <input className=\"input\" ref={register({ required: true })}  name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n                  <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-envelope\"></i>\r\n                </span>\r\n                \r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <input className=\"input\" ref={register({ required: true })} name=\"password\" type=\"password\" placeholder=\"Password\"/>\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"fas fa-lock\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control\">\r\n                <button className=\"button is-success is-small\">\r\n                    Login\r\n                </button>\r\n            </p>\r\n        </div>\r\n        { error && <div className=\"message\"> {errorMessage}</div>}\r\n        </form>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </section>\r\n    )\r\n}\r\n",["138","139"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Facility.js",["140"],"import React, {useState,useContext, useEffect} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\n\r\nexport default function Facility() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedFacility,setSelectedFacility]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    //console.log(\"facility parent\", state)\r\n    \r\n\r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Facility  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <FacilityList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.facilityModule.show ==='create')&&<FacilityCreate />}\r\n                {(state.facilityModule.show ==='detail')&&<FacilityDetail  />}\r\n                {(state.facilityModule.show ==='modify')&&<FacilityModify facility={selectedFacility} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function FacilityCreate(){\r\n    const { register, handleSubmit} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n\r\n    \r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n                setMessage(\"Created facility successfully\")\r\n                setSuccess(true)\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Facility\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function FacilityList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const facilityServ=client.service('facility')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedFacility, setSelectedFacility]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n\r\n   \r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(facility)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",facility)\r\n\r\n        await setSelectedFacility(facility)\r\n\r\n        const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='facilityName'\r\n       console.log(val)\r\n       facilityServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" facility  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n\r\n           /*  if (val.length>2){\r\n                console.log(\"in\")\r\n               \r\n            }\r\n\r\n        }\r\n     */\r\n        const getFacilities=()=>{\r\n            facilityServ.find({query: {\r\n              \r\n                $limit:20,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }})\r\n            .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" facility  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                    setError(true)\r\n                })\r\n\r\n        }\r\n\r\n    useEffect(() => {\r\n        getFacilities()\r\n\r\n        facilityServ.on('created', (obj)=>getFacilities())\r\n        facilityServ.on('updated', (obj)=>getFacilities())\r\n        facilityServ.on('patched', (obj)=>getFacilities())\r\n        facilityServ.on('removed', (obj)=>getFacilities())\r\n        return () => {\r\n           \r\n        }\r\n    },[])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n            <>   \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Facilities </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"S/No\">S/No</abbr></th>\r\n                                        <th>Facility Name</th>\r\n                                        <th><abbr title=\"Address\"> Address</abbr></th>\r\n                                        <th><abbr title=\"City\">City</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th><abbr title=\"Category\">Category</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((facility, i)=>(\r\n\r\n                                            <tr key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{facility.facilityName}</th>\r\n                                            <td>{facility.facilityAddress}</td>\r\n                                            <td>{facility.facilityCity}</td>\r\n                                            <td>{facility.facilityContactPhone}</td>\r\n                                            <td>{facility.facilityEmail}</td>\r\n                                            <td>{facility.facilityType}</td>\r\n                                            <td>{facility.facilityCategory}</td>\r\n                                           \r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>               \r\n            </>\r\n              \r\n    )\r\n}\r\n\r\nexport function FacilityDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const facility =state.facilityModule.selectedFacility \r\n\r\n    const handleEdit= async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Facility Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <fieldset>\r\n                <div className=\"field \">\r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: <span className=\"is-small \"   name=\"facilityName\"> {facility.facilityName} </span>\r\n                        </label>\r\n                \r\n                        \r\n             \r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Address:\r\n                   \r\n                    <span className=\"is-small \"  name=\"facilityAddress\">{facility.facilityAddress} </span> \r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>City: \r\n                \r\n                    <span className=\"is-small \"  name=\"facilityCity\">{facility.facilityCity}</span> \r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    <span className=\"is-small \"  name=\"facilityContactPhone\" >{facility.facilityContactPhone}</span>\r\n                        </label>\r\n \r\n                \r\n                \r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     <span className=\"is-small \"  name=\"facilityEmail\" >{facility.facilityEmail}</span>\r\n                    \r\n                         </label>\r\n\r\n               \r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>CEO:\r\n                    <span className=\"is-small \"  name=\"facilityOwner\">{facility.facilityOwner}</span>\r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Type:              \r\n                    <span className=\"is-small \"  name=\"facilityType\">{facility.facilityType}</span>\r\n                </label>\r\n \r\n                </div>\r\n            <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-small \"  name= \"facilityCategory\">{facility.facilityCategory}</span>\r\n                </label>\r\n\r\n\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </fieldset>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function FacilityModify(){\r\n    const { register, handleSubmit, setValue,reset } = useForm(); //watch, errors,\r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const facility =state.facilityModule.selectedFacility \r\n\r\n        useEffect(() => {\r\n            setValue(\"facilityName\", facility.facilityName,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityAddress\", facility.facilityAddress,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityCity\", facility.facilityCity,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityContactPhone\", facility.facilityContactPhone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityEmail\", facility.facilityEmail,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityOwner\", facility.facilityOwner,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityType\", facility.facilityType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityCategory\", facility.facilityCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newfacilityModule={\r\n        selectedFacility:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=facility._id\r\n        if (conf){\r\n             \r\n        facilityServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n                setMessage(\"Deleted facility successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200);\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error deleting facility, probable network issues \"+ err )\r\n                setError(true)\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 200);\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        console.log(data)\r\n          //data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.update(facility._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n                setMessage(\"updated facility successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Facility Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\">Name \r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Address\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">City\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">CEO\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Type\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div>\r\n            <div className=\"field  is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={handleDelete}>\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   ",["141","142"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js",["143","144"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Employee() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedEmployee,setSelectedEmployee]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Employee  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <EmployeeList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.EmployeeModule.show ==='create')&&<EmployeeCreate />}\r\n                {(state.EmployeeModule.show ==='detail')&&<EmployeeDetail  />}\r\n                {(state.EmployeeModule.show ==='modify')&&<EmployeeModify Employee={selectedEmployee} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function EmployeeCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeEmployee.FacilityId)//\r\n      if (!user.stacker){\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    },[user])\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          if (user.currentEmployee){\r\n         // data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        EmployeeServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Employee successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Employee created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating employee ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Employee\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            { error && <div className=\"is-danger\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"lastname\" type=\"text\" placeholder=\"Last Name\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function EmployeeList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedEmployee, setSelectedEmployee]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Employee)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Employee)\r\n\r\n        await setSelectedEmployee(Employee)\r\n\r\n        const    newEmployeeModule={\r\n            selectedEmployee:Employee,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='firstname'\r\n       console.log(val)\r\n       EmployeeServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Employee  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Employee, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findEmployee= await EmployeeServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findEmployee.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findEmployee= await EmployeeServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findEmployee.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Employee  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Employee, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                EmployeeServ.on('created', (obj)=>getFacilities())\r\n                EmployeeServ.on('updated', (obj)=>getFacilities())\r\n                EmployeeServ.on('patched', (obj)=>getFacilities())\r\n                EmployeeServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Employees </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>First Name</th>\r\n                                        <th><abbr title=\"Last Name\">Last Name</abbr></th>\r\n                                        <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th>\r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Employee, i)=>(\r\n\r\n                                            <tr key={Employee._id} onClick={()=>handleRow(Employee)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Employee.firstname}</th>\r\n                                            <td>{Employee.lastname}</td>\r\n                                            <td>{Employee.profession}</td>\r\n                                            <td>{Employee.phone}</td>\r\n                                            <td>{Employee.email}</td>\r\n                                            <td>{Employee.department}</td>\r\n                                            <td>{Employee.deptunit}</td>\r\n                                            <td>{Employee.facility}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function EmployeeDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const EmployeeServ=client.service('/Employee')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Employee =state.EmployeeModule.selectedEmployee \r\n\r\n    const handleEdit= async()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:Employee,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Employee Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <fieldset>\r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        First Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-medium \"   name=\"EmployeeName\"> {Employee.firstname} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Last Name:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"EmployeeAddress\">{Employee.lastname} </span> \r\n                    </td>\r\n                </tr>\r\n                    <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"EmployeeCity\">{Employee.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-small \"  name=\"EmployeeContactPhone\" >{Employee.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-small \"  name=\"EmployeeEmail\" >{Employee.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"EmployeeOwner\">{Employee.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"EmployeeType\">{Employee.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr>\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-small \"  name= \"EmployeeCategory\">{Employee.EmployeeCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </fieldset>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function EmployeeModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Employee =state.EmployeeModule.selectedEmployee \r\n\r\n        useEffect(() => {\r\n            setValue(\"firstname\", Employee.firstname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"lastname\", Employee.lastname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"profession\", Employee.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Employee.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Employee.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Employee.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Employee.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n          /*   setValue(\"EmployeeCategory\", Employee.EmployeeCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newEmployeeModule={\r\n        selectedEmployee:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Employee._id\r\n        if (conf){\r\n             \r\n        EmployeeServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Employee successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Employee deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Employee, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Employee, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Employee.facility\r\n          //console.log(data);\r\n          \r\n        EmployeeServ.patch(Employee._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Employee successfully\")\r\n                 toast({\r\n                    message: 'Employee updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Employee, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Employee, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Employee Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\">First Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Last Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"lastname\" type=\"text\" placeholder=\"Last Name\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Employee Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"EmployeeCategory\" type=\"text\" placeholder=\"Employee Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            <div className=\"block\">\r\n            <div className=\"field  is-grouped\">\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\HSModules.js",[],["145","146"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\reportWebVitals.js",[],["147","148"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryReport.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryHome.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\DeptUnits.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Roaster.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js",[],["149","150"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Location.js",["151","152","153","154"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Location() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedLocation,setSelectedLocation]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Location  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <LocationList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.LocationModule.show ==='create')&&<LocationCreate />}\r\n                {(state.LocationModule.show ==='detail')&&<LocationDetail  />}\r\n                {(state.LocationModule.show ==='modify')&&<LocationModify Location={selectedLocation} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function LocationCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const LocationServ=client.service('location')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeLocation.FacilityId)//\r\n      if (!user.stacker){\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    },[user])\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          if (user.currentEmployee){\r\n         // data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        LocationServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Location successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Location created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Location ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Location\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"locationType\" type=\"text\" placeholder=\"Type of Location\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Location\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function LocationList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const LocationServ=client.service('location')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedLocation, setSelectedLocation]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newLocationModule={\r\n            selectedLocation:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Location)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Location)\r\n\r\n        await setSelectedLocation(Location)\r\n\r\n        const    newLocationModule={\r\n            selectedLocation:Location,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       LocationServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Location  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Location, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findLocation= await LocationServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findLocation.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findLocation= await LocationServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findLocation.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Location  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Location, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                LocationServ.on('created', (obj)=>getFacilities())\r\n                LocationServ.on('updated', (obj)=>getFacilities())\r\n                LocationServ.on('patched', (obj)=>getFacilities())\r\n                LocationServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Locations\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Locations </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>First Name</th>\r\n                                        <th><abbr title=\"Last Name\">Last Name</abbr></th>\r\n                                        <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th>\r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Location, i)=>(\r\n\r\n                                            <tr key={Location._id} onClick={()=>handleRow(Location)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Location.firstname}</th>\r\n                                            <td>{Location.lastname}</td>\r\n                                            <td>{Location.profession}</td>\r\n                                            <td>{Location.phone}</td>\r\n                                            <td>{Location.email}</td>\r\n                                            <td>{Location.department}</td>\r\n                                            <td>{Location.deptunit}</td>\r\n                                            <td>{Location.facility}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function LocationDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const LocationServ=client.service('/Location')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Location =state.LocationModule.selectedLocation \r\n\r\n    const handleEdit= async()=>{\r\n        const    newLocationModule={\r\n            selectedLocation:Location,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Location Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <fieldset>\r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        First Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-medium \"   name=\"LocationName\"> {Location.firstname} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Last Name:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"LocationAddress\">{Location.lastname} </span> \r\n                    </td>\r\n                </tr>\r\n                    <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"LocationCity\">{Location.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-small \"  name=\"LocationContactPhone\" >{Location.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-small \"  name=\"LocationEmail\" >{Location.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"LocationOwner\">{Location.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"LocationType\">{Location.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr>\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-small \"  name= \"LocationCategory\">{Location.LocationCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </fieldset>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function LocationModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const LocationServ=client.service('location')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Location =state.LocationModule.selectedLocation \r\n\r\n        useEffect(() => {\r\n            setValue(\"firstname\", Location.firstname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"lastname\", Location.lastname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"profession\", Location.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Location.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Location.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Location.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Location.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n          /*   setValue(\"LocationCategory\", Location.LocationCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newLocationModule={\r\n        selectedLocation:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newLocationModule={\r\n            selectedLocation:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Location._id\r\n        if (conf){\r\n             \r\n        LocationServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Location successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Location deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Location, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Location, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Location.facility\r\n          //console.log(data);\r\n          \r\n        LocationServ.patch(Location._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Location successfully\")\r\n                 toast({\r\n                    message: 'Location updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Location, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Location, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Location Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\">First Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Last Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"lastname\" type=\"text\" placeholder=\"Last Name\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Location Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"LocationCategory\" type=\"text\" placeholder=\"Location Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            <div className=\"block\">\r\n            <div className=\"field  is-grouped\">\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Store.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Accessibility.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js",["155","156"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js",["157","158"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FacilityModule.js",["159"],{"ruleId":"160","severity":1,"message":"161","line":78,"column":18,"nodeType":"162","messageId":"163","endLine":78,"endColumn":23},{"ruleId":"164","severity":1,"message":"165","line":99,"column":4,"nodeType":"166","endLine":99,"endColumn":6,"suggestions":"167"},{"ruleId":"160","severity":1,"message":"168","line":2,"column":40,"nodeType":"162","messageId":"163","endLine":2,"endColumn":44},{"ruleId":"160","severity":1,"message":"169","line":12,"column":12,"nodeType":"162","messageId":"163","endLine":12,"endColumn":16},{"ruleId":"160","severity":1,"message":"170","line":12,"column":17,"nodeType":"162","messageId":"163","endLine":12,"endColumn":24},{"ruleId":"160","severity":1,"message":"171","line":81,"column":16,"nodeType":"162","messageId":"163","endLine":81,"endColumn":20},{"ruleId":"164","severity":1,"message":"172","line":105,"column":7,"nodeType":"166","endLine":105,"endColumn":9,"suggestions":"173"},{"ruleId":"160","severity":1,"message":"174","line":8,"column":37,"nodeType":"162","messageId":"163","endLine":8,"endColumn":42},{"ruleId":"160","severity":1,"message":"175","line":8,"column":44,"nodeType":"162","messageId":"163","endLine":8,"endColumn":50},{"ruleId":"160","severity":1,"message":"176","line":11,"column":11,"nodeType":"162","messageId":"163","endLine":11,"endColumn":19},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"164","severity":1,"message":"181","line":275,"column":7,"nodeType":"166","endLine":275,"endColumn":9,"suggestions":"182"},{"ruleId":"177","replacedBy":"183"},{"ruleId":"179","replacedBy":"184"},{"ruleId":"164","severity":1,"message":"185","line":81,"column":7,"nodeType":"166","endLine":81,"endColumn":13,"suggestions":"186"},{"ruleId":"164","severity":1,"message":"187","line":389,"column":15,"nodeType":"166","endLine":389,"endColumn":17,"suggestions":"188"},{"ruleId":"177","replacedBy":"189"},{"ruleId":"179","replacedBy":"190"},{"ruleId":"177","replacedBy":"191"},{"ruleId":"179","replacedBy":"192"},{"ruleId":"177","replacedBy":"193"},{"ruleId":"179","replacedBy":"194"},{"ruleId":"160","severity":1,"message":"195","line":43,"column":12,"nodeType":"162","messageId":"163","endLine":43,"endColumn":17},{"ruleId":"160","severity":1,"message":"196","line":45,"column":12,"nodeType":"162","messageId":"163","endLine":45,"endColumn":19},{"ruleId":"164","severity":1,"message":"185","line":81,"column":7,"nodeType":"166","endLine":81,"endColumn":13,"suggestions":"197"},{"ruleId":"164","severity":1,"message":"198","line":388,"column":15,"nodeType":"166","endLine":388,"endColumn":17,"suggestions":"199"},{"ruleId":"160","severity":1,"message":"168","line":2,"column":40,"nodeType":"162","messageId":"163","endLine":2,"endColumn":44},{"ruleId":"160","severity":1,"message":"200","line":9,"column":8,"nodeType":"162","messageId":"163","endLine":9,"endColumn":13},{"ruleId":"160","severity":1,"message":"174","line":7,"column":37,"nodeType":"162","messageId":"163","endLine":7,"endColumn":42},{"ruleId":"160","severity":1,"message":"175","line":7,"column":44,"nodeType":"162","messageId":"163","endLine":7,"endColumn":50},{"ruleId":"160","severity":1,"message":"168","line":2,"column":40,"nodeType":"162","messageId":"163","endLine":2,"endColumn":44},"no-unused-vars","'user1' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setUser' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["201"],"'Link' is defined but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","'resp' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'reAuth', 'setUser', and 'user'. Either include them or remove the dependency array.",["202"],"'watch' is assigned a value but never used.","'errors' is assigned a value but never used.","'userServ' is assigned a value but never used.","no-native-reassign",["203"],"no-negated-in-lhs",["204"],"React Hook useEffect has missing dependencies: 'facilityServ' and 'getFacilities'. Either include them or remove the dependency array.",["205"],["203"],["204"],"React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["206"],"React Hook useEffect has missing dependencies: 'EmployeeServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["207"],["203"],["204"],["203"],["204"],["203"],["204"],"'error' is assigned a value but never used.","'message' is assigned a value but never used.",["208"],"React Hook useEffect has missing dependencies: 'LocationServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["209"],"'Store' is defined but never used.",{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},"no-global-assign","no-unsafe-negation",{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"216","fix":"220"},{"desc":"221","fix":"222"},"Update the dependencies array to be: [setUser, user]",{"range":"223","text":"224"},"Update the dependencies array to be: [reAuth, setUser, user]",{"range":"225","text":"226"},"Update the dependencies array to be: [facilityServ, getFacilities]",{"range":"227","text":"228"},"Update the dependencies array to be: [setValue, user]",{"range":"229","text":"230"},"Update the dependencies array to be: [EmployeeServ, getFacilities, user]",{"range":"231","text":"232"},{"range":"233","text":"230"},"Update the dependencies array to be: [LocationServ, getFacilities, user]",{"range":"234","text":"235"},[2409,2411],"[setUser, user]",[2942,2944],"[reAuth, setUser, user]",[10381,10383],"[facilityServ, getFacilities]",[2746,2752],"[setValue, user]",[14951,14953],"[EmployeeServ, getFacilities, user]",[2746,2752],[14841,14843],"[LocationServ, getFacilities, user]"]
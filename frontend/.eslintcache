[{"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Payment.js":"1","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\PaymentCreate.js":"2"},{"size":21960,"mtime":1614434089151,"results":"3","hashOfConfig":"4"},{"size":34386,"mtime":1614469460848,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"vuhkqw",{"filePath":"9","messages":"10","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\Payment.js",["11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {format, formatDistanceToNowStrict } from 'date-fns'\r\nimport PaymentCreate from './PaymentCreate'\r\nimport PatientProfile from '../ClientMgt/PatientProfile'\r\n/* import {ProductCreate} from './Products' */\r\n// eslint-disable-next-line\r\n//const searchfacility={};\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemState,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\n\r\n// Demo styles, see 'Styles' section below for some notes on use.\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\n//import BillPrescriptionCreate from './BillPrescriptionCreate';\r\n\r\n\r\n\r\nexport default function Payment() {\r\n    //const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line\r\n   const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line\r\n  const [message, setMessage] = useState(\"\") \r\n   const BillServ=client.service('bills')\r\n   //const history = useHistory()\r\n  // const {user,setUser} = useContext(UserContext)\r\n   const [facilities,setFacilities]=useState([])\r\n    // eslint-disable-next-line\r\n  const [selectedOrders, setSelectedOrders]=useState([]) //\r\n   // eslint-disable-next-line\r\n   const {state,setState}=useContext(ObjectContext)\r\n   // eslint-disable-next-line\r\n   const {user,setUser}=useContext(UserContext)\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n                <div className=\"column is-5 \">\r\n                    <BillingList />\r\n                    </div>\r\n              \r\n                <div className=\"column is-4 \">\r\n                \r\n                {(state.financeModule.show ==='detail')&& <PaymentCreate/ >}\r\n                </div>\r\n                <div className=\"column is-3 \">\r\n                \r\n                {(state.financeModule.show ==='detail')&&<PatientProfile />}\r\n                </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function BillingList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n   const BillServ=client.service('bills')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedDispense, setSelectedDispense]=useState() //\r\n   const [selectedOrders, setSelectedOrders]=useState([]) \r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n    const [selectedFinance, setSelectedFinance] =useState(\"\")\r\n    const [expanded, setExpanded] =useState(\"\")\r\n    const [oldClient, setOldClient] =useState(\"\")\r\n\r\n    const handleSelectedClient= async(Client)=>{\r\n        // await setSelectedClient(Client)\r\n         const    newClientModule={\r\n             selectedClient:Client,\r\n             show :'detail'\r\n         }\r\n        await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n     }\r\n\r\n    const handleChoseClient= async(client,e, order)=>{\r\n        setOldClient(client.clientname)\r\n        let newClient=client.clientname\r\n        if(oldClient!==newClient){\r\n            //alert(\"New Client Onboard\")\r\n            //remove all checked clientsly\r\n            selectedOrders.forEach(el=>el.checked=\"\")\r\n            setSelectedOrders([])\r\n        }\r\n\r\n        console.log(e.target.checked)\r\n        order.checked=e.target.checked\r\n        await handleSelectedClient(order.participantInfo.client)\r\n        //handleMedicationRow(order)\r\n        await setSelectedFinance(order)\r\n        const    newProductEntryModule={\r\n            selectedFinance:order,\r\n            show :'detail',\r\n            state:e.target.checked\r\n        }\r\n      await setState((prevstate)=>({...prevstate, financeModule:newProductEntryModule}))\r\n      if (e.target.checked){\r\n        await setSelectedOrders((prevstate)=>(prevstate.concat(order)))\r\n      }else{\r\n        setSelectedOrders( prevstate=>prevstate.filter(el=>el._id!==order._id))\r\n      }\r\n    \r\n       // console.log(selectedOrders)\r\n    }\r\n    const handleMedicationRow= async(ProductEntry,e)=>{ //handle selected single order\r\n        //console.log(\"b4\",state)\r\n        alert(\"Header touched\")\r\n    \r\n        //console.log(\"handlerow\",ProductEntry)\r\n       /* alert(ProductEntry.checked)*/\r\n       /*  ProductEntry.checked=!ProductEntry.checked */\r\n    \r\n       /*  await setSelectedFinance(ProductEntry)\r\n    \r\n        const    newProductEntryModule={\r\n            selectedFinance:ProductEntry,\r\n            show :'detail'\r\n\r\n        }\r\n      await setState((prevstate)=>({...prevstate, financeModule:newProductEntryModule})) */\r\n       //console.log(state)\r\n      // ProductEntry.show=!ProductEntry.show\r\n    \r\n    }\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n  \r\n\r\n    const handleSearch=(val)=>{\r\n       const field='name'\r\n       //console.log(val)\r\n       BillServ.find({query: {\r\n                order: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_status: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                order_category:\"Prescription\",\r\n               // storeId:state.StoreModule.selectedStore._id,\r\n               //facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }``\r\n                    }}).then((res)=>{\r\n               // console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n               // console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n    const getFacilities= async()=>{\r\n       \r\n            // console.log(\"here b4 server\")\r\n    const findProductEntry= await BillServ.find(\r\n            {query: {\r\n                'participantInfo.paymentmode.type':\"Cash\",\r\n                'participantInfo.billingFacility': user.currentEmployee.facilityDetail._id,\r\n                billing_status:\"Unpaid\",  // need to set this finally\r\n                //storeId:state.StoreModule.selectedStore._id,\r\n                //clientId:state.ClientModule.selectedClient._id,\r\n                $limit:100,\r\n                $sort: {\r\n                    createdAt: -1\r\n                }\r\n                }})\r\n\r\n            console.log(\"updatedorder\", findProductEntry.groupedOrder)\r\n            await setFacilities(findProductEntry.groupedOrder)\r\n          //  await setState((prevstate)=>({...prevstate, currentClients:findProductEntry.groupedOrder}))\r\n            }   \r\n    const handleRow= async(Client,e)=>{\r\n           // alert(expanded)\r\n              \r\n            }\r\n    //1.consider using props for global data\r\n    useEffect(() => {\r\n        // console.log(\"started\")\r\n            getFacilities()\r\n            BillServ.on('created', (obj)=>getFacilities())\r\n            BillServ.on('updated', (obj)=>getFacilities())\r\n            BillServ.on('patched', (obj)=>getFacilities())\r\n            BillServ.on('removed', (obj)=>getFacilities())\r\n            return () => {\r\n            \r\n            }\r\n            },[])\r\n\r\n    useEffect(() => {\r\n        //changes with checked box\r\n        console.log(selectedOrders)\r\n        \r\n        return () => {\r\n            \r\n        }\r\n    }, [selectedOrders])\r\n\r\n    useEffect(() => {\r\n       if (state.financeModule.show===\"create\"){\r\n        selectedOrders.forEach(el=>el.checked=\"\")\r\n        setSelectedOrders([])\r\n\r\n       }\r\n        return () => {\r\n           \r\n        }\r\n    }, [state.financeModule.show])\r\n   \r\n \r\n\r\n    return(     \r\n            <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Medications\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Unpaid Bills </span></div>\r\n                     {/* <div className=\"level-right\">\r\n                       <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div> \r\n                    </div>*/}\r\n\r\n                </div>\r\n                <div className=\" pullup \">\r\n                    <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                    <Accordion allowZeroExpanded >\r\n                        {facilities.map((Clinic, i)=>(\r\n                            <AccordionItem  key={Clinic.client_id}  >\r\n                               <AccordionItemHeading >\r\n                                    <AccordionItemButton  >\r\n                                    <input type = \"checkbox\" name={Clinic.client_id}  />  \r\n                                    <strong> {i+1} {Clinic.clientname} {/* with {Clinic.bills.length} Unpaid bills. */} Grand Total amount: N</strong> \r\n                                    </AccordionItemButton>\r\n                                </AccordionItemHeading>\r\n                                <AccordionItemPanel>\r\n                                    <div className=\" is-fullwidth vscrollable pr-1\">   \r\n                                        <Accordion allowZeroExpanded>\r\n                                            {Clinic.bills.map((category, i)=>(\r\n                                                <AccordionItem  key={Clinic.client_id} >\r\n                                                    <AccordionItemHeading >\r\n                                                    <AccordionItemButton  >\r\n                                                    <input type = \"checkbox\" name={Clinic.client_id} onChange={(e)=>handleMedicationRow(Clinic,e)} />  \r\n                                                         {category.catName} with {category.order.length} Unpaid bills. Total amount: N\r\n                                                    </AccordionItemButton>\r\n                                                    </AccordionItemHeading>\r\n                                                    <AccordionItemPanel>\r\n                                                        <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable mr-2\">\r\n                                                                <thead>\r\n                                                                    <tr>\r\n                                                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                                                        <th><abbr title=\"Description\">Description</abbr></th>\r\n                                                                    {/*  <th>Fulfilled</th> */}\r\n                                                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                                                        <th><abbr title=\"Amount\">Amount</abbr></th>\r\n                                                                    </tr>\r\n                                                                </thead>\r\n                                                                <tbody>\r\n                                                     { category.order.map((order, i)=>(\r\n\r\n                                                        <tr key={order._id}  /*  onClick={()=>handleMedicationRow(order)} */  className={order._id===(selectedFinance?._id||null)?\"is-selected\":\"\"}>                                         \r\n                                                        <th><input type = \"checkbox\" name={order._id} onChange={(e)=>handleChoseClient(Clinic,e, order)}  checked={order.checked}/>  {i+1}</th>\r\n                                                        <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                                        <th>{order.serviceInfo.name}</th>\r\n                                                       {/*  <td>{order.fulfilled?\"Yes\":\"No\"}</td> */}\r\n                                                        <td>{order.billing_status}</td>\r\n                                                        <td>{order.serviceInfo.amount}</td>\r\n                                                        </tr>\r\n                                                ))}\r\n                                            </tbody>\r\n                                            </table>\r\n\r\n                                                    </AccordionItemPanel>                                          \r\n                                                </AccordionItem>\r\n                                            ))}\r\n                                        </Accordion>\r\n                                    </div>\r\n                                </AccordionItemPanel>                    \r\n                            </AccordionItem >\r\n                        ))}\r\n                    </Accordion >\r\n                    </div>  \r\n                </div>\r\n            </>          \r\n    )\r\n    }\r\n\r\n\r\nexport function DispenseDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    const [selectedMedication, setSelectedMedication] =useState(\"\")\r\n    const [currentOrder, setCurrentOrder] =useState(\"\")\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n    const BillServ=client.service('order')\r\n    /* const [ProductEntry, setProductEntry] = useState(\"\")\r\n    const [facilities, setFacilities] = useState(\"\") */\r\n\r\n let ProductEntry =state.DispenseModule.selectedDispense\r\n   //const facilities=ProductEntry.orders\r\n\r\n   const handleRow= async(ProductEntry)=>{\r\n    //console.log(\"b4\",state)\r\n\r\n    //console.log(\"handlerow\",ProductEntry)\r\n\r\n    await setSelectedMedication(ProductEntry)\r\n\r\n    const    newProductEntryModule={\r\n        selectedMedication:ProductEntry,\r\n        show :'detail'\r\n    }\r\n  await setState((prevstate)=>({...prevstate, medicationModule:newProductEntryModule}))\r\n   //console.log(state)\r\n  // ProductEntry.show=!ProductEntry.show\r\n\r\n}\r\n\r\n    const handleEdit= async(ProductEntry)=>{\r\n        const    newProductEntryModule={\r\n            selectedDispense:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, DispenseModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n\r\n      const client1=  state.currentClients.find(el=>{\r\n            return JSON.stringify(el.client_id)===JSON.stringify(state.DispenseModule.selectedDispense)\r\n        })\r\n\r\n    setCurrentOrder(client1)\r\n   // console.log(client1)\r\n        return () => {\r\n        \r\n        }\r\n    }, [])\r\n   \r\n\r\n /*  \r\n     const setprod=async()=>{\r\n        await setProductEntry(state.DispenseModule.selectedDispense)\r\n    } */\r\n \r\n    useEffect(() => {\r\n        /* BillServ.on('created', (obj)=>getFacilities())\r\n        BillServ.on('updated', (obj)=>getFacilities())\r\n       \r\n        BillServ.on('removed', (obj)=>getFacilities()) */\r\n        BillServ.on('patched',  (obj)=>{\r\n            //update state.DispenseModule.selectedDispense\r\n           // console.log(obj.clientId)\r\n           // console.log(\"currentClients\",state.currentClients)\r\n           const current1=state.currentClients.find(el=>(JSON.stringify(el.client_id)===JSON.stringify(obj.clientId)))\r\n           setCurrentOrder(current1)\r\n          // console.log(\"currentone\",current1)\r\n        })\r\n      \r\n        return () => {\r\n         \r\n        }\r\n    },[])\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Dispense Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            {/* {JSON.stringify(ProductEntry.orders,2,10)} */}\r\n            <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        {/* <th><abbr title=\"Client Name\">Client Name</abbr></th> */}\r\n                                        {/* <th><abbr title=\"Number of Orders\"># of Medication</abbr></th> */}\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Order\">Medication</abbr></th>\r\n                                        <th>Fulfilled</th>\r\n                                        <th><abbr title=\"Status\">Status</abbr></th>\r\n                                        <th><abbr title=\"Requesting Physician\">Requesting Physician</abbr></th>\r\n                                        \r\n                                        {/* <th><abbr title=\"Actions\">Actions</abbr></th> */}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {state.DispenseModule.selectedDispense.orders.map((order, i)=>(\r\n\r\n                                            <tr key={order._id} onClick={()=>handleRow(order)} className={order._id===(selectedMedication?._id||null)?\"is-selected\":\"\"}>\r\n                                            \r\n                                               <th>{i+1}</th>\r\n                                                 {/* <td>{ProductEntry.clientname}</td> \r\n                                                <td>{ProductEntry.orders.length}</td> */}\r\n                                           \r\n                                           \r\n                                            <td><span>{format(new Date(order.createdAt),'dd-MM-yy')}</span></td> {/* {formatDistanceToNowStrict(new Date(ProductEntry.createdAt),{addSuffix: true})} <br/> */} \r\n                                          <th>{order.order}</th>\r\n                                            <td>{order.fulfilled?\"Yes\":\"No\"}</td>\r\n                                            <td>{order.order_status}</td>\r\n                                            <td>{order.requestingdoctor_Name}</td>\r\n                                            \r\n                                           {/*  <td><span className=\"showAction\"  >...</span></td> */}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                        \r\n                </div>              \r\n               \r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Finance\\PaymentCreate.js",["33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59"],{"ruleId":"60","severity":1,"message":"61","line":1,"column":47,"nodeType":"62","messageId":"63","endLine":1,"endColumn":53},{"ruleId":"60","severity":1,"message":"64","line":4,"column":10,"nodeType":"62","messageId":"63","endLine":4,"endColumn":17},{"ruleId":"60","severity":1,"message":"65","line":7,"column":9,"nodeType":"62","messageId":"63","endLine":7,"endColumn":14},{"ruleId":"60","severity":1,"message":"66","line":8,"column":17,"nodeType":"62","messageId":"63","endLine":8,"endColumn":42},{"ruleId":"60","severity":1,"message":"67","line":18,"column":5,"nodeType":"62","messageId":"63","endLine":18,"endColumn":23},{"ruleId":"60","severity":1,"message":"68","line":34,"column":12,"nodeType":"62","messageId":"63","endLine":34,"endColumn":17},{"ruleId":"60","severity":1,"message":"69","line":34,"column":19,"nodeType":"62","messageId":"63","endLine":34,"endColumn":27},{"ruleId":"60","severity":1,"message":"70","line":39,"column":10,"nodeType":"62","messageId":"63","endLine":39,"endColumn":18},{"ruleId":"60","severity":1,"message":"71","line":42,"column":11,"nodeType":"62","messageId":"63","endLine":42,"endColumn":21},{"ruleId":"60","severity":1,"message":"72","line":42,"column":22,"nodeType":"62","messageId":"63","endLine":42,"endColumn":35},{"ruleId":"60","severity":1,"message":"73","line":96,"column":12,"nodeType":"62","messageId":"63","endLine":96,"endColumn":20},{"ruleId":"60","severity":1,"message":"74","line":96,"column":22,"nodeType":"62","messageId":"63","endLine":96,"endColumn":33},{"ruleId":"60","severity":1,"message":"75","line":158,"column":11,"nodeType":"62","messageId":"63","endLine":158,"endColumn":26},{"ruleId":"60","severity":1,"message":"76","line":171,"column":14,"nodeType":"62","messageId":"63","endLine":171,"endColumn":19},{"ruleId":"60","severity":1,"message":"77","line":223,"column":11,"nodeType":"62","messageId":"63","endLine":223,"endColumn":20},{"ruleId":"78","severity":1,"message":"79","line":238,"column":15,"nodeType":"80","endLine":238,"endColumn":17,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":258,"column":8,"nodeType":"80","endLine":258,"endColumn":34,"suggestions":"83"},{"ruleId":"60","severity":1,"message":"84","line":359,"column":12,"nodeType":"62","messageId":"63","endLine":359,"endColumn":24},{"ruleId":"60","severity":1,"message":"85","line":370,"column":6,"nodeType":"62","messageId":"63","endLine":370,"endColumn":18},{"ruleId":"60","severity":1,"message":"86","line":390,"column":11,"nodeType":"62","messageId":"63","endLine":390,"endColumn":21},{"ruleId":"78","severity":1,"message":"87","line":412,"column":8,"nodeType":"80","endLine":412,"endColumn":10,"suggestions":"88"},{"ruleId":"78","severity":1,"message":"89","line":437,"column":7,"nodeType":"80","endLine":437,"endColumn":9,"suggestions":"90"},{"ruleId":"60","severity":1,"message":"64","line":4,"column":10,"nodeType":"62","messageId":"63","endLine":4,"endColumn":17},{"ruleId":"60","severity":1,"message":"91","line":8,"column":9,"nodeType":"62","messageId":"63","endLine":8,"endColumn":22},{"ruleId":"60","severity":1,"message":"92","line":17,"column":13,"nodeType":"62","messageId":"63","endLine":17,"endColumn":20},{"ruleId":"60","severity":1,"message":"93","line":18,"column":13,"nodeType":"62","messageId":"63","endLine":18,"endColumn":20},{"ruleId":"60","severity":1,"message":"94","line":36,"column":13,"nodeType":"62","messageId":"63","endLine":36,"endColumn":24},{"ruleId":"60","severity":1,"message":"95","line":47,"column":30,"nodeType":"62","messageId":"63","endLine":47,"endColumn":47},{"ruleId":"60","severity":1,"message":"96","line":55,"column":12,"nodeType":"62","messageId":"63","endLine":55,"endColumn":19},{"ruleId":"60","severity":1,"message":"97","line":57,"column":10,"nodeType":"62","messageId":"63","endLine":57,"endColumn":20},{"ruleId":"60","severity":1,"message":"98","line":64,"column":9,"nodeType":"62","messageId":"63","endLine":64,"endColumn":26},{"ruleId":"60","severity":1,"message":"99","line":132,"column":12,"nodeType":"62","messageId":"63","endLine":132,"endColumn":29},{"ruleId":"60","severity":1,"message":"100","line":207,"column":12,"nodeType":"62","messageId":"63","endLine":207,"endColumn":28},{"ruleId":"60","severity":1,"message":"101","line":217,"column":12,"nodeType":"62","messageId":"63","endLine":217,"endColumn":27},{"ruleId":"60","severity":1,"message":"102","line":311,"column":12,"nodeType":"62","messageId":"63","endLine":311,"endColumn":22},{"ruleId":"78","severity":1,"message":"103","line":341,"column":8,"nodeType":"80","endLine":341,"endColumn":14,"suggestions":"104"},{"ruleId":"60","severity":1,"message":"105","line":343,"column":12,"nodeType":"62","messageId":"63","endLine":343,"endColumn":21},{"ruleId":"60","severity":1,"message":"106","line":374,"column":12,"nodeType":"62","messageId":"63","endLine":374,"endColumn":20},{"ruleId":"60","severity":1,"message":"107","line":417,"column":11,"nodeType":"62","messageId":"63","endLine":417,"endColumn":29},{"ruleId":"60","severity":1,"message":"108","line":422,"column":11,"nodeType":"62","messageId":"63","endLine":422,"endColumn":20},{"ruleId":"60","severity":1,"message":"109","line":499,"column":15,"nodeType":"62","messageId":"63","endLine":499,"endColumn":29},{"ruleId":"60","severity":1,"message":"110","line":500,"column":15,"nodeType":"62","messageId":"63","endLine":500,"endColumn":19},{"ruleId":"60","severity":1,"message":"111","line":501,"column":13,"nodeType":"62","messageId":"63","endLine":501,"endColumn":19},{"ruleId":"78","severity":1,"message":"112","line":507,"column":8,"nodeType":"80","endLine":507,"endColumn":29,"suggestions":"113"},{"ruleId":"78","severity":1,"message":"114","line":574,"column":9,"nodeType":"80","endLine":574,"endColumn":11,"suggestions":"115"},{"ruleId":"78","severity":1,"message":"116","line":577,"column":21,"nodeType":"117","endLine":577,"endColumn":42},{"ruleId":"60","severity":1,"message":"118","line":799,"column":12,"nodeType":"62","messageId":"63","endLine":799,"endColumn":24},{"ruleId":"60","severity":1,"message":"119","line":884,"column":11,"nodeType":"62","messageId":"63","endLine":884,"endColumn":27},{"ruleId":"60","severity":1,"message":"120","line":887,"column":11,"nodeType":"62","messageId":"63","endLine":887,"endColumn":27},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useForm' is defined but never used.","'toast' is defined but never used.","'formatDistanceToNowStrict' is defined but never used.","'AccordionItemState' is defined but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'BillServ' is assigned a value but never used.","'facilities' is assigned a value but never used.","'setFacilities' is assigned a value but never used.","'expanded' is assigned a value but never used.","'setExpanded' is assigned a value but never used.","'handleCreateNew' is assigned a value but never used.","'field' is assigned a value but never used.","'handleRow' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'BillServ' and 'getFacilities'. Either include them or remove the dependency array.","ArrayExpression",["121"],"React Hook useEffect has a missing dependency: 'selectedOrders'. Either include it or remove the dependency array.",["122"],"'currentOrder' is assigned a value but never used.","'ProductEntry' is assigned a value but never used.","'handleEdit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'state.DispenseModule.selectedDispense' and 'state.currentClients'. Either include them or remove the dependency array.",["123"],"React Hook useEffect has missing dependencies: 'BillServ' and 'state.currentClients'. Either include them or remove the dependency array.",["124"],"'ProductCreate' is defined but never used.","'success' is assigned a value but never used.","'message' is assigned a value but never used.","'inventoryId' is assigned a value but never used.","'setPaymentOptions' is assigned a value but never used.","'inputEl' is assigned a value but never used.","'hidestatus' is defined but never used.","'showDocumentation' is assigned a value but never used.","'getSearchfacility' is assigned a value but never used.","'handleChangeType' is assigned a value but never used.","'handleClickProd' is assigned a value but never used.","'handleQtty' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'documentNo', 'quantity', 'sellingprice', 'source', 'totalamount', and 'type'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProductEntry' needs the current value of 'documentNo'.",["125"],"'resetform' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","'handleChangeAmount' is assigned a value but never used.","'newclient' is assigned a value but never used.","'paymentoptions' is assigned a value but never used.","'info' is assigned a value but never used.","'billme' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getFacilities', 'medication', 'productItem.length', and 'source'. Either include them or remove the dependency array.",["126"],"React Hook useEffect has missing dependencies: 'SubwalletServ', 'getFacilities', and 'setState'. Either include them or remove the dependency array.",["127"],"Assignments to the 'calcamount1' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","BinaryExpression","'productModal' is assigned a value but never used.","'handleAddproduct' is assigned a value but never used.","'handlecloseModal' is assigned a value but never used.",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [BillServ, getFacilities]",{"range":"142","text":"143"},"Update the dependencies array to be: [selectedOrders, state.financeModule.show]",{"range":"144","text":"145"},"Update the dependencies array to be: [state.DispenseModule.selectedDispense, state.currentClients]",{"range":"146","text":"147"},"Update the dependencies array to be: [BillServ, state.currentClients]",{"range":"148","text":"149"},"Update the dependencies array to be: [date, documentNo, quantity, sellingprice, source, totalamount, type]",{"range":"150","text":"151"},"Update the dependencies array to be: [getFacilities, medication, productItem.length, source, state.financeModule]",{"range":"152","text":"153"},"Update the dependencies array to be: [SubwalletServ, getFacilities, setState]",{"range":"154","text":"155"},[8790,8792],"[BillServ, getFacilities]",[9202,9228],"[selectedOrders, state.financeModule.show]",[17670,17672],"[state.DispenseModule.selectedDispense, state.currentClients]",[18497,18499],"[BillServ, state.currentClients]",[11277,11283],"[date, documentNo, quantity, sellingprice, source, totalamount, type]",[16446,16467],"[getFacilities, medication, productItem.length, source, state.financeModule]",[18586,18588],"[SubwalletServ, getFacilities, setState]"]
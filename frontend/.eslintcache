[{"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js":"1","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js":"2","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js":"3","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js":"4","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js":"5","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Facility.js":"6","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js":"7","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js":"8","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\HSModules.js":"9","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js":"10","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js":"11","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\reportWebVitals.js":"12","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryReport.js":"13","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js":"14","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js":"15","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js":"16","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryHome.js":"17","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\DeptUnits.js":"18","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Roaster.js":"19","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js":"20","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Location.js":"21","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Store.js":"22","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js":"23","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Accessibility.js":"24","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js":"25","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js":"26","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js":"27","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js":"28","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FacilityModule.js":"29","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Products.js":"30","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicHome.js":"31","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicReport.js":"32","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClinicModule.js":"33","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicStore.js":"34","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicEntry.js":"35","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Patient.js":"36","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Clinic.js":"37","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Encounter.js":"38","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicSetup.js":"39","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\EncounterRight.js":"40"},{"size":3255,"mtime":1612295978801,"results":"41","hashOfConfig":"42"},{"size":6848,"mtime":1612267166643,"results":"43","hashOfConfig":"42"},{"size":38856,"mtime":1611912257779,"results":"44","hashOfConfig":"42"},{"size":56633,"mtime":1612263598234,"results":"45","hashOfConfig":"42"},{"size":3070,"mtime":1611089651447,"results":"46","hashOfConfig":"42"},{"size":29287,"mtime":1610499792755,"results":"47","hashOfConfig":"42"},{"size":40586,"mtime":1611144169606,"results":"48","hashOfConfig":"42"},{"size":958,"mtime":1611095384833,"results":"49","hashOfConfig":"42"},{"size":156,"mtime":1610340977169,"results":"50","hashOfConfig":"42"},{"size":602,"mtime":1610166221216,"results":"51","hashOfConfig":"42"},{"size":500,"mtime":1606167681327,"results":"52","hashOfConfig":"42"},{"size":362,"mtime":1606167681327,"results":"53","hashOfConfig":"42"},{"size":8924,"mtime":1610239695153,"results":"54","hashOfConfig":"42"},{"size":52276,"mtime":1611792286916,"results":"55","hashOfConfig":"42"},{"size":148,"mtime":1610340754492,"results":"56","hashOfConfig":"42"},{"size":144,"mtime":1610340849334,"results":"57","hashOfConfig":"42"},{"size":870,"mtime":1611328825632,"results":"58","hashOfConfig":"42"},{"size":153,"mtime":1610341642391,"results":"59","hashOfConfig":"42"},{"size":142,"mtime":1610340882234,"results":"60","hashOfConfig":"42"},{"size":9318,"mtime":1610307391617,"results":"61","hashOfConfig":"42"},{"size":40633,"mtime":1611172112597,"results":"62","hashOfConfig":"42"},{"size":40449,"mtime":1611328408056,"results":"63","hashOfConfig":"42"},{"size":146,"mtime":1610340786924,"results":"64","hashOfConfig":"42"},{"size":153,"mtime":1610345735519,"results":"65","hashOfConfig":"42"},{"size":7947,"mtime":1611557856981,"results":"66","hashOfConfig":"42"},{"size":161,"mtime":1610350517503,"results":"67","hashOfConfig":"42"},{"size":412,"mtime":1610551204385,"results":"68","hashOfConfig":"42"},{"size":9542,"mtime":1610481859369,"results":"69","hashOfConfig":"42"},{"size":6714,"mtime":1610347518133,"results":"70","hashOfConfig":"42"},{"size":40739,"mtime":1611416060016,"results":"71","hashOfConfig":"42"},{"size":960,"mtime":1612360743886,"results":"72","hashOfConfig":"42"},{"size":8924,"mtime":1612264316226,"results":"73","hashOfConfig":"42"},{"size":7899,"mtime":1612361292650,"results":"74","hashOfConfig":"42"},{"size":38856,"mtime":1612264335426,"results":"75","hashOfConfig":"42"},{"size":52273,"mtime":1612296062100,"results":"76","hashOfConfig":"42"},{"size":75451,"mtime":1612351280313,"results":"77","hashOfConfig":"42"},{"size":40664,"mtime":1612289586031,"results":"78","hashOfConfig":"42"},{"size":9251,"mtime":1612364814712,"results":"79","hashOfConfig":"42"},{"size":9318,"mtime":1612264326133,"results":"80","hashOfConfig":"42"},{"size":193,"mtime":1612364635447,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"vuhkqw",{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"96"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"104"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"116"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"167"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"167"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"167"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\App.js",["187","188"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Home.js",["189","190","191","192","193"],"import React, {useContext, useEffect, useState} from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink, useHistory} from 'react-router-dom'\r\nimport FacilityModule from './FacilityModule'\r\nimport InventoryModule from './InventoryModule'\r\nimport ClinicModule from './ClinicModule'\r\n/* import NavBar from './NavBar' */\r\nimport LandingPage from './LandingPage'\r\nimport {UserContext} from '../context'\r\nimport client from '../feathers'\r\n\r\nexport default function Home() {\r\n    let { path, url } = useRouteMatch();\r\n    const {user,setUser} = useContext(UserContext)\r\n\r\n    \r\n    //console.log(path)\r\n\r\n    return (\r\n        <div>\r\n            <NavBar url={url}/>\r\n                     \r\n            <Switch>\r\n            <Route path={path} exact>\r\n                    <LandingPage />\r\n                </Route>\r\n                <Route path={`${path}/inventory`} >\r\n                    <InventoryModule />\r\n                </Route>\r\n                <Route path={`${path}/facility`} >\r\n                    <FacilityModule />\r\n                </Route>\r\n                <Route path={`${path}/clinic`} >\r\n                    <ClinicModule />\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n} \r\n\r\nfunction NavBar({url}){\r\n    const [fullname, setFullname]=useState(\"\")\r\n    const [userFacility, setUserFacility]=useState()\r\n    const {user,setUser} = useContext(UserContext)\r\n    const history =useHistory()\r\n    \r\n    const reAuth =  async() =>{\r\n        try{\r\n            const resp = await client.reAuthenticate();\r\n            //console.log(resp)\r\n            await setUser(resp.user)\r\n            /* console.log(\"lastname:\",  user.lastname)\r\n            console.log(\"reauth tried\")\r\n            */\r\n           console.log(user)\r\n            return\r\n            }\r\n        catch(error){\r\n            console.log(error)\r\n           history.push(\"/\")\r\n        }  \r\n    }\r\n\r\n    /* useEffect(() => {\r\n        const localUser= JSON.parse(localStorage.getItem(\"user\"))\r\n        setUser(localUser)\r\n        console.log(user)\r\n        return () => {\r\n           \r\n        }\r\n    }, []) */\r\n\r\n\r\n    useEffect( () => {\r\n        if(!user){\r\n           console.log(\"No user\")\r\n            reAuth()\r\n          \r\n            //history.push(\"/\")    \r\n             return\r\n        }\r\n\r\n        async function getFullname(){\r\n            const zed= user.firstname+\" \"+user.lastname\r\n         const resp =   await setFullname(zed)\r\n        // console.log(zed)\r\n         if (user.employeeData.length){\r\n            user.currentEmployee= user.employeeData[0]\r\n            const fac=  user.currentEmployee.facilityDetail.facilityName\r\n           await setUserFacility(fac)\r\n         }else{\r\n            user.currentEmployee= null\r\n           \r\n         }\r\n        \r\n         await setUser(user)\r\n         localStorage.setItem(\"user\",JSON.stringify(user))\r\n         \r\n         \r\n         \r\n        }\r\n        getFullname()\r\n        console.log(user)\r\n       /*  console.log(user.lastname)\r\n      console.log(user) */\r\n        return () => {\r\n            \r\n        }\r\n    },[] )\r\n\r\n    const handleFacilityClick=()=>{\r\n        const availableFacilities=[]\r\n        if (Array.isArray(user.employeeData)&& user.employeeData.length){\r\n            user.employeeData.map((emp)=>{\r\n             return   availableFacilities.push(emp.facilityDetail)\r\n            })\r\n        }\r\n        console.log(availableFacilities)\r\n    }\r\n    if (!user) return 'Loading...'\r\n    return(\r\n        <div>\r\n           <nav className=\"navbar is-small minHt has-background-info\" role=\"navigation\" aria-label=\"main navigation\">\r\n                <div className=\"navbar-brand\">\r\n                    <div className=\"navbar-item is-size-5 \" onClick={handleFacilityClick}> <strong>{userFacility ||\"\"} </strong> </div>\r\n                    {/* <div className=\"navbar-item\" href=\"https://bulma.io\">\r\n                    <img src=\"https://bulma.io/images/bulma-logo.png\" width=\"112\" height=\"28\" />\r\n                    </div> */}\r\n\r\n                    <div role=\"button\" className=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\r\n                    <span aria-hidden=\"true\"></span>\r\n                    <span aria-hidden=\"true\"></span>\r\n                    <span aria-hidden=\"true\"></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div id=\"navbarBasicExample\" className=\"navbar-menu\">\r\n                    <div className=\"navbar-start\">\r\n                    {/* <div className=\"navbar-item\">\r\n                        Home\r\n                    </div>\r\n\r\n                    <div className=\"navbar-item\">\r\n                        Documentation\r\n                    </div> */}\r\n\r\n                    \r\n                    </div>\r\n\r\n                    <div className=\"navbar-end\">\r\n                    <div className=\"navbar-item has-dropdown is-hoverable\">\r\n                        <div className=\"navbar-link\">\r\n                        \r\n                            <div className=\"button is-info is-inverted\">\r\n                                <span className=\"icon\">\r\n                                <i className=\"fa fa-user-md\"></i>\r\n                                </span>\r\n                                <span>{fullname}</span>\r\n                                \r\n                                {/* <span>{user.firstname}</span> */}\r\n                            </div>\r\n                           \r\n                        </div>\r\n\r\n                            <div className=\"navbar-dropdown bckcolor\">\r\n                                <div className=\"navbar-item\">\r\n                                    <NavLink to={`${url}`}>Landing Page</NavLink> \r\n                                </div>\r\n                                <div className=\"navbar-item\">\r\n                                    <NavLink to={`${url}/clinic`}>Clinic</NavLink>\r\n                                </div>\r\n                                <div className=\"navbar-item\">\r\n                                    <NavLink to={`${url}/inventory`}>Inventory</NavLink>\r\n                                </div>\r\n                                <div className=\"navbar-item\">\r\n                                    <NavLink to={`${url}/facility`}>Admin</NavLink>\r\n                                </div>\r\n                                <div className=\"navbar-item\">\r\n                                    Front Desk\r\n                                </div>\r\n                                <hr className=\"navbar-divider\" />\r\n                                <div className=\"navbar-item\">\r\n                                   Sign Out\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n \r\n  ",["194","195"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryStore.js",["196","197","198","199","200","201","202","203"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductExit.js",["204","205","206","207","208","209","210","211","212","213","214","215"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\nvar random = require('random-string-generator');\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function ProductEntry() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ProductExitList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ProductExitModule.show ==='create')&&<ProductExitCreate />}\r\n                {(state.ProductExitModule.show ==='detail')&&<ProductExitDetail  />}\r\n                {(state.ProductExitModule.show ==='modify')&&<ProductExitModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductExitCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Sales\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(0)\r\n    const [qamount,setQAmount] = useState(null)\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [inventoryId,setInventoryId] = useState(\"\")\r\n    const [baseunit,setBaseunit] = useState(\"\")\r\n    const [quantity,setQuantity] = useState(\"\")\r\n    const [sellingprice,setSellingPrice] = useState(\"\")\r\n    const [costprice,setCostprice] = useState(0)\r\n    const [invquantity,setInvQuantity] = useState(\"\")\r\n    const [calcamount,setCalcAmount] = useState(0)\r\n    const [productItem,setProductItem] = useState([])\r\n    const {state}=useContext(ObjectContext)\r\n    const inputEl = useRef(0);\r\n    let calcamount1\r\n    let hidestatus\r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const productItemI={\r\n        productId,\r\n        name,\r\n        quantity,\r\n        sellingprice,\r\n        amount:qamount||calcamount,\r\n        baseunit,\r\n        costprice\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setProductId(obj.productId)\r\n        setName(obj.name)\r\n        setBaseunit(obj.baseunit)\r\n        setInventoryId(obj.inventoryId)\r\n        setSellingPrice(obj.sellingprice)\r\n        setInvQuantity(obj.quantity)\r\n        setCostprice(obj.costprice)\r\n        if (!obj){\r\n            //\"clear stuff\"\r\n            setProductId(\"\")\r\n            setName(\"\")\r\n            setBaseunit(\"\")\r\n            setInventoryId(\"\")\r\n            setSellingPrice(\"\")\r\n            setInvQuantity(\"\")\r\n            setQAmount(null)\r\n            setCostprice(\"\")\r\n           // setCalcAmount(null)\r\n\r\n        }\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n    const handleUpdateTotal=()=>{\r\n\r\n        \r\n        setTotalamount(prevtotal=>Number(prevtotal) + Number(calcamount))\r\n    }\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n\r\n    const handleAmount= async()=>{\r\n        await setQAmount(null)\r\n       // alert(\"Iam chaning qamount\")\r\n    }\r\n    const handleClickProd=async()=>{\r\n        console.log(\"amount: \",productItemI.amount)\r\n        console.log(\"qamount: \",qamount)\r\n        console.log(\"calcamount: \",calcamount)\r\n        await setSuccess(false)\r\n        await setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n       handleUpdateTotal()\r\n        setName(\"\")\r\n        setBaseunit(\"\")\r\n        setQuantity(\"\")\r\n        setInventoryId(\"\")\r\n        setSellingPrice(\"\")\r\n        setInvQuantity(\"\")\r\n            handleAmount()\r\n       // setCalcAmount(null)\r\n       await setSuccess(true)\r\n       console.log(success)\r\n       console.log(qamount)\r\n       console.log(productItem)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const handleQtty=async(e)=>{\r\n        if (invquantity<e.target.value){\r\n            toast({\r\n                message: 'You can not sell more quantity than exist in inventory ' ,\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              })\r\n            return\r\n        }\r\n        setQuantity(e.target.value)\r\n        calcamount1=quantity*sellingprice\r\n        await setCalcAmount(calcamount1)\r\n        console.log(calcamount)\r\n\r\n       \r\n\r\n    }\r\n\r\n    useEffect( () => {\r\n         setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n       setCalcAmount(quantity*sellingprice) \r\n        return () => {\r\n            \r\n        }\r\n    },[date])\r\n\r\n    const resetform=()=>{\r\n     setType(\"Sales\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setBaseunit()\r\n    setCostprice()\r\n    setProductItem([])\r\n    }\r\n\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        await setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n        productEntry.productitems=productItem\r\n        productEntry.createdby=user._id\r\n        productEntry.transactioncategory=\"debit\"\r\n       \r\n          console.log(\"b4 facility\",productEntry);\r\n          if (user.currentEmployee){\r\n         productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }else{\r\n            toast({\r\n                message: 'You can not remove inventory from any organization',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n          }\r\n          if (state.StoreModule.selectedStore._id){\r\n            productEntry.storeId=state.StoreModule.selectedStore._id\r\n          }else{\r\n            toast({\r\n                message: 'You need to select a store before removing inventory',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n\r\n          }\r\n          console.log(\"b4 create\",productEntry);\r\n        ProductEntryServ.create(productEntry)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                resetform()\r\n               /*  setMessage(\"Created ProductEntry successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'ProductExit created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n                  const today=new Date().toLocaleString()\r\n      \r\n                  setDate(today)\r\n                  const invoiceNo=random(6,'uppernumeric')\r\n                setDocumentNo(invoiceNo)\r\n                setType(\"Sales\")\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductExit ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    console.log(\"i am rendering\")\r\n\r\n    useEffect(() => {\r\n        const today=new Date().toLocaleString()\r\n        console.log(today)\r\n        setDate(today)\r\n        const invoiceNo=random(6,'uppernumeric')\r\n        setDocumentNo(invoiceNo)\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Product Exit: Product Exit- Sales, Dispense, Audit, Transfer out\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n            <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n            <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType}>\r\n                           <option value=\"\">Choose Type </option>\r\n                            <option value=\"Sales\">Sales </option>\r\n                            <option value=\"In-house\">In-House </option>\r\n                            <option value=\"Dispense\">Dispense</option>\r\n                            <option value=\"Audit\">Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"client\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Client\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n           \r\n            </div>\r\n            </div> {/* horizontal end */}\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                    <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n               <div className=\"field is-horizontal\">\r\n               <div className=\"field-body\">\r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={e=>setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-coins\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n\r\n                </div> \r\n                </div> \r\n               \r\n                </form>   \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Product Items:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <InventorySearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                 {sellingprice &&   \"N\"}{sellingprice} {sellingprice &&   \"per\"}  {baseunit} {invquantity} {sellingprice &&   \"remaining\"} \r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\" >\r\n                <div className=\"field\" style={{width:\"40%\"}}>\r\n                <p className=\"control has-icons-left\" >\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={ e=> handleQtty(e)} placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hashtag\"></i>\r\n                    </span>\r\n                   \r\n                </p>\r\n        <label >{baseunit}</label>\r\n            </div> \r\n            <div className=\"field\">\r\n            <label>Amount:</label><p>{quantity*sellingprice}</p>\r\n            </div>\r\n            <div className=\"field\" style={{width:\"40%\"}}>\r\n                <p className=\"control has-icons-left \" /* style={{display:\"none\"}} */>\r\n                    <input className=\"input is-small\"  name=\"qamount\" value={qamount} type=\"text\"  onChange={async e=> await setQAmount(e.target.value)}  placeholder=\"Amount\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-dollar-sign\"></i>\r\n                    </span>\r\n                </p>\r\n\r\n            </div> \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n            \r\n       {(productItem.length>0) && <div>\r\n            <label>Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Selling Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.sellingprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2 is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Sell\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" disabled={!productItem.length>0} /* onClick={onSubmit} */>\r\n                        Clear\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductExitList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProductEntry, setSelectedProductEntry]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedProductEntry(ProductEntry)\r\n\r\n        const    newProductExitModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductEntryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                transactioncategory:\"debit\",\r\n                storeId:state.StoreModule.selectedStore._id,\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProductEntry= await ProductEntryServ.find(\r\n                {query: {\r\n                    transactioncategory:\"debit\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProductEntry.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        /* toast({\r\n                            message: 'You do not qualify to view this',\r\n                            type: 'is-danger',\r\n                            dismissible: true,\r\n                            pauseOnHover: true,\r\n                          }) \r\n                          return */\r\n                        const findProductEntry= await ProductEntryServ.find(\r\n                            {query: {\r\n                                transactioncategory:\"debit\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProductEntry.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" ProductEntry  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n         /*    useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[]) */\r\n\r\n            useEffect(() => {\r\n               \r\n                if (!state.StoreModule.selectedStore){\r\n                    toast({\r\n                        message: 'kindly select a store',\r\n                        type: 'is-danger',\r\n                        dismissible: true,\r\n                        pauseOnHover: true,\r\n                      }) \r\n                      return\r\n                    getFacilities()\r\n\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductEntryServ.on('created', (obj)=>getFacilities())\r\n                ProductEntryServ.on('updated', (obj)=>getFacilities())\r\n                ProductEntryServ.on('patched', (obj)=>getFacilities())\r\n                ProductEntryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                console.log(\"store changed\")\r\n                return () => {\r\n                   \r\n                }\r\n            }, [state.StoreModule.selectedStore])\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {state.StoreModule.selectedStore?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search ProductEntry\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Product Additions to Inventory </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th>Client</th>\r\n                                        <th><abbr title=\"Document No\">Document No</abbr></th>\r\n                                        <th><abbr title=\"Total Amount\">Total Amount</abbr></th>\r\n                                        <th><abbr title=\"Enteredby\">Entered By</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{ProductEntry.date}</td>\r\n                                            <th>{ProductEntry.type}</th>\r\n                                            <td>{ProductEntry.source}</td>\r\n                                            <td>{ProductEntry.documentNo}</td>\r\n                                            <td>{ProductEntry.totalamount}</td>\r\n                                            <td>{ProductEntry.enteredby}</td>\r\n                                            <td><span className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading... Choose a Store</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductExitDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductExitModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Selling Price\">Selling Price</abbr></th>\r\n                    <th><abbr title=\"Amount\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.sellingprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductExitModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductExitModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductExitModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductExitModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductExitModule:newProductExitModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InventorySearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('inventory')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n   const {user} = useContext(UserContext) \r\n   const {state}=useContext(ObjectContext)\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n    }\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            getSearchfacility(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 facility: user.currentEmployee.facilityDetail._id,\r\n                 storeId: state.StoreModule.selectedStore._id,\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`} style={{width:\"100%\"}}>\r\n                        <div className=\"dropdown-trigger\" style={{width:\"100%\"}}>\r\n                            <DebounceInput className=\"input is-small  is-expanded\" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu expanded\" style={{width:\"100%\"}}>\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" /* onClick={handleAddproduct} */> <span> {val} is not in your inventory</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <div><span>{facility.name}</span></div>\r\n                                        <div><span><strong>{facility.quantity}</strong></span>\r\n                                        <span>{facility.baseunit}(s) remaining</span>\r\n                                        <span className=\"padleft\"><strong>Price:</strong> N{facility.sellingprice}</span></div>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        <ProductCreate />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Login.js",["216","217","218"],"import React, {useState,useContext} from 'react'\r\nimport client from '../feathers'\r\nimport { useForm } from \"react-hook-form\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport {UserContext} from '../context'\r\n\r\nexport default function Login() {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [error, setError] =useState(true)\r\n    const [errorMessage,setErrorMessage] = useState(\"\")\r\n    const userServ=client.service('/users')\r\n    const history = useHistory()\r\n    const {user,setUser} = useContext(UserContext)\r\n\r\n   \r\nconst onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setErrorMessage(\"\")\r\n        setError(false)\r\n           const  email=data.email\r\n           const password=data.password\r\n         \r\n          \r\n          client.authenticate({\r\n            strategy:'local',\r\n            email,\r\n            password\r\n        }).then(async (res)=>{\r\n                console.log(JSON.stringify(res.user))\r\n                e.target.reset();\r\n               await setUser(res.user)\r\n               console.log(user)\r\n               localStorage.setItem(\"user\",JSON.stringify(res.user))\r\n               history.push(\"/app\")\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setErrorMessage(\"Error loggin in User, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <section className=\"section\">\r\n        <div className=\"container\">\r\n        <div className=\"columns is-centered\">\r\n        <div className=\"column is-4 \">\r\n        <div className=\"card v-centered\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Health Stack\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n           <div className=\"field\">\r\n            <p className=\"control has-icons-left has-icons-right\">\r\n                <input className=\"input\" ref={register({ required: true })}  name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n                  <span className=\"icon is-small is-left\">\r\n                     <i className=\"fas fa-envelope\"></i>\r\n                </span>\r\n                \r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <input className=\"input\" ref={register({ required: true })} name=\"password\" type=\"password\" placeholder=\"Password\"/>\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"fas fa-lock\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control\">\r\n                <button className=\"button is-success is-small\">\r\n                    Login\r\n                </button>\r\n            </p>\r\n        </div>\r\n        { error && <div className=\"message\"> {errorMessage}</div>}\r\n        </form>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </section>\r\n    )\r\n}\r\n",["219","220"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Facility.js",["221"],"import React, {useState,useContext, useEffect} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\n\r\nexport default function Facility() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedFacility,setSelectedFacility]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    //console.log(\"facility parent\", state)\r\n    \r\n\r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Facility  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <FacilityList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.facilityModule.show ==='create')&&<FacilityCreate />}\r\n                {(state.facilityModule.show ==='detail')&&<FacilityDetail  />}\r\n                {(state.facilityModule.show ==='modify')&&<FacilityModify facility={selectedFacility} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function FacilityCreate(){\r\n    const { register, handleSubmit} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n\r\n    \r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n                setMessage(\"Created facility successfully\")\r\n                setSuccess(true)\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Facility\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function FacilityList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const facilityServ=client.service('facility')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedFacility, setSelectedFacility]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n\r\n   \r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(facility)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",facility)\r\n\r\n        await setSelectedFacility(facility)\r\n\r\n        const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='facilityName'\r\n       console.log(val)\r\n       facilityServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" facility  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n\r\n           /*  if (val.length>2){\r\n                console.log(\"in\")\r\n               \r\n            }\r\n\r\n        }\r\n     */\r\n        const getFacilities=()=>{\r\n            facilityServ.find({query: {\r\n              \r\n                $limit:20,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }})\r\n            .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" facility  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                    setError(true)\r\n                })\r\n\r\n        }\r\n\r\n    useEffect(() => {\r\n        getFacilities()\r\n\r\n        facilityServ.on('created', (obj)=>getFacilities())\r\n        facilityServ.on('updated', (obj)=>getFacilities())\r\n        facilityServ.on('patched', (obj)=>getFacilities())\r\n        facilityServ.on('removed', (obj)=>getFacilities())\r\n        return () => {\r\n           \r\n        }\r\n    },[])\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n            <>   \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Facilities </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"S/No\">S/No</abbr></th>\r\n                                        <th>Facility Name</th>\r\n                                        <th><abbr title=\"Address\"> Address</abbr></th>\r\n                                        <th><abbr title=\"City\">City</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th><abbr title=\"Category\">Category</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((facility, i)=>(\r\n\r\n                                            <tr key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{facility.facilityName}</th>\r\n                                            <td>{facility.facilityAddress}</td>\r\n                                            <td>{facility.facilityCity}</td>\r\n                                            <td>{facility.facilityContactPhone}</td>\r\n                                            <td>{facility.facilityEmail}</td>\r\n                                            <td>{facility.facilityType}</td>\r\n                                            <td>{facility.facilityCategory}</td>\r\n                                           \r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>               \r\n            </>\r\n              \r\n    )\r\n}\r\n\r\nexport function FacilityDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const facility =state.facilityModule.selectedFacility \r\n\r\n    const handleEdit= async()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Facility Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <fieldset>\r\n                <div className=\"field \">\r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: <span className=\"is-small \"   name=\"facilityName\"> {facility.facilityName} </span>\r\n                        </label>\r\n                \r\n                        \r\n             \r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Address:\r\n                   \r\n                    <span className=\"is-small \"  name=\"facilityAddress\">{facility.facilityAddress} </span> \r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>City: \r\n                \r\n                    <span className=\"is-small \"  name=\"facilityCity\">{facility.facilityCity}</span> \r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    <span className=\"is-small \"  name=\"facilityContactPhone\" >{facility.facilityContactPhone}</span>\r\n                        </label>\r\n \r\n                \r\n                \r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     <span className=\"is-small \"  name=\"facilityEmail\" >{facility.facilityEmail}</span>\r\n                    \r\n                         </label>\r\n\r\n               \r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>CEO:\r\n                    <span className=\"is-small \"  name=\"facilityOwner\">{facility.facilityOwner}</span>\r\n                    </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Type:              \r\n                    <span className=\"is-small \"  name=\"facilityType\">{facility.facilityType}</span>\r\n                </label>\r\n \r\n                </div>\r\n            <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-small \"  name= \"facilityCategory\">{facility.facilityCategory}</span>\r\n                </label>\r\n\r\n\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </fieldset>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function FacilityModify(){\r\n    const { register, handleSubmit, setValue,reset } = useForm(); //watch, errors,\r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    const facilityServ=client.service('/facility')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const facility =state.facilityModule.selectedFacility \r\n\r\n        useEffect(() => {\r\n            setValue(\"facilityName\", facility.facilityName,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityAddress\", facility.facilityAddress,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityCity\", facility.facilityCity,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityContactPhone\", facility.facilityContactPhone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityEmail\", facility.facilityEmail,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityOwner\", facility.facilityOwner,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityType\", facility.facilityType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"facilityCategory\", facility.facilityCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newfacilityModule={\r\n        selectedFacility:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newfacilityModule={\r\n            selectedFacility:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=facility._id\r\n        if (conf){\r\n             \r\n        facilityServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n                setMessage(\"Deleted facility successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200);\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error deleting facility, probable network issues \"+ err )\r\n                setError(true)\r\n                setTimeout(() => {\r\n                    setError(false)\r\n                }, 200);\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        console.log(data)\r\n          //data.createdby=user._id\r\n          //console.log(data);\r\n          \r\n        facilityServ.update(facility._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n                setMessage(\"updated facility successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setMessage(\"Error creating facility, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Facility Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\">Name \r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"facilityName\" type=\"text\" placeholder=\"Name of Facility\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Address\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"facilityAddress\" type=\"text\" placeholder=\"Address of Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">City\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCity\" type=\"text\" placeholder=\"City/Town\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityContactPhone\" type=\"text\" placeholder=\"Contact Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityEmail\" type=\"email\" placeholder=\"Facility Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">CEO\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityOwner\" type=\"text\" placeholder=\"Facility Owner\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Type\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityType\" type=\"text\" placeholder=\"Facility Type\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facilityCategory\" type=\"text\" placeholder=\"Facility Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div>\r\n            <div className=\"field  is-grouped\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={handleDelete}>\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </form>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   ",["222","223"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Employee.js",["224","225"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Employee() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedEmployee,setSelectedEmployee]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Employee  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <EmployeeList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.EmployeeModule.show ==='create')&&<EmployeeCreate />}\r\n                {(state.EmployeeModule.show ==='detail')&&<EmployeeDetail  />}\r\n                {(state.EmployeeModule.show ==='modify')&&<EmployeeModify Employee={selectedEmployee} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function EmployeeCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeEmployee.FacilityId)//\r\n      if (!user.stacker){\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    },[user])\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n          data.createdby=user._id\r\n          //console.log(data);\r\n          if (user.currentEmployee){\r\n         // data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        EmployeeServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Employee successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Employee created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating employee ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Employee\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            { success && <div className=\"message\"> {message}</div>}\r\n            { error && <div className=\"is-danger\"> {message}</div>}\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"lastname\" type=\"text\" placeholder=\"Last Name\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function EmployeeList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedEmployee, setSelectedEmployee]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Employee)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Employee)\r\n\r\n        await setSelectedEmployee(Employee)\r\n\r\n        const    newEmployeeModule={\r\n            selectedEmployee:Employee,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='firstname'\r\n       console.log(val)\r\n       EmployeeServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Employee  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Employee, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findEmployee= await EmployeeServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findEmployee.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findEmployee= await EmployeeServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findEmployee.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Employee  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Employee, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                EmployeeServ.on('created', (obj)=>getFacilities())\r\n                EmployeeServ.on('updated', (obj)=>getFacilities())\r\n                EmployeeServ.on('patched', (obj)=>getFacilities())\r\n                EmployeeServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Facilities\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Employees </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>First Name</th>\r\n                                        <th><abbr title=\"Last Name\">Last Name</abbr></th>\r\n                                        <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th>\r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Employee, i)=>(\r\n\r\n                                            <tr key={Employee._id} onClick={()=>handleRow(Employee)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Employee.firstname}</th>\r\n                                            <td>{Employee.lastname}</td>\r\n                                            <td>{Employee.profession}</td>\r\n                                            <td>{Employee.phone}</td>\r\n                                            <td>{Employee.email}</td>\r\n                                            <td>{Employee.department}</td>\r\n                                            <td>{Employee.deptunit}</td>\r\n                                            <td>{Employee.facility}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function EmployeeDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const EmployeeServ=client.service('/Employee')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Employee =state.EmployeeModule.selectedEmployee \r\n\r\n    const handleEdit= async()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:Employee,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Employee Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <fieldset>\r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        First Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-medium \"   name=\"EmployeeName\"> {Employee.firstname} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Last Name:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"EmployeeAddress\">{Employee.lastname} </span> \r\n                    </td>\r\n                </tr>\r\n                    <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"EmployeeCity\">{Employee.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-small \"  name=\"EmployeeContactPhone\" >{Employee.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-small \"  name=\"EmployeeEmail\" >{Employee.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-small \"  name=\"EmployeeOwner\">{Employee.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-small \"  name=\"EmployeeType\">{Employee.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr>\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-small \"  name= \"EmployeeCategory\">{Employee.EmployeeCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n            </fieldset>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function EmployeeModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const EmployeeServ=client.service('employee')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Employee =state.EmployeeModule.selectedEmployee \r\n\r\n        useEffect(() => {\r\n            setValue(\"firstname\", Employee.firstname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"lastname\", Employee.lastname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"profession\", Employee.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Employee.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Employee.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Employee.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Employee.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n          /*   setValue(\"EmployeeCategory\", Employee.EmployeeCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newEmployeeModule={\r\n        selectedEmployee:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newEmployeeModule={\r\n            selectedEmployee:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, EmployeeModule:newEmployeeModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Employee._id\r\n        if (conf){\r\n             \r\n        EmployeeServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Employee successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Employee deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Employee, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Employee, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Employee.facility\r\n          //console.log(data);\r\n          \r\n        EmployeeServ.patch(Employee._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Employee successfully\")\r\n                 toast({\r\n                    message: 'Employee updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Employee, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Employee, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Employee Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\">First Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Last Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"lastname\" type=\"text\" placeholder=\"Last Name\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Employee Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"EmployeeCategory\" type=\"text\" placeholder=\"Employee Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            <div className=\"block\">\r\n            <div className=\"field  is-grouped\">\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}",["226","227"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\context.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\HSModules.js",[],["228","229"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\LandingPage.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\index.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\reportWebVitals.js",[],["230","231"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryReport.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\ProductEntry.js",["232","233","234","235","236","237","238"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ProductCreate} from './Products'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function ProductEntry() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ProductEntryList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ProductEntryModule.show ==='create')&&<ProductEntryCreate />}\r\n                {(state.ProductEntryModule.show ==='detail')&&<ProductEntryDetail  />}\r\n                {(state.ProductEntryModule.show ==='modify')&&<ProductEntryModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductEntryCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Purchase Invoice\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(\"\")\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [baseunit,setBaseunit] = useState(\"\")\r\n    const [quantity,setQuantity] = useState()\r\n    const [costprice,setCostprice] = useState()\r\n    const [productItem,setProductItem] = useState([])\r\n    const {state}=useContext(ObjectContext)\r\n    \r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const productItemI={\r\n        productId,\r\n        name,\r\n        quantity,\r\n        costprice,\r\n        amount:quantity*costprice,\r\n        baseunit\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setProductId(obj._id)\r\n        setName(obj.name)\r\n        setBaseunit(obj.baseunit)\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n    const handleClickProd=async()=>{\r\n        await setSuccess(false)\r\n        setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n        setName(\"\")\r\n        setBaseunit(\"\")\r\n        setQuantity(\"\")\r\n        setCostprice(\"\")\r\n       await setSuccess(true)\r\n       console.log(success)\r\n       console.log(productItem)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const resetform=()=>{\r\n     setType(\"Purchase Invoice\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setBaseunit()\r\n    setCostprice()\r\n    setProductItem([])\r\n    }\r\n\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        await setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n        productEntry.productitems=productItem\r\n        productEntry.createdby=user._id\r\n        productEntry.transactioncategory=\"credit\"\r\n\r\n          console.log(\"b4 facility\",productEntry);\r\n          if (user.currentEmployee){\r\n         productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }else{\r\n            toast({\r\n                message: 'You can not add inventory to any organization',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n          }\r\n          if (state.StoreModule.selectedStore._id){\r\n            productEntry.storeId=state.StoreModule.selectedStore._id\r\n          }else{\r\n            toast({\r\n                message: 'You need to select a store before adding inventory',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n\r\n          }\r\n          console.log(\"b4 create\",productEntry);\r\n        ProductEntryServ.create(productEntry)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                resetform()\r\n               /*  setMessage(\"Created ProductEntry successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'ProductEntry created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create ProductEntry: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n            <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n            <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType}>\r\n                           <option value=\"\">Choose Type </option>\r\n                            <option value=\"Purchase Invoice\">Purchase Invoice </option>\r\n                            <option value=\"Initialization\">Initialization</option>\r\n                            <option value=\"Audit\">Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"supplier\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n           \r\n            </div>\r\n            </div> {/* horizontal end */}\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                    <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n               <div className=\"field is-horizontal\">\r\n               <div className=\"field-body\">\r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={async e=> await setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-coins\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n\r\n                </div> \r\n                </div> \r\n               \r\n                </form>   \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Product Items:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={e=>setQuantity(e.target.value)} placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n        <label >{baseunit}</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"costprice\" value={costprice} type=\"text\" onChange={e=>setCostprice(e.target.value)} placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-dollar-sign\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n            \r\n       {(productItem.length>0) && <div>\r\n            <label>Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Create\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductEntryList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProductEntry, setSelectedProductEntry]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedProductEntry(ProductEntry)\r\n\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductEntryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                storeId:state.StoreModule.selectedStore._id,\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProductEntry= await ProductEntryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProductEntry.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        /* toast({\r\n                            message: 'You do not qualify to view this',\r\n                            type: 'is-danger',\r\n                            dismissible: true,\r\n                            pauseOnHover: true,\r\n                          }) \r\n                          return */\r\n                        const findProductEntry= await ProductEntryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProductEntry.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" ProductEntry  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (!state.StoreModule.selectedStore){\r\n                    toast({\r\n                        message: 'kindly select a store',\r\n                        type: 'is-danger',\r\n                        dismissible: true,\r\n                        pauseOnHover: true,\r\n                      }) \r\n                      return\r\n                    getFacilities()\r\n\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductEntryServ.on('created', (obj)=>getFacilities())\r\n                ProductEntryServ.on('updated', (obj)=>getFacilities())\r\n                ProductEntryServ.on('patched', (obj)=>getFacilities())\r\n                ProductEntryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                console.log(\"store changed\")\r\n                return () => {\r\n                   \r\n                }\r\n            }, [state.StoreModule.selectedStore])\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {state.StoreModule.selectedStore?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search ProductEntry\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Product Additions to Inventory </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th>Source</th>\r\n                                        <th><abbr title=\"Document No\">Document No</abbr></th>\r\n                                        <th><abbr title=\"Total Amount\">Total Amount</abbr></th>\r\n                                        <th><abbr title=\"Enteredby\">Entered By</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{ProductEntry.date}</td>\r\n                                            <th>{ProductEntry.type}</th>\r\n                                            <td>{ProductEntry.source}</td>\r\n                                            <td>{ProductEntry.documentNo}</td>\r\n                                            <td>{ProductEntry.totalamount}</td>\r\n                                            <td>{ProductEntry.enteredby}</td>\r\n                                            <td><span className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading... Choose a Store</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductEntryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductEntryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductEntryModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" onClick={handleAddproduct}> <span>Add {val} to product list</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.name}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        <ProductCreate />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Department.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\CareTeam.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventoryHome.js",["239","240","241","242","243","244"],"import React ,{useState,useEffect,useContext} from 'react'\r\nimport Store, { StoreList } from './Store'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\nexport default function InventoryHome() {\r\n   // const [activeModal, setActiveModal]=useState(\"modal is-active \")\r\n    const {state,setState}=useContext(ObjectContext)\r\n    const handleCloseModal=()=>{\r\n        state.showStoreModal  =  \"modal\"                                                                                                                                                        \r\n        setState(state)\r\n        console.log( state.showStoreModal)\r\n    }\r\n    \r\n       \r\n \r\n    return (\r\n       \r\n            <section className= \"section remPadTop\">\r\n               <div className=\"is-1\"> Inventory Module</div>\r\n                                         \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\DeptUnits.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Roaster.js",[],["245","246"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\InventorySetup.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Location.js",["247","248","249","250"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Location() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedLocation,setSelectedLocation]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Location  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <LocationList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.LocationModule.show ==='create')&&<LocationCreate />}\r\n                {(state.LocationModule.show ==='detail')&&<LocationDetail  />}\r\n                {(state.LocationModule.show ==='modify')&&<LocationModify Location={selectedLocation} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function LocationCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const LocationServ=client.service('location')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeLocation.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        LocationServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Location successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Location created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Location ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Location\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"locationType\" type=\"text\" placeholder=\"Type of Location\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Location\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function LocationList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const LocationServ=client.service('location')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedLocation, setSelectedLocation]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newLocationModule={\r\n            selectedLocation:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Location)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Location)\r\n\r\n        await setSelectedLocation(Location)\r\n\r\n        const    newLocationModule={\r\n            selectedLocation:Location,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       LocationServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Location  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Location, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findLocation= await LocationServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findLocation.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findLocation= await LocationServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findLocation.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Location  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Location, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                LocationServ.on('created', (obj)=>getFacilities())\r\n                LocationServ.on('updated', (obj)=>getFacilities())\r\n                LocationServ.on('patched', (obj)=>getFacilities())\r\n                LocationServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Locations\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Locations </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        <th><abbr title=\"Last Name\">Location Type</abbr></th>\r\n                                        {/*<th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                         <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> */}\r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Location, i)=>(\r\n\r\n                                            <tr key={Location._id} onClick={()=>handleRow(Location)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Location.name}</th>\r\n                                            <td>{Location.locationType}</td>\r\n                                            {/*< td>{Location.profession}</td>\r\n                                            <td>{Location.phone}</td>\r\n                                            <td>{Location.email}</td>\r\n                                            <td>{Location.department}</td>\r\n                                            <td>{Location.deptunit}</td> */}\r\n                                            <td>{Location.facility}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function LocationDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const LocationServ=client.service('/Location')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Location =state.LocationModule.selectedLocation \r\n\r\n    const handleEdit= async()=>{\r\n        const    newLocationModule={\r\n            selectedLocation:Location,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Location Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {Location.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Location Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"LocationType\">{Location.locationType} </span> \r\n                    </td>\r\n                </tr>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"LocationCity\">{Location.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"LocationContactPhone\" >{Location.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"LocationEmail\" >{Location.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"LocationOwner\">{Location.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"LocationType\">{Location.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"LocationCategory\">{Location.LocationCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function LocationModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const LocationServ=client.service('location')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Location =state.LocationModule.selectedLocation \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", Location.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"locationType\", Location.locationType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", Location.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Location.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Location.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Location.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Location.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"LocationCategory\", Location.LocationCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newLocationModule={\r\n        selectedLocation:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newLocationModule={\r\n            selectedLocation:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, LocationModule:newLocationModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Location._id\r\n        if (conf){\r\n             \r\n        LocationServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Location successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Location deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Location, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Location, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Location.facility\r\n          //console.log(data);\r\n          \r\n        LocationServ.patch(Location._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Location successfully\")\r\n                 toast({\r\n                    message: 'Location updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Location, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Location, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Location Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Location Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"locationType\" type=\"text\" placeholder=\"Location Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Location Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"LocationCategory\" type=\"text\" placeholder=\"Location Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Store.js",["251","252","253","254","255"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Store() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedStore,setSelectedStore]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Store  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <StoreList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.StoreModule.show ==='create')&&<StoreCreate />}\r\n                {(state.StoreModule.show ==='detail')&&<StoreDetail  />}\r\n                {(state.StoreModule.show ==='modify')&&<StoreModify Store={selectedStore} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function StoreCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{ // buble-up from inputsearch for creating resource\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeStore.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n          data.locationType=\"Store\"\r\n        StoreServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Store successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Store created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Store ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Store\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n               {/*  <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"StoreType\" type=\"text\" placeholder=\"Type of Store\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div> */}\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Store\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function StoreList({standalone}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedStore, setSelectedStore]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newStoreModule={\r\n            selectedStore:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Store)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Store)\r\n\r\n        await setSelectedStore(Store)\r\n\r\n        const    newStoreModule={\r\n            selectedStore:Store,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       StoreServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                locationType:\"Store\",\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Store  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Store, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findStore= await StoreServ.find(\r\n                {query: {\r\n                    locationType:\"Store\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        name: 1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findStore.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findStore= await StoreServ.find(\r\n                            {query: {\r\n                                locationType:\"Store\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    name: 1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findStore.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Store  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Store, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                StoreServ.on('created', (obj)=>getFacilities())\r\n                StoreServ.on('updated', (obj)=>getFacilities())\r\n                StoreServ.on('patched', (obj)=>getFacilities())\r\n                StoreServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Stores\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Stores </span></div>\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        {/* <th><abbr title=\"Last Name\">Store Type</abbr></th>\r\n                                       <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                         <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>*/}\r\n                                       { !standalone &&  <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Store, i)=>(\r\n\r\n                                            <tr key={Store._id} onClick={()=>handleRow(Store)}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Store.name}</th>\r\n                                            {/*<td>{Store.StoreType}</td>\r\n                                            < td>{Store.profession}</td>\r\n                                            <td>{Store.phone}</td>\r\n                                            <td>{Store.email}</td>\r\n                                            <td>{Store.department}</td>\r\n                                            <td>{Store.deptunit}</td> \r\n                                            <td>{Store.facility}</td>*/}\r\n                                          { !standalone &&   <td><span   className=\"showAction\"  >...</span></td>}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function StoreDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const StoreServ=client.service('/Store')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Store =state.StoreModule.selectedStore \r\n\r\n    const handleEdit= async()=>{\r\n        const    newStoreModule={\r\n            selectedStore:Store,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Store Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {Store.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Location Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"StoreType\">{Store.locationType} </span> \r\n                    </td>\r\n                </tr>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"StoreCity\">{Store.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"StoreContactPhone\" >{Store.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"StoreEmail\" >{Store.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"StoreOwner\">{Store.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"StoreType\">{Store.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"StoreCategory\">{Store.StoreCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function StoreModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const StoreServ=client.service('location')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Store =state.StoreModule.selectedStore \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", Store.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"locationType\", Store.locationType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", Store.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Store.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Store.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Store.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Store.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"StoreCategory\", Store.StoreCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newStoreModule={\r\n        selectedStore:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newStoreModule={\r\n            selectedStore:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, StoreModule:newStoreModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Store._id\r\n        if (conf){\r\n             \r\n        StoreServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Store successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Store deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Store, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Store, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Store.facility\r\n          //console.log(data);\r\n          \r\n        StoreServ.patch(Store._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Store successfully\")\r\n                 toast({\r\n                    message: 'Store updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Store, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Store, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Store Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Location Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"StoreType\" type=\"text\" placeholder=\"Store Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Store Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"StoreCategory\" type=\"text\" placeholder=\"Store Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                {/* <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Workspace.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\Accessibility.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\InventoryModule.js",["256","257","258","259"],"import React,{useState,useContext,useEffect} from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink} from 'react-router-dom'\r\nimport InventoryReport from './inventory/InventoryReport'\r\nimport InventorySetup from './inventory/InventorySetup'\r\nimport InventoryStore from './inventory/InventoryStore'\r\nimport InventoryHome from './inventory/InventoryHome'\r\nimport ProductEntry from './inventory/ProductEntry'\r\nimport ProductExit from './inventory/ProductExit'\r\nimport Products from './inventory/Products'\r\nimport Store, { StoreList } from './inventory/Store'\r\nimport {UserContext,ObjectContext} from '../context'\r\n\r\nexport default function InventoryModule() {\r\n    const {state,setState}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedStore,setSelectedStore]=useState()\r\n    const [showModal,setShowModal]=useState(false)\r\n\r\n    let { path, url } = useRouteMatch();\r\n    \r\n    useEffect(() => {\r\n       \r\n        console.log(\"starting up inventory module\")\r\n        if (!selectedStore){\r\n            handleChangeStore()\r\n\r\n            }\r\n         return () => {       \r\n            }\r\n        }, [])\r\n   \r\n    useEffect(()=>{\r\n     setSelectedStore(state.StoreModule.selectedStore)\r\n\r\n    },[state.StoreModule])\r\n\r\n    const handleChangeStore= async()=>{\r\n        await setShowModal(true)                                                                                                                                                        \r\n        console.log( showModal)\r\n    }\r\n\r\n    return (\r\n            <section className=\"section has-background-info remPad\">\r\n               \r\n               {/*  <div className=\"\"> */}\r\n                    <nav className=\"navbar minHt z10 has-background-info\">\r\n                        <div className=\"container \">\r\n                            <div className=\"navbar-brand \">\r\n                                <div className=\"navbar-item \">\r\n                                    <span className=\"is-size-6 has-text-weight-medium\">\r\n                                        Health Stack::Inventory::{selectedStore?selectedStore.name:\"\"}</span>\r\n                                        <button className=\"button is-small is-info\" onClick={()=>handleChangeStore()}>Change Store</button> \r\n                                </div>\r\n                                \r\n                            {/* <div className=\"navbar-item\">\r\n                                <img src=\"https://bulma.io/images/bulma-type-white.png\" alt=\"Logo\" />\r\n                            </div> */}\r\n                                <span className=\"navbar-burger\" data-target=\"navbarMenuHeroB\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </span>\r\n                            </div>\r\n                            <div id=\"navbarMenuHeroB\" className=\"navbar-menu\">\r\n                                <div className=\"navbar-end\">\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}`}>Home Page</NavLink> \r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-stores`}>Stores</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-admin`}>Admin</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-inventory`}>Store Inventory</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-entry`}>Product Entry</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-exit`}>Product Exit</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-products`}>Products</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/inv-reports`}>Reports</NavLink>\r\n                                    </div>\r\n                                {/* <span className=\"navbar-item\">\r\n                                <div className=\"button is-info is-inverted\">\r\n                                    <span className=\"icon\">\r\n                                    <i className=\"fab fa-github\"></i>\r\n                                    </span>\r\n                                    <span>Download</span>\r\n                                </div>\r\n                                </span> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                    \r\n               {/*  </div> */}\r\n                \r\n                {/* <div className=\"section\"> */}\r\n                {/* <div className=\"container mvUp \" > */}\r\n                       \r\n                    <Switch>\r\n                        <Route path={path} exact>\r\n                            <InventoryHome />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-admin`} exact >\r\n                            <InventorySetup />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-inventory`} exact>\r\n                            <InventoryStore />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-entry`} exact>\r\n                            <ProductEntry />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-exit`} exact>\r\n                            <ProductExit/>\r\n                        </Route>\r\n                        <Route path={`${path}/inv-products`} exact>\r\n                            <Products />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-reports`} exact>\r\n                            <InventoryReport />\r\n                        </Route>\r\n                        <Route path={`${path}/inv-stores`} exact>\r\n                            <Store />\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                  \r\n\r\n                    <div className={`modal ${showModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={()=>setShowModal(false)}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        <StoreList standalone=\"true\" />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>        \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\facility\\FacilityHome.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\feathers.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\SignUp.js",["260","261"],"import React, {useState} from 'react'\r\nimport client from '../feathers'\r\nimport { useForm } from \"react-hook-form\";\r\nimport {useHistory} from 'react-router-dom'\r\n\r\nexport default function SignUp() {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [error, setError] =useState(true)\r\n    const [errorMessage,setErrorMessage] = useState(\"\")\r\n    const userServ=client.service('/users')\r\n    const history = useHistory()\r\n\r\n   \r\n      const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setErrorMessage(\"\")\r\n        setError(false)\r\n          if (data.password !==data.password2){\r\n              setErrorMessage(\"Passwords not identical\")\r\n              setError(true)\r\n              return\r\n          }\r\n        \r\n          delete data.password2\r\n          console.log(data);\r\n          userServ.create(data)\r\n            .then((res)=>{\r\n                console.log(JSON.stringify(res))\r\n                alert(\"User Created Successfully\")\r\n                e.target.reset();\r\n                history.push(\"/\")\r\n\r\n            })\r\n            .catch((err)=>{\r\n                setErrorMessage(\"Error with creating User, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        \r\n        \r\n\r\n\r\n      } \r\n\r\n    return (\r\n        <section className=\"section\">\r\n            <div className=\"container signupcenter\">\r\n                <div className=\"columns\">\r\n                    <div className=\"column is-4 is-offset-4\">\r\n                        <div className=\"card \">\r\n                            <header className=\"card-header\"> \r\n                                <p className=\"card-header-title\">HealthStack: Sign Up</p>\r\n                            </header>\r\n                        <div className=\"card-content\">\r\n                            <form onSubmit={handleSubmit(onSubmit)}>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small\">First Name\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\"  ref={register({ required: true })}  type=\"text\" placeholder=\"Enter Full Name\" name=\"firstname\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small\">Last Name\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\"  ref={register({ required: true })}  type=\"text\" placeholder=\"Enter Full Name\" name=\"lastname\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Phone Number\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"text\" placeholder=\"Enter Phone Number\" name=\"phone\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Email\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"text\" placeholder=\"Enter email\" name=\"email\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            \r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Password\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"password\" placeholder=\"Password\" name=\"password\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field is-small\">\r\n                                <label className=\"label is-small  \">Repeat Password\r\n                                    <div className=\"control \">\r\n                                        <input className=\"input is-small\" ref={register({ required: true })} type=\"password\" placeholder=\"Password\" name=\"password2\"/>\r\n                                    </div>\r\n                                </label>\r\n                            </div>\r\n                    \r\n                        {/* <div className=\"field\">\r\n                            <label className=\"label is-small\">Username\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input is-success  is-small\" type=\"text\" placeholder=\"Text input\" value={\"bulma\"} />\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-user\"></i>\r\n                                </span>\r\n                                <span className=\"icon is-small is-right\">\r\n                                <i className=\"fas fa-check\"></i>\r\n                                </span>\r\n                            </div>\r\n                            </label>\r\n                            <p className=\"help is-success\">This username is available</p>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                            <label className=\"label is-small\">Email</label>\r\n                            <div className=\"control has-icons-left has-icons-right\">\r\n                                <input className=\"input is-danger is-small\" type=\"email\" placeholder=\"Email input\" value=\"hello@\" />\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-envelope\"></i>\r\n                                </span>\r\n                                <span className=\"icon is-small is-right\">\r\n                                <i className=\"fas fa-exclamation-triangle\"></i>\r\n                                </span>\r\n                            </div>\r\n                            <p className=\"help is-danger\">This email is invalid</p>\r\n                        </div>\r\n\r\n                        <div className=\"field\">\r\n                        <label className=\"label is-small\">Subject</label>\r\n                        <div className=\"control is-small\">\r\n                            <div className=\"select\">\r\n                            <select>\r\n                                <option>Select dropdown</option>\r\n                                <option>With options</option>\r\n                            </select>\r\n                            </div>\r\n                        </div>\r\n                        </div> */}\r\n\r\n                    {/*  <div className=\"field\">\r\n                            <label className=\"label\">Message</label>\r\n                            <div className=\"control\">\r\n                                <textarea className=\"textarea is-small\" placeholder=\"Textarea\"></textarea>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                    {/*  <div className=\"field\">\r\n                            <div className=\"control is-small\">\r\n                                <label className=\"checkbox\">\r\n                                <input type=\"checkbox\"/>\r\n                                I agree to the <a href=\"./terms\">terms and conditions</a>\r\n                                </label>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                    {/*  <div className=\"field\">\r\n                            <div className=\"control\">\r\n                                <label className=\"radio is-small\">\r\n                                <input type=\"radio\" name=\"question\"/>\r\n                                Yes\r\n                                </label>\r\n                                <label className=\"radio is-small\">\r\n                                <input type=\"radio\" name=\"question\" />\r\n                                No\r\n                                </label>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                        <div className=\"field is-grouped\">\r\n                            <div className=\"control\">\r\n                                <button type=\"submit\" className=\"button is-link is-small\">Submit</button>\r\n                            </div>\r\n                           {/*  <div className=\"control\">\r\n                                <button className=\"button is-link is-light is-small\" >Cancel</button>\r\n                            </div> */}\r\n                        </div>\r\n                        { error && \r\n                        <div className=\"message\"> {errorMessage}                            \r\n                        </div>\r\n                        }\r\n                        </form>\r\n\r\n                        </div>\r\n                        </div>\r\n                        </div>\r\n                \r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n",["262","263"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\FacilityModule.js",["264"],"import React from 'react'\r\nimport {Route, Switch,  useRouteMatch, Link, NavLink} from 'react-router-dom'\r\nimport CareTeam from './facility/CareTeam'\r\nimport Department from './facility/Department'\r\nimport DeptUnits from './facility/DeptUnits'\r\nimport FacilityHome from './facility/FacilityHome'\r\nimport Employee from './facility/Employee'\r\nimport Facility from './facility/Facility'\r\nimport HSModules from './facility/HSModules'\r\nimport Location from './facility/Location'\r\nimport Roaster from './facility/Roaster'\r\nimport Workspace from './facility/Workspace'\r\nimport Accessibility from './facility/Accessibility'\r\n\r\nexport default function FacilityModule() {\r\n    let { path, url } = useRouteMatch();\r\n    return (\r\n            <section className=\"section has-background-info remPad\">\r\n               {/*  <div className=\"\"> */}\r\n                    <nav className=\"navbar minHt z10 has-background-info\">\r\n                        <div className=\"container \">\r\n                            <div className=\"navbar-brand \">\r\n                                <div className=\"navbar-item \">\r\n                                    <span className=\"is-size-6 has-text-weight-medium\">Health Stack::Facility</span> \r\n                                </div>\r\n                            {/* <div className=\"navbar-item\">\r\n                                <img src=\"https://bulma.io/images/bulma-type-white.png\" alt=\"Logo\" />\r\n                            </div> */}\r\n                                <span className=\"navbar-burger\" data-target=\"navbarMenuHeroB\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </span>\r\n                            </div>\r\n                            <div id=\"navbarMenuHeroB\" className=\"navbar-menu\">\r\n                                <div className=\"navbar-end\">\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}`}>Home Page</NavLink> \r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/accessibility`}>User Access</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/careteam`}>Care Teams</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/department`}>Department</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/dept-unit`}>Department Units</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/employees`}>Employees</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/facility`}>Facility</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/hsmodules`}>Modules</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/location`}>Locations</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/roaster`}>Roaster</NavLink>\r\n                                    </div>\r\n                                    <div className=\"navbar-item\">\r\n                                        <NavLink to={`${url}/workspace`}>Workspace</NavLink>\r\n                                    </div>\r\n                                    \r\n                                {/* <span className=\"navbar-item\">\r\n                                <div className=\"button is-info is-inverted\">\r\n                                    <span className=\"icon\">\r\n                                    <i className=\"fab fa-github\"></i>\r\n                                    </span>\r\n                                    <span>Download</span>\r\n                                </div>\r\n                                </span> */}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n               {/*  </div> */}\r\n                \r\n                {/* <div className=\"section\"> */}\r\n                {/* <div className=\"container mvUp \" > */}\r\n                       \r\n                    <Switch>\r\n                        <Route path={path} exact>\r\n                            <FacilityHome />\r\n                        </Route>\r\n                        <Route path={`${path}/accessibility`} exact >\r\n                            <Accessibility />\r\n                        </Route>\r\n                      \r\n                        <Route path={`${path}/careteam`} exact>\r\n                            <CareTeam />\r\n                        </Route>\r\n                        <Route path={`${path}/department`} exact>\r\n                            <Department/>\r\n                        </Route>\r\n                        <Route path={`${path}/dept-unit`} exact>\r\n                            <DeptUnits />\r\n                        </Route>\r\n                        <Route path={`${path}/employees`} >\r\n                            <Employee />\r\n                        </Route>\r\n                        <Route path={`${path}/facility`} exact >\r\n                            <Facility />\r\n                        </Route>\r\n                        <Route path={`${path}/hsmodules`} exact>\r\n                            <HSModules />\r\n                        </Route>\r\n                        <Route path={`${path}/location`} exact>\r\n                            <Location/>\r\n                        </Route>\r\n                        <Route path={`${path}/roaster`} exact>\r\n                            <Roaster/>\r\n                        </Route>\r\n                        <Route path={`${path}/Workspace`} exact>\r\n                            <Workspace />\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                  \r\n\r\n                \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\inventory\\Products.js",["265","266","267","268","269","270","271"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicHome.js",["272","273","274","275","276","277"],"import React ,{useState,useEffect,useContext} from 'react'\r\nimport Store, { StoreList } from './Clinic'\r\nimport {UserContext,ObjectContext} from '../../context'\r\n\r\nexport default function InventoryHome() {\r\n   // const [activeModal, setActiveModal]=useState(\"modal is-active \")\r\n    const {state,setState}=useContext(ObjectContext)\r\n    const handleCloseModal=()=>{\r\n        state.showStoreModal  =  \"modal\"                                                                                                                                                        \r\n        setState(state)\r\n        console.log( state.showStoreModal)\r\n    }\r\n    \r\n       \r\n \r\n    return (\r\n       \r\n            <section className= \"section remPadTop\">\r\n               <div className=\"is-1\"> Appointment sdchedule for patients for this clinic</div>\r\n               <div className=\"is-1\"> Communication Command Center</div>                        \r\n            </section>\r\n    )\r\n}\r\n","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicReport.js",[],["278","279"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\ClinicModule.js",["280","281","282","283"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicStore.js",["284","285","286","287","288","289","290","291"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicEntry.js",["292","293","294","295","296","297","298"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\nimport {ClientCreate} from './Patient'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function ProductEntry() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedProductEntry,setSelectedProductEntry]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">ProductEntry  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ProductEntryList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ProductEntryModule.show ==='create')&&<ProductEntryCreate />}\r\n                {(state.ProductEntryModule.show ==='detail')&&<ProductEntryDetail  />}\r\n                {(state.ProductEntryModule.show ==='modify')&&<ProductEntryModify ProductEntry={selectedProductEntry} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ProductEntryCreate(){\r\n   // const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n    const [type,setType] = useState(\"Purchase Invoice\")\r\n    const [documentNo,setDocumentNo] = useState(\"\")\r\n    const [totalamount,setTotalamount] = useState(\"\")\r\n    const [productId,setProductId] = useState(\"\")\r\n    const [source,setSource] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n    const [name,setName] = useState(\"\")\r\n    const [baseunit,setBaseunit] = useState(\"\")\r\n    const [quantity,setQuantity] = useState()\r\n    const [costprice,setCostprice] = useState()\r\n    const [productItem,setProductItem] = useState([])\r\n    const {state}=useContext(ObjectContext)\r\n    \r\n    const [productEntry,setProductEntry]=useState({\r\n        productitems:[],\r\n        date,\r\n        documentNo,\r\n        type,\r\n        totalamount,\r\n        source,\r\n\r\n    })\r\n \r\n    const productItemI={\r\n        productId,\r\n        name,\r\n        quantity,\r\n        costprice,\r\n        amount:quantity*costprice,\r\n        baseunit\r\n\r\n    }\r\n    // consider batchformat{batchno,expirydate,qtty,baseunit}\r\n    //consider baseunoit conversions\r\n    const getSearchfacility=(obj)=>{\r\n\r\n        setProductId(obj._id)\r\n        setName(obj.name)\r\n        setBaseunit(obj.baseunit)\r\n        \r\n       /*  setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) */\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n    const handleChangeType=async (e)=>{\r\n        await setType(e.target.value)\r\n    }\r\n    const handleClickProd=async()=>{\r\n        await setSuccess(false)\r\n        setProductItem(\r\n            prevProd=>prevProd.concat(productItemI)\r\n        )\r\n        setName(\"\")\r\n        setBaseunit(\"\")\r\n        setQuantity(\"\")\r\n        setCostprice(\"\")\r\n       await setSuccess(true)\r\n       console.log(success)\r\n       console.log(productItem)\r\n    }\r\n  //check user for facility or get list of facility  \r\n   /*  useEffect(()=>{\r\n        //setFacility(user.activeProductEntry.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n           /* setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  \r\n\r\n      }\r\n    }) */\r\n\r\n    const resetform=()=>{\r\n     setType(\"Purchase Invoice\")\r\n    setDocumentNo(\"\")\r\n    setTotalamount(\"\")\r\n    setProductId(\"\")\r\n    setSource(\"\")\r\n    setDate(\"\")\r\n    setName(\"\")\r\n    setBaseunit()\r\n    setCostprice()\r\n    setProductItem([])\r\n    }\r\n\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n        await setProductEntry({\r\n            \r\n            date,\r\n            documentNo,\r\n            type,\r\n            totalamount,\r\n            source,\r\n        })\r\n        productEntry.productitems=productItem\r\n        productEntry.createdby=user._id\r\n        productEntry.transactioncategory=\"credit\"\r\n\r\n          console.log(\"b4 facility\",productEntry);\r\n          if (user.currentEmployee){\r\n         productEntry.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }else{\r\n            toast({\r\n                message: 'You can not add inventory to any organization',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n          }\r\n          if (state.StoreModule.selectedStore._id){\r\n            productEntry.storeId=state.StoreModule.selectedStore._id\r\n          }else{\r\n            toast({\r\n                message: 'You need to select a store before adding inventory',\r\n                type: 'is-danger',\r\n                dismissible: true,\r\n                pauseOnHover: true,\r\n              }) \r\n              return\r\n\r\n          }\r\n          console.log(\"b4 create\",productEntry);\r\n        ProductEntryServ.create(productEntry)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                resetform()\r\n               /*  setMessage(\"Created ProductEntry successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'ProductEntry created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n                  setProductItem([])\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card card-overflow\">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create ProductEntry: Product Entry- Initialization, Purchase Invoice, Audit\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content \">\r\n   \r\n            <form onSubmit={onSubmit}> {/* handleSubmit(onSubmit) */}\r\n            <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field\">    \r\n                <div className=\"control\">\r\n                    <div className=\"select is-small\">\r\n                        <select name=\"type\" value={type} onChange={handleChangeType}>\r\n                           <option value=\"\">Choose Type </option>\r\n                            <option value=\"Purchase Invoice\">Purchase Invoice </option>\r\n                            <option value=\"Initialization\">Initialization</option>\r\n                            <option value=\"Audit\">Audit</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" /* ref={register({ required: true })} */ value={source} name=\"supplier\" type=\"text\" onChange={e=>setSource(e.target.value)} placeholder=\"Supplier\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div>\r\n           \r\n            </div>\r\n            </div> {/* horizontal end */}\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\"> // Audit/initialization/Purchase Invoice \r\n                    <input className=\"input is-small\"  ref={register({ required: true })} name=\"type\" type=\"text\" placeholder=\"Type of Product Entry\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n               <div className=\"field is-horizontal\">\r\n               <div className=\"field-body\">\r\n               <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\"  /* ref={register({ required: true })} */ value={date}  name=\"date\" type=\"text\" onChange={e=>setDate(e.target.value)} placeholder=\"Date\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register} */ name=\"documentNo\" value={documentNo} type=\"text\" onChange={e=>setDocumentNo(e.target.value)} placeholder=\" Invoice Number\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ value={totalamount} name=\"totalamount\" type=\"text\" onChange={async e=> await setTotalamount(e.target.value)} placeholder=\" Total Amount\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-coins\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n\r\n                </div> \r\n                </div> \r\n               \r\n                </form>   \r\n               \r\n           \r\n         {/* array of ProductEntry items */}\r\n        \r\n        <label className=\"label is-small\">Add Product Items:</label>\r\n         <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n            <div className=\"field is-expanded\"  /* style={ !user.stacker?{display:\"none\"}:{}} */ >\r\n                    <ProductSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                    <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                        <input className=\"input is-small\" /* ref={register ({ required: true }) }  *//* add array no */  value={productId} name=\"productId\" type=\"text\" onChange={e=>setProductId(e.target.value)} placeholder=\"Product Id\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas  fa-map-marker-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"quantity\" value={quantity} type=\"text\" onChange={e=>setQuantity(e.target.value)} placeholder=\"Quantity\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n        <label >{baseunit}</label>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" /* ref={register({ required: true })} */ name=\"costprice\" value={costprice} type=\"text\" onChange={e=>setCostprice(e.target.value)} placeholder=\"Cost Price\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-dollar-sign\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n            <p className=\"control\">\r\n                    <button className=\"button is-info is-small  is-pulled-right\">\r\n                      <span className=\"is-small\" onClick={handleClickProd}> +</span>\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            </div>\r\n         </div>\r\n            \r\n       {(productItem.length>0) && <div>\r\n            <label>Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                    <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { productItem.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        <td><span className=\"showAction\"  >x</span></td>\r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" disabled={!productItem.length>0} onClick={onSubmit}>\r\n                        Create\r\n                    </button>\r\n                </p>\r\n                </div>\r\n                </div>\r\n           \r\n            }\r\n            \r\n            \r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ProductEntryList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedProductEntry, setSelectedProductEntry]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(ProductEntry)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",ProductEntry)\r\n\r\n        await setSelectedProductEntry(ProductEntry)\r\n\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ProductEntryServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n                storeId:state.StoreModule.selectedStore._id,\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" ProductEntry  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching ProductEntry, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findProductEntry= await ProductEntryServ.find(\r\n                {query: {\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    storeId:state.StoreModule.selectedStore._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findProductEntry.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        /* toast({\r\n                            message: 'You do not qualify to view this',\r\n                            type: 'is-danger',\r\n                            dismissible: true,\r\n                            pauseOnHover: true,\r\n                          }) \r\n                          return */\r\n                        const findProductEntry= await ProductEntryServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findProductEntry.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" ProductEntry  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (!state.StoreModule.selectedStore){\r\n                    toast({\r\n                        message: 'kindly select a store',\r\n                        type: 'is-danger',\r\n                        dismissible: true,\r\n                        pauseOnHover: true,\r\n                      }) \r\n                      return\r\n                    getFacilities()\r\n\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ProductEntryServ.on('created', (obj)=>getFacilities())\r\n                ProductEntryServ.on('updated', (obj)=>getFacilities())\r\n                ProductEntryServ.on('patched', (obj)=>getFacilities())\r\n                ProductEntryServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n                getFacilities()\r\n                console.log(\"store changed\")\r\n                return () => {\r\n                   \r\n                }\r\n            }, [state.StoreModule.selectedStore])\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {state.StoreModule.selectedStore?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search ProductEntry\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Product Additions to Inventory </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th><abbr title=\"Date\">Date</abbr></th>\r\n                                        <th><abbr title=\"Type\">Type</abbr></th>\r\n                                        <th>Source</th>\r\n                                        <th><abbr title=\"Document No\">Document No</abbr></th>\r\n                                        <th><abbr title=\"Total Amount\">Total Amount</abbr></th>\r\n                                        <th><abbr title=\"Enteredby\">Entered By</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((ProductEntry, i)=>(\r\n\r\n                                            <tr key={ProductEntry._id} onClick={()=>handleRow(ProductEntry)}>\r\n                                            <th>{i+1}</th>\r\n                                            <td>{ProductEntry.date}</td>\r\n                                            <th>{ProductEntry.type}</th>\r\n                                            <td>{ProductEntry.source}</td>\r\n                                            <td>{ProductEntry.documentNo}</td>\r\n                                            <td>{ProductEntry.totalamount}</td>\r\n                                            <td>{ProductEntry.enteredby}</td>\r\n                                            <td><span className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading... Choose a Store</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ProductEntryDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ProductEntryServ=client.service('/ProductEntry')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n    const handleEdit= async()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:ProductEntry,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                      <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Type\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.type} </span>\r\n                    </td>\r\n                    <td>\r\n\r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Supplier:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.source} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Date:\r\n                        </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.date} </span>\r\n                    </td>\r\n                    <td>\r\n                                \r\n                    </td>\r\n                    <td>\r\n                        <label className=\"label is-small padleft\"><span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>Invoice No:\r\n                        </label>\r\n                    </td>\r\n                    \r\n                    <td>\r\n                         <span className=\"is-size-7 padleft\"   name=\"ProductEntryType\">{ProductEntry.documentNo} </span> \r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                \r\n                        <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-hospital\"></i>\r\n                    </span>            \r\n                        Total Amount:\r\n                    </label>\r\n                    </td>\r\n                    <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {ProductEntry.totalamount} </span>\r\n                    </td>\r\n                </tr>\r\n\r\n                </tbody> \r\n            </table> \r\n            <label className=\"label is-size-7 mt-2\">Product Items:</label>\r\n         <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                <thead>\r\n                    <tr>\r\n                    <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                    <th><abbr title=\"Type\">Name</abbr></th>\r\n                    <th><abbr title=\"Type\">Quanitity</abbr></th>\r\n                    <th><abbr title=\"Document No\">Unit</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Cost Price</abbr></th>\r\n                    <th><abbr title=\"Cost Price\">Amount</abbr></th>\r\n                   \r\n                    </tr>\r\n                </thead>\r\n                <tfoot>\r\n                    \r\n                </tfoot>\r\n                <tbody>\r\n                   { ProductEntry.productitems.map((ProductEntry, i)=>(\r\n\r\n                        <tr key={i}>\r\n                        <th>{i+1}</th>\r\n                        <td>{ProductEntry.name}</td>\r\n                        <th>{ProductEntry.quantity}</th>\r\n                        <td>{ProductEntry.baseunit}</td>\r\n                        <td>{ProductEntry.costprice}</td>\r\n                        <td>{ProductEntry.amount}</td>\r\n                        \r\n                        \r\n                        </tr>\r\n\r\n                    ))}\r\n                </tbody>\r\n                </table>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryCity\">{ProductEntry.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ProductEntryContactPhone\" >{ProductEntry.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ProductEntryEmail\" >{ProductEntry.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ProductEntryOwner\">{ProductEntry.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ProductEntryType\">{ProductEntry.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ProductEntryCategory\">{ProductEntry.ProductEntryCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            \r\n           \r\n           {/*  <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>} */}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ProductEntryModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ProductEntryServ=client.service('productentry')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const ProductEntry =state.ProductEntryModule.selectedProductEntry \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", ProductEntry.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"ProductEntryType\", ProductEntry.ProductEntryType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", ProductEntry.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", ProductEntry.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", ProductEntry.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", ProductEntry.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", ProductEntry.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ProductEntryCategory\", ProductEntry.ProductEntryCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newProductEntryModule={\r\n        selectedProductEntry:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newProductEntryModule={\r\n            selectedProductEntry:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ProductEntryModule:newProductEntryModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=ProductEntry._id\r\n        if (conf){\r\n             \r\n        ProductEntryServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted ProductEntry successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'ProductEntry deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=ProductEntry.facility\r\n          //console.log(data);\r\n          \r\n        ProductEntryServ.patch(ProductEntry._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated ProductEntry successfully\")\r\n                 toast({\r\n                    message: 'ProductEntry updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating ProductEntry, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating ProductEntry, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    ProductEntry Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">ProductEntry Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ProductEntryType\" type=\"text\" placeholder=\"ProductEntry Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"ProductEntry Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ProductEntryCategory\" type=\"text\" placeholder=\"ProductEntry Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function ProductSearch({getSearchfacility,clear}) {\r\n    \r\n    const productServ=client.service('products')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n   const [val,setVal]=useState(\"\")\r\n    const [productModal,setProductModal]=useState(false)\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.name)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(value)=>{\r\n        setVal(value)\r\n        if (value===\"\"){\r\n            setShowPanel(false)\r\n            return\r\n        }\r\n        const field='name' //field variable\r\n\r\n       \r\n        if (value.length>=3 ){\r\n            productServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:value,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"product  fetched successfully\") \r\n              console.log(res.data) \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" product  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating ProductEntry ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n\r\n    const handleAddproduct =()=>{\r\n        setProductModal(true) \r\n    }\r\n    const handlecloseModal =()=>{\r\n        setProductModal(false)\r\n        handleSearch(val)\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           console.log(\"success has changed\",clear)\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Product\"\r\n                                value={simpa}\r\n                                minLength={3}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {/* {searchError&&<div>{searchMessage}</div>} */}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                          { facilities.length>0?\"\":<div className=\"dropdown-item\" onClick={handleAddproduct}> <span>Add {val} to product list</span> </div>}\r\n\r\n                              {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.name}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                                    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={`modal ${productModal?\"is-active\":\"\"}` }>\r\n                                    <div className=\"modal-background\"></div>\r\n                                    <div className=\"modal-card\">\r\n                                        <header className=\"modal-card-head\">\r\n                                        <p className=\"modal-card-title\">Choose Store</p>\r\n                                        <button className=\"delete\" aria-label=\"close\"  onClick={handlecloseModal}></button>\r\n                                        </header>\r\n                                        <section className=\"modal-card-body\">\r\n                                        {/* <StoreList standalone=\"true\" /> */}\r\n                                        <ClientCreate />\r\n                                        </section>\r\n                                        {/* <footer className=\"modal-card-foot\">\r\n                                        <button className=\"button is-success\">Save changes</button>\r\n                                        <button className=\"button\">Cancel</button>\r\n                                        </footer> */}\r\n                                    </div>\r\n                                </div>       \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Patient.js",["299","300","301","302","303","304","305","306","307"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Client() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedClient,setSelectedClient]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n            <div className=\"columns \">\r\n            <div className=\"column is-6 \">\r\n                <ClientList />\r\n                </div>\r\n            <div className=\"column is-6 \">\r\n                {(state.ClientModule.show ==='create')&&<ClientCreate />}\r\n                {(state.ClientModule.show ==='detail')&&<ClientDetail  />}\r\n                {(state.ClientModule.show ==='modify')&&<ClientModify Client={selectedClient} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ClientCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClientServ=client.service('client')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{\r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClient.FacilityId)//\r\n      if (!user.stacker){\r\n       /*    console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })  */\r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n          data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n        ClientServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Client successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Client created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Client ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Client\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n            <p className=\" is-small\">\r\n                    Kindly search Client list before creating new Clients!\r\n                </p>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <input className=\"input is-small\" ref={register()}  name=\"firstname\" type=\"text\" placeholder=\"First Name\" />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>\r\n                \r\n                \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register()}  name=\"middlename\" type=\"text\" placeholder=\"Middle Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>\r\n              \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"lastname\" type=\"text\" placeholder=\"Last Name\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" fas fa-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </div>  \r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"dob\" type=\"text\" placeholder=\"Date of Birth\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"gender\" type=\"text\" placeholder=\"Gender\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"maritalstatus\" type=\"text\" placeholder=\"Marital Status\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"mrn\" type=\"text\" placeholder=\"Medical Records Number\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"religion\" type=\"text\" placeholder=\"Religion\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"profession\" type=\"text\" placeholder=\"Profession\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-phone-alt\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n   \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register()} name=\"address\" type=\"text\" placeholder=\"Residential Address\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"city\" type=\"text\" placeholder=\"Town/City\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"lga\" type=\"text\" placeholder=\"Local Govt Area\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"state\" type=\"text\" placeholder=\"State\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"country\" type=\"text\" placeholder=\"Country\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <input className=\"input is-small\" ref={register()} name=\"bloodgroup\" type=\"text\" placeholder=\"Blood Group\"  />\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <input className=\"input is-small\" ref={register()} name=\"genotype\" type=\"text\" placeholder=\"Genotype\"  />\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> \r\n                    <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <input className=\"input is-small\" ref={register()} name=\"disabilities\" type=\"text\" placeholder=\"Disabilities\"  />\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> \r\n                </div> \r\n            </div>  \r\n            \r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"allergies\" type=\"text\" placeholder=\"Allergies\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"comorbidities\" type=\"text\" placeholder=\"Co-mobidities\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n            </div>\r\n        </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register()} name=\"clientTags\" type=\"text\" placeholder=\"Tags\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register()} name=\"specificDetails\" type=\"text\" placeholder=\"Specific Details about patient\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n        <div className=\"field is-horizontal\">\r\n            <div className=\"field-body\">\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"nok_name\" type=\"text\" placeholder=\"Next of Kin Full Name\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <input className=\"input is-small\" ref={register()} name=\"nok_phoneno\" type=\"text\" placeholder=\"Next of Kin Phone Number\"/>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> \r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"nok_email\" type=\"email\" placeholder=\"Next of Kin Email\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <input className=\"input is-small\" ref={register()} name=\"nok_relationship\" type=\"text\" placeholder=\"Next of Kin Relationship\"  />\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div> \r\n        <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" >\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={(e)=>e.target.reset()}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n     \r\n            </form>\r\n            </div>\r\n            </div>\r\n                 {/*  <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n         {/*   <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ClientList(){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ClientServ=client.service('client')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedClient, setSelectedClient]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const newClientModule={\r\n            selectedClient:{},\r\n            show :'create'\r\n            }\r\n        await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n       //console.log(state)\r\n        } \r\n\r\n    \r\n    const handleRow= async(Client)=>{\r\n        await setSelectedClient(Client)\r\n        const    newClientModule={\r\n            selectedClient:Client,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='firstname'\r\n       console.log(val)\r\n       ClientServ.find({query: {\r\n                $or:[\r\n                    { firstname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { lastname: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { middlename: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { phone: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { clientTags: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { mrn: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                    { specificDetails: {\r\n                        $regex:val,\r\n                        $options:'i' \r\n                    }},\r\n                ],\r\n              \r\n              // facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                $limit:10,\r\n                $sort: {\r\n                    createdAt: -1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Client  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Client, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n    const getFacilities= async()=>{\r\n            if (user.currentEmployee){      \r\n            const findClient= await ClientServ.find(\r\n                {query: {\r\n                   // facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        createdAt: -1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findClient.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findClient= await ClientServ.find(\r\n                            {query: {\r\n                                \r\n                                $limit:20,\r\n                                $sort: {\r\n                                    createdAt: -1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findClient.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Client  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Client, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n    useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n    useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ClientServ.on('created', (obj)=>getFacilities())\r\n                ClientServ.on('updated', (obj)=>getFacilities())\r\n                ClientServ.on('patched', (obj)=>getFacilities())\r\n                ClientServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Clients\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Clients </span></div>\r\n                    <div className=\"level-right\">\r\n                        <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped is-narrow is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>First Name</th>\r\n                                        <th><abbr title=\"Middle Name\">Middle Name</abbr></th>\r\n                                       <th><abbr title=\"Last Name\">Last Name</abbr></th>\r\n                                       <th><abbr title=\"Age\">Age</abbr></th>\r\n                                        <th><abbr title=\"Gender\">Gender</abbr></th> \r\n                                        <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Tags\">Tags</abbr></th>\r\n                                        <th><abbr title=\"Actions\">Actions</abbr></th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Client, i)=>(\r\n\r\n                                            <tr key={Client._id} onClick={()=>handleRow(Client)}  className={Client._id===(selectedClient?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Client.firstname}</th>\r\n                                            <td>{Client.middlename}</td>\r\n                                           < td>{Client.lastname}</td>\r\n                                           <td>{Client.dob}</td>\r\n                                            <td>{Client.gender}</td>\r\n                                             <td>{Client.phone}</td>\r\n                                            <td>{Client.email}</td>\r\n                                            <td>{Client.clientTags}</td>\r\n                                            <td><span   className=\"showAction\"  >...</span></td>\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\n\r\nexport function ClientDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ClientServ=client.service('/Client')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Client =state.ClientModule.selectedClient \r\n    const client=Client\r\n    const handleEdit= async()=>{\r\n        const    newClientModule={\r\n            selectedClient:Client,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Client Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.firstname &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                            <label className=\"label is-size-7 my-0 \"   name=\"firstname\" type=\"text\">First Name </label><label className=\"is-size-7 my-0 \">{Client.firstname }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-hospital\"></i>\r\n                            </span>                    \r\n                        </p>\r\n                    </div>}\r\n\r\n\r\n                    {Client.middlename &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left has-icons-right\">\r\n                        <label className=\"label is-size-7 my-0\"   name=\"middlename\" type=\"text\"> Middle Name </label><label className=\"is-size-7 my-0\">{Client.middlename }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-map-signs\"></i>\r\n                        </span>\r\n                        \r\n                        </p>\r\n                    </div>}\r\n             {Client.lastname &&\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"lastname\" type=\"text\">Last Name</label><label className=\"is-size-7 my-0\">{Client.lastname }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\" nop-user-md \"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                </div>  \r\n                </div>\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.dob &&<div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"dob\" type=\"text\">Date of Birth </label><label className=\"is-size-7 my-0\">{Client.dob }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.gender &&<div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"gender\" type=\"text\">Gender </label><label className=\"is-size-7 my-0\">{Client.gender }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.maritalstatus && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"maritalstatus\" type=\"text\">Marital Status </label><label className=\"is-size-7 my-0\">{Client.maritalstatus }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.mrn && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"mrn\" type=\"text\">Medical Records Number  </label><label className=\"is-size-7 my-0\">{Client.mrn }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                </div>\r\n                </div>\r\n                <div className=\"field is-horizontal\">\r\n                    <div className=\"field-body\">\r\n                    {Client.religion && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"religion\" type=\"text\">Religion  </label><label className=\"is-size-7 my-0\">{Client.religion }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.profession &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"profession\" type=\"text\">Profession  </label><label className=\"is-size-7 my-0\">{Client.profession }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.phone &&<div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                            <label className=\"label is-size-7 my-0\"  name=\"phone\" type=\"text\"> Phone No</label><label className=\"is-size-7 my-0\">{Client.phone }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-phone-alt\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n\r\n                    {Client.email && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"email\" type=\"email\">Email  </label><label className=\"is-size-7 my-0\">{Client.email }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    </div>\r\n                </div>\r\n\r\n                {Client.address &&<div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n\r\n                    <label className=\"label is-size-7 my-0\"  name=\"address\" type=\"text\">Residential Address  </label><label className=\"is-size-7 my-0\">{Client.address }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div>} \r\n                <div className=\"field is-horizontal\">\r\n                    <div className=\"field-body\">\r\n                        {Client.city && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                            \r\n                                <label className=\"label is-size-7 my-0\"  name=\"city\" type=\"text\">Town/City  </label><label className=\"is-size-7 my-0\">{Client.city }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.lga && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                            \r\n                                <label className=\"label is-size-7 my-0\"  name=\"lga\" type=\"text\">Local Govt Area  </label><label className=\"is-size-7 my-0\">{Client.lga }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.state && <div className=\"field\">\r\n                            <p className=\"control has-icons-left\">\r\n                                <label className=\"label is-size-7 my-0\"  name=\"state\" type=\"text\">State  </label><label className=\"is-size-7 my-0\">{Client.state }</label>\r\n                                <span className=\"icon is-small is-left\">\r\n                                <i className=\"nop-envelope\"></i>\r\n                                </span>\r\n                            </p>\r\n                        </div> }\r\n                        {Client.country &&<div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"country\" type=\"text\">Country  </label><label className=\"is-size-7 my-0\">{Client.country }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n                    </div>\r\n                </div> \r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                     {Client.bloodgroup &&  <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"bloodgroup\" type=\"text\">Blood Group </label><label className=\"is-size-7 my-0\">{Client.bloodgroup }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div>}\r\n                   \r\n                    {Client.genotype && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"genotype\" type=\"text\">Genotype  </label><label className=\"is-size-7 my-0\">{Client.genotype }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                    {Client.disabilities && <div className=\"field\">\r\n                        <p className=\"control has-icons-left\">\r\n                        \r\n                            <label className=\"label is-size-7 my-0\"  name=\"disabilities\" type=\"text\">Disabilities  </label><label className=\"is-size-7 my-0\">{Client.disabilities }</label>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"nop-envelope\"></i>\r\n                            </span>\r\n                        </p>\r\n                    </div> }\r\n                </div> \r\n                </div>  \r\n\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n\r\n                {Client.allergies && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"allergies\" type=\"text\">Allergies  </label><label className=\"is-size-7 my-0\">{Client.allergies }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.comorbidities && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"comorbidities\" type=\"text\">Co-mobidities  </label><label className=\"is-size-7 my-0\">{Client.comorbidities }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                </div>\r\n                </div>\r\n               {Client.clientTags && <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n\r\n                    <label className=\"label is-size-7 my-0\"  name=\"clientTags\" type=\"text\">Tags </label><label className=\"is-size-7 my-0\">{Client.clientTags }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div> }\r\n                {Client.specificDetails && <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <label className=\"label is-size-7 my-0\"  name=\"specificDetails\" type=\"text\">Specific Details about Client </label><label className=\"is-size-7 my-0\">{Client.specificDetails }</label>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </div> }\r\n                <div className=\"field is-horizontal\">\r\n                <div className=\"field-body\">\r\n                {Client.nok_name && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_name\" type=\"text\">Next of Kin Full Name</label><label className=\"is-size-7 my-0\">{Client.nok_name }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                {Client.nok_phoneno && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_phoneno\" type=\"text\">Next of Kin Phone Number</label><label className=\"is-size-7 my-0\">{Client.nok_phoneno }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-clinic-medical\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div> }\r\n                {Client.nok_email && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_email\" type=\"email\">Next of Kin Email </label><label className=\"is-size-7 my-0\">{Client.nok_email }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                {Client.nok_relationship && <div className=\"field\">\r\n                    <p className=\"control has-icons-left\">\r\n                    \r\n                        <label className=\"label is-size-7 my-0\"  name=\"nok_relationship\" type=\"text\">Next of Kin Relationship\"  </label><label className=\"is-size-7 my-0\">{Client.nok_relationship }</label>\r\n                        <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-envelope\"></i>\r\n                        </span>\r\n                    </p>\r\n                </div>}\r\n                </div>\r\n                </div> \r\n            <div className=\"field is-grouped  mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit Details\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-info is-small\" >\r\n                        Financial Info\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" >\r\n                        Schedule appointment\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" >\r\n                        Check into Clinic \r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ClientModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ClientServ=client.service('client')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Client =state.ClientModule.selectedClient \r\n\r\n        useEffect(() => {\r\n            setValue(\"firstname\", Client.firstname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"middlename\", Client.middlename,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"lastname\", Client.lastname,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Client.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Client.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"dob\", Client.dob,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"gender\", Client.gender,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"profession\", Client.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n            setValue(\"address\", Client.address,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"city\", Client.city,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"state\", Client.state,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"country\", Client.country,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_name\", Client.nok_name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_email\", Client.nok_email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"nok_phoneno\", Client.nokphoneno,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"lga\", Client.lga,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n            setValue(\"bloodgroup\", Client.bloodgroup,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"genotype\", Client.genotype,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n             setValue(\"disabilities\", Client.disabilities,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"specificDetails\", Client.specificDetails,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"clientTags\", Client.clientTags,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"mrn\", Client.mrn,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"comorbidities\", Client.comorbidities,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n             setValue(\"allergies\", Client.allergies,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) \r\n           \r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newClientModule={\r\n        selectedClient:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newClientModule={\r\n            selectedClient:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ClientModule:newClientModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Client._id\r\n        if (conf){\r\n             \r\n        ClientServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Client successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Client deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Client, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Client, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n       // console.log(data)\r\n      //  data.facility=Client.facility\r\n          //console.log(data);\r\n          \r\n        ClientServ.patch(Client._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Client successfully\")\r\n                 toast({\r\n                    message: 'Client updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Client, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Client, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Client Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                    <label className=\"label is-size-7\"   >First Name </label> <input className=\"input is-small\" ref={register()} name=\"firstname\" type=\"text\"placeholder=\"First Name \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"nop-hospital\"></i>\r\n                    </span>                    \r\n                </p>\r\n            </div>\r\n\r\n\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left has-icons-right\">\r\n                <label className=\"label is-size-7\"   > Middle Name </label><input className=\"input is-small\" ref={register()} name=\"middlename\" type=\"text\" placeholder=\"Middle Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-map-signs\"></i>\r\n                </span>\r\n                \r\n                </p>\r\n            </div>\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  >Last Name</label><input className=\"input is-small\" ref={register()} name=\"lastname\" type=\"text\"placeholder=\"Last Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\" nop-user-md \"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>  \r\n        </div>\r\n        \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Date of Birth  </label><input className=\"input is-small\" ref={register()} name=\"dob\" type=\"text\"placeholder=\"Date of Birth \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Gender  </label><input className=\"input is-small\" ref={register()} name=\"gender\" type=\"text\"placeholder=\"Gender  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Marital Status  </label><input className=\"input is-small\" ref={register()} name=\"maritalstatus\" type=\"text\"placeholder=\"Marital Status  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  > Records Number </label><input className=\"input is-small\" ref={register()} name=\"mrn\" type=\"text\"placeholder=\"Records Number  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Religion</label><input className=\"input is-small\" ref={register()} name=\"religion\" type=\"text\"placeholder=\"Religion \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Profession  </label><input className=\"input is-small\" ref={register()} name=\"profession\" type=\"text\" placeholder=\"Profession\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  > Phone No</label><input className=\"input is-small\" ref={register()} name=\"phone\" type=\"text\" placeholder=\" Phone No \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-phone-alt\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Email  </label><input className=\"input is-small\" ref={register()} name=\"email\" type=\"email\"placeholder=\"Email  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n\r\n            <label className=\"label is-size-7\"  >Residential Address  </label><input className=\"input is-small\" ref={register()} name=\"address\" type=\"text\" placeholder=\"Residential Address  \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Town/City  </label><input className=\"input is-small\" ref={register()} name=\"city\" type=\"text\" placeholder=\"Town/City  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Local Govt Area  </label><input className=\"input is-small\" ref={register()} name=\"lga\" type=\"text\"placeholder=\"Local Govt Area  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >State  </label><input className=\"input is-small\" ref={register()} name=\"state\" type=\"text\"placeholder=\"State\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Country  </label><input className=\"input is-small\" ref={register()} name=\"country\" type=\"text\" placeholder=\"Country  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\"  >Blood Group </label><input className=\"input is-small\" ref={register()} name=\"bloodgroup\" type=\"text\"placeholder=\"Blood Group \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\"  >Genotype  </label><input className=\"input is-small\" ref={register()} name=\"genotype\" type=\"text\" placeholder=\"Genotype \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <label className=\"label is-size-7\" >Disabilities  </label><input className=\"input is-small\" ref={register()}  name=\"disabilities\" type=\"text\"placeholder=\"Disabilities  \" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"nop-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> \r\n        </div> \r\n        </div>  \r\n\r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Allergies  </label><input className=\"input is-small\" ref={register()} name=\"allergies\" type=\"text\"placeholder=\"Allergies  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Co-mobidities </label><input className=\"input is-small\" ref={register()} name=\"comorbidities\" type=\"text\"placeholder=\"Co-mobidities \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        </div>\r\n        </div>\r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n\r\n            <label className=\"label is-size-7\"  >Tags  </label><input className=\"input is-small\" ref={register()} name=\"clientTags\" type=\"text\" placeholder=\"Tags \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field\">\r\n        <p className=\"control has-icons-left\">\r\n            <label className=\"label is-size-7\"  >Specific Details about client  </label><input className=\"input is-small\" ref={register()} name=\"specificDetails\" type=\"text\"placeholder=\"Specific Details about client \" />\r\n            <span className=\"icon is-small is-left\">\r\n            <i className=\"nop-envelope\"></i>\r\n            </span>\r\n        </p>\r\n        </div> \r\n        <div className=\"field is-horizontal\">\r\n        <div className=\"field-body\">\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\"  >Next of Kin Full Name</label><input className=\"input is-small\" ref={register()} name=\"nok_name\" type=\"text\"placeholder=\"Next of Kin Full Name \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-clinic-medical\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n                <label className=\"label is-size-7\" >Phone Number</label><input className=\"input is-small\" ref={register()}  name=\"nok_phoneno\" type=\"text\"placeholder=\" \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-clinic-medical\"></i>\r\n                </span>\r\n            </p>\r\n        </div> \r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  >Next of Kin Email  </label><input className=\"input is-small\" ref={register()} name=\"nok_email\" type=\"email\"placeholder=\"Next of Kin Email  \" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        <div className=\"field\">\r\n            <p className=\"control has-icons-left\">\r\n            \r\n                <label className=\"label is-size-7\"  > Relationship  </label><input className=\"input is-small\" ref={register()} name=\"nok_relationship\" type=\"text\" placeholder=\"Next of Kin Relationship\" />\r\n                <span className=\"icon is-small is-left\">\r\n                <i className=\"nop-envelope\"></i>\r\n                </span>\r\n            </p>\r\n        </div>\r\n        </div>\r\n        </div> \r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n               {/*  <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    const ClientServ=client.service('client')\r\n   // const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            ClientServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Clinic.js",["308","309","310","311","312"],"import React, {useState,useContext, useEffect,useRef} from 'react'\r\nimport client from '../../feathers'\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport { useForm } from \"react-hook-form\";\r\n//import {useHistory} from 'react-router-dom'\r\nimport {UserContext,ObjectContext} from '../../context'\r\nimport {toast} from 'bulma-toast'\r\n// eslint-disable-next-line\r\nconst searchfacility={};\r\n\r\n\r\nexport default function Clinic() {\r\n    const {state}=useContext(ObjectContext) //,setState\r\n    // eslint-disable-next-line\r\n    const [selectedClinic,setSelectedClinic]=useState()\r\n    //const [showState,setShowState]=useState() //create|modify|detail\r\n    \r\n    return(\r\n        <section className= \"section remPadTop\">\r\n           {/*  <div className=\"level\">\r\n            <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">Clinic  Module</span></div>\r\n            </div> */}\r\n            <div className=\"columns \">\r\n            <div className=\"column is-8 \">\r\n                <ClinicList />\r\n                </div>\r\n            <div className=\"column is-4 \">\r\n                {(state.ClinicModule.show ==='create')&&<ClinicCreate />}\r\n                {(state.ClinicModule.show ==='detail')&&<ClinicDetail  />}\r\n                {(state.ClinicModule.show ==='modify')&&<ClinicModify Clinic={selectedClinic} />}\r\n               \r\n            </div>\r\n\r\n            </div>                            \r\n            </section>\r\n       \r\n    )\r\n    \r\n}\r\n\r\nexport function ClinicCreate(){\r\n    const { register, handleSubmit,setValue} = useForm(); //, watch, errors, reset \r\n    const [error, setError] =useState(false)\r\n    const [success, setSuccess] =useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line\r\n    const [facility,setFacility] = useState()\r\n    const ClinicServ=client.service('location')\r\n    //const history = useHistory()\r\n    const {user} = useContext(UserContext) //,setUser\r\n    // eslint-disable-next-line\r\n    const [currentUser,setCurrentUser] = useState()\r\n\r\n\r\n\r\n    const getSearchfacility=(obj)=>{ // buble-up from inputsearch for creating resource\r\n        \r\n        setValue(\"facility\", obj._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        })\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setCurrentUser(user)\r\n        //console.log(currentUser)\r\n        return () => {\r\n        \r\n        }\r\n    }, [user])\r\n\r\n  //check user for facility or get list of facility  \r\n    useEffect(()=>{\r\n        //setFacility(user.activeClinic.FacilityId)//\r\n      if (!user.stacker){\r\n          console.log(currentUser)\r\n        setValue(\"facility\", user.currentEmployee.facilityDetail._id,  {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }) \r\n      }\r\n    })\r\n\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        setMessage(\"\")\r\n        setError(false)\r\n        setSuccess(false)\r\n         // data.createdby=user._id\r\n          console.log(data);\r\n          if (user.currentEmployee){\r\n         data.facility=user.currentEmployee.facilityDetail._id  // or from facility dropdown\r\n          }\r\n          data.locationType=\"Clinic\"\r\n        ClinicServ.create(data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                e.target.reset();\r\n               /*  setMessage(\"Created Clinic successfully\") */\r\n                setSuccess(true)\r\n                toast({\r\n                    message: 'Clinic created succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  setSuccess(false)\r\n            })\r\n            .catch((err)=>{\r\n                toast({\r\n                    message: 'Error creating Clinic ' + err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n\r\n    return (\r\n        <>\r\n            <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Create Clinic\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n   \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n               {/*  <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input is-small\" ref={register({ required: true })}  name=\"ClinicType\" type=\"text\" placeholder=\"Type of Clinic\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                </div> */}\r\n                <div className=\"field\">\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name of Clinic\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\" fas fa-user-md \"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\" Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           \r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                \r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Email\"  />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n           <div className=\"field\"  style={ !user.stacker?{display:\"none\"}:{}} >\r\n                <InputSearch  getSearchfacility={getSearchfacility} clear={success} /> \r\n                <p className=\"control has-icons-left \" style={{display:\"none\"}}>\r\n                    <input className=\"input is-small\" ref={register ({ required: true }) } name=\"facility\" type=\"text\" placeholder=\"Facility\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas  fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n           {/*  <div className=\"field\">\r\n                <div className=\"control has-icons-left\">\r\n                    <div className=\"dropdown \">\r\n                        <div className=\"dropdown-trigger\">\r\n                            <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                            <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital-symbol\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"dropdown-menu\">\r\n                            <div className=\"dropdown-content\">\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa\r\n                                </div>\r\n                                <div className=\"dropdown-item is-active\">\r\n                                    simpa 2\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 3\r\n                                </div>\r\n                                <div className=\"dropdown-item\">\r\n                                    simpa 4\r\n                                </div>\r\n                            </div>\r\n                        </div>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Department Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div>\r\n            <div className=\"field\">\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"password\" type=\"text\" placeholder=\"password\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n            </div> */}\r\n            <div className=\"field\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\">\r\n                        Create\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            \r\n            </form>\r\n            </div>\r\n            </div>\r\n        </>\r\n    )\r\n   \r\n}\r\n\r\nexport function ClinicList({standalone}){\r\n   // const { register, handleSubmit, watch, errors } = useForm();\r\n    // eslint-disable-next-line\r\n    const [error, setError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [message, setMessage] = useState(\"\") \r\n    const ClinicServ=client.service('location')\r\n    //const history = useHistory()\r\n   // const {user,setUser} = useContext(UserContext)\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n   const [selectedClinic, setSelectedClinic]=useState() //\r\n    // eslint-disable-next-line\r\n    const {state,setState}=useContext(ObjectContext)\r\n    // eslint-disable-next-line\r\n    const {user,setUser}=useContext(UserContext)\r\n\r\n\r\n\r\n    const handleCreateNew = async()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:{},\r\n            show :'create'\r\n            }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n        \r\n\r\n    }\r\n    const handleRow= async(Clinic)=>{\r\n        //console.log(\"b4\",state)\r\n\r\n        //console.log(\"handlerow\",Clinic)\r\n\r\n        await setSelectedClinic(Clinic)\r\n\r\n        const    newClinicModule={\r\n            selectedClinic:Clinic,\r\n            show :'detail'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n\r\n    }\r\n\r\n   const handleSearch=(val)=>{\r\n       const field='name'\r\n       console.log(val)\r\n       ClinicServ.find({query: {\r\n                [field]: {\r\n                    $regex:val,\r\n                    $options:'i'\r\n                   \r\n                },\r\n               facility:user.currentEmployee.facilityDetail._id || \"\",\r\n                locationType:\"Clinic\",\r\n               $limit:10,\r\n                $sort: {\r\n                    name: 1\r\n                  }\r\n                    }}).then((res)=>{\r\n                console.log(res)\r\n               setFacilities(res.data)\r\n                setMessage(\" Clinic  fetched successfully\")\r\n                setSuccess(true) \r\n            })\r\n            .catch((err)=>{\r\n                console.log(err)\r\n                setMessage(\"Error fetching Clinic, probable network issues \"+ err )\r\n                setError(true)\r\n            })\r\n        }\r\n   \r\n        const getFacilities= async()=>{\r\n            if (user.currentEmployee){\r\n            \r\n        const findClinic= await ClinicServ.find(\r\n                {query: {\r\n                    locationType:\"Clinic\",\r\n                    facility:user.currentEmployee.facilityDetail._id,\r\n                    $limit:20,\r\n                    $sort: {\r\n                        name: 1\r\n                    }\r\n                    }})\r\n\r\n         await setFacilities(findClinic.data)\r\n                }\r\n                else {\r\n                    if (user.stacker){\r\n                        const findClinic= await ClinicServ.find(\r\n                            {query: {\r\n                                locationType:\"Clinic\",\r\n                                $limit:20,\r\n                                $sort: {\r\n                                    name: 1\r\n                                }\r\n                                }})\r\n            \r\n                    await setFacilities(findClinic.data)\r\n\r\n                    }\r\n                }\r\n          /*   .then((res)=>{\r\n                console.log(res)\r\n                    setFacilities(res.data)\r\n                    setMessage(\" Clinic  fetched successfully\")\r\n                    setSuccess(true)\r\n                })\r\n                .catch((err)=>{\r\n                    setMessage(\"Error creating Clinic, probable network issues \"+ err )\r\n                    setError(true)\r\n                }) */\r\n            }\r\n            \r\n            useEffect(() => {\r\n                setTimeout(() => {\r\n                    console.log(\"happy birthday\")\r\n                    //getFacilities(user)\r\n                }, 200);\r\n\r\n                return () => {\r\n                    \r\n\r\n                }\r\n            },[])\r\n\r\n            useEffect(() => {\r\n               \r\n                if (user){\r\n                    getFacilities()\r\n                }else{\r\n                    /* const localUser= localStorage.getItem(\"user\")\r\n                    const user1=JSON.parse(localUser)\r\n                    console.log(localUser)\r\n                    console.log(user1)\r\n                    fetchUser(user1)\r\n                    console.log(user)\r\n                    getFacilities(user) */\r\n                }\r\n                ClinicServ.on('created', (obj)=>getFacilities())\r\n                ClinicServ.on('updated', (obj)=>getFacilities())\r\n                ClinicServ.on('patched', (obj)=>getFacilities())\r\n                ClinicServ.on('removed', (obj)=>getFacilities())\r\n                return () => {\r\n                \r\n                }\r\n            },[])\r\n\r\n\r\n    //todo: pagination and vertical scroll bar\r\n\r\n    return(\r\n        <>\r\n           {user?( <>  \r\n                <div className=\"level\">\r\n                    <div className=\"level-left\">\r\n                        <div className=\"level-item\">\r\n                            <div className=\"field\">\r\n                                <p className=\"control has-icons-left  \">\r\n                                    <DebounceInput className=\"input is-small \" \r\n                                        type=\"text\" placeholder=\"Search Clinics\"\r\n                                        minLength={3}\r\n                                        debounceTimeout={400}\r\n                                        onChange={(e)=>handleSearch(e.target.value)} />\r\n                                    <span className=\"icon is-small is-left\">\r\n                                        <i className=\"fas fa-search\"></i>\r\n                                    </span>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"level-item\"> <span className=\"is-size-6 has-text-weight-medium\">List of Clinics</span></div>\r\n                    <div className=\"level-right\">\r\n                { !standalone &&   <div className=\"level-item\"> \r\n                            <div className=\"level-item\"><div className=\"button is-success is-small\" onClick={handleCreateNew}>New</div></div>\r\n                        </div>}\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"table-container pullup \">\r\n                                <table className=\"table is-striped  is-hoverable is-fullwidth is-scrollable \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                        <th><abbr title=\"Serial No\">S/No</abbr></th>\r\n                                        <th>Name</th>\r\n                                        {/* <th><abbr title=\"Last Name\">Clinic Type</abbr></th>\r\n                                       <th><abbr title=\"Profession\">Profession</abbr></th>\r\n                                         <th><abbr title=\"Phone\">Phone</abbr></th>\r\n                                        <th><abbr title=\"Email\">Email</abbr></th>\r\n                                        <th><abbr title=\"Department\">Department</abbr></th>\r\n                                        <th><abbr title=\"Departmental Unit\">Departmental Unit</abbr></th> \r\n                                        <th><abbr title=\"Facility\">Facility</abbr></th>*/}\r\n                                       { !standalone &&  <th><abbr title=\"Actions\">Actions</abbr></th>}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tfoot>\r\n                                        \r\n                                    </tfoot>\r\n                                    <tbody>\r\n                                        {facilities.map((Clinic, i)=>(\r\n\r\n                                            <tr key={Clinic._id} onClick={()=>handleRow(Clinic)}  className={Clinic._id===(selectedClinic?._id||null)?\"is-selected\":\"\"}>\r\n                                            <th>{i+1}</th>\r\n                                            <th>{Clinic.name}</th>\r\n                                            {/*<td>{Clinic.ClinicType}</td>\r\n                                            < td>{Clinic.profession}</td>\r\n                                            <td>{Clinic.phone}</td>\r\n                                            <td>{Clinic.email}</td>\r\n                                            <td>{Clinic.department}</td>\r\n                                            <td>{Clinic.deptunit}</td> \r\n                                            <td>{Clinic.facility}</td>*/}\r\n                                          { !standalone &&   <td><span   className=\"showAction\"  >...</span></td>}\r\n                                           \r\n                                            </tr>\r\n\r\n                                        ))}\r\n                                    </tbody>\r\n                                    </table>\r\n                                    \r\n                </div>              \r\n            </>):<div>loading</div>}\r\n            </>\r\n              \r\n    )\r\n    }\r\n\r\n\r\nexport function ClinicDetail(){\r\n    //const { register, handleSubmit, watch, setValue } = useForm(); //errors,\r\n     // eslint-disable-next-line\r\n    const [error, setError] =useState(false) //, \r\n    //const [success, setSuccess] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [message, setMessage] = useState(\"\") //,\r\n    //const ClinicServ=client.service('/Clinic')\r\n    //const history = useHistory()\r\n    //const {user,setUser} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n   \r\n\r\n   const Clinic =state.ClinicModule.selectedClinic \r\n\r\n    const handleEdit= async()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:Clinic,\r\n            show :'modify'\r\n        }\r\n       await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n       //console.log(state)\r\n       \r\n    }\r\n \r\n    return (\r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Clinic Details\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n                <table> \r\n                <tbody>         \r\n                <tr>\r\n                    <td>\r\n                \r\n                    <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                        Name: \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft\"   name=\"name\"> {Clinic.name} </span>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                    <td>\r\n                <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>Location Type:\r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft\"   name=\"ClinicType\">{Clinic.locationType} </span> \r\n                    </td>\r\n                </tr>\r\n                  {/*   <tr>\r\n                    <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>Profession: \r\n                \r\n                    \r\n                    </label>\r\n                    </td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ClinicCity\">{Clinic.profession}</span> \r\n                </td>\r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>Phone:           \r\n                    \r\n                        </label>\r\n                        </td>\r\n                        <td>\r\n                        <span className=\"is-size-7 padleft \"  name=\"ClinicContactPhone\" >{Clinic.phone}</span>\r\n                        </td>\r\n                  </tr>\r\n                    <tr><td>\r\n            \r\n            <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>Email:                     \r\n                    \r\n                         </label></td><td>\r\n                         <span className=\"is-size-7 padleft \"  name=\"ClinicEmail\" >{Clinic.email}</span>\r\n                         </td>\r\n             \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i></span>Department:\r\n                    \r\n                    </label></td>\r\n                    <td>\r\n                    <span className=\"is-size-7 padleft \"  name=\"ClinicOwner\">{Clinic.department}</span>\r\n                    </td>\r\n               \r\n                </tr>\r\n                    <tr>\r\n            <td>\r\n            <label className=\"label is-small\"> <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>Departmental Unit:              \r\n                    \r\n                </label></td>\r\n                <td>\r\n                <span className=\"is-size-7 padleft \"  name=\"ClinicType\">{Clinic.deptunit}</span>\r\n                </td>\r\n              \r\n                </tr> */}\r\n                    \r\n          {/*   <div className=\"field\">\r\n             <label className=\"label is-small\"><span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>Category:              \r\n                    <span className=\"is-size-7 padleft \"  name= \"ClinicCategory\">{Clinic.ClinicCategory}</span>\r\n                </label>\r\n                 </div> */}\r\n\r\n            </tbody> \r\n            </table> \r\n           \r\n            <div className=\"field mt-2\">\r\n                <p className=\"control\">\r\n                    <button className=\"button is-success is-small\" onClick={handleEdit}>\r\n                        Edit\r\n                    </button>\r\n                </p>\r\n            </div>\r\n            { error && <div className=\"message\"> {message}</div>}\r\n           \r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n}\r\n\r\nexport function ClinicModify(){\r\n    const { register, handleSubmit, setValue,reset, errors } = useForm(); //watch, errors,\r\n    // eslint-disable-next-line \r\n    const [error, setError] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [success, setSuccess] =useState(false)\r\n    // eslint-disable-next-line \r\n    const [message,setMessage] = useState(\"\")\r\n    // eslint-disable-next-line \r\n    const ClinicServ=client.service('location')\r\n    //const history = useHistory()\r\n     // eslint-disable-next-line\r\n    const {user} = useContext(UserContext)\r\n    const {state,setState} = useContext(ObjectContext)\r\n\r\n    const Clinic =state.ClinicModule.selectedClinic \r\n\r\n        useEffect(() => {\r\n            setValue(\"name\", Clinic.name,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"locationType\", Clinic.locationType,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n           /*  setValue(\"profession\", Clinic.profession,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"phone\", Clinic.phone,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"email\", Clinic.email,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"department\", Clinic.department,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            })\r\n            setValue(\"deptunit\", Clinic.deptunit,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n          /*   setValue(\"ClinicCategory\", Clinic.ClinicCategory,  {\r\n                shouldValidate: true,\r\n                shouldDirty: true\r\n            }) */\r\n            \r\n            return () => {\r\n                \r\n            }\r\n        })\r\n\r\n   const handleCancel=async()=>{\r\n    const    newClinicModule={\r\n        selectedClinic:{},\r\n        show :'create'\r\n      }\r\n   await setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n   //console.log(state)\r\n           }\r\n\r\n\r\n        const changeState =()=>{\r\n        const    newClinicModule={\r\n            selectedClinic:{},\r\n            show :'create'\r\n        }\r\n        setState((prevstate)=>({...prevstate, ClinicModule:newClinicModule}))\r\n\r\n        }\r\n    const handleDelete=async()=>{\r\n        let conf=window.confirm(\"Are you sure you want to delete this data?\")\r\n        \r\n        const dleteId=Clinic._id\r\n        if (conf){\r\n             \r\n        ClinicServ.remove(dleteId)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n                reset();\r\n               /*  setMessage(\"Deleted Clinic successfully\")\r\n                setSuccess(true)\r\n                changeState()\r\n               setTimeout(() => {\r\n                setSuccess(false)\r\n                }, 200); */\r\n                toast({\r\n                    message: 'Clinic deleted succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                changeState()\r\n            })\r\n            .catch((err)=>{\r\n               // setMessage(\"Error deleting Clinic, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error deleting Clinic, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n        }\r\n    }\r\n        \r\n\r\n   /* ()=> setValue(\"firstName\", \"Bill\", , {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n          })) */\r\n    const onSubmit = (data,e) =>{\r\n        e.preventDefault();\r\n        \r\n        setSuccess(false)\r\n        console.log(data)\r\n        data.facility=Clinic.facility\r\n          //console.log(data);\r\n          \r\n        ClinicServ.patch(Clinic._id,data)\r\n        .then((res)=>{\r\n                //console.log(JSON.stringify(res))\r\n               // e.target.reset();\r\n               // setMessage(\"updated Clinic successfully\")\r\n                 toast({\r\n                    message: 'Clinic updated succesfully',\r\n                    type: 'is-success',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n                  \r\n                changeState()\r\n\r\n            })\r\n            .catch((err)=>{\r\n                //setMessage(\"Error creating Clinic, probable network issues \"+ err )\r\n               // setError(true)\r\n                toast({\r\n                    message: \"Error updating Clinic, probable network issues or \"+ err,\r\n                    type: 'is-danger',\r\n                    dismissible: true,\r\n                    pauseOnHover: true,\r\n                  })\r\n            })\r\n\r\n      } \r\n     \r\n      \r\n    return (\r\n        \r\n        <>\r\n        <div className=\"card \">\r\n            <div className=\"card-header\">\r\n                <p className=\"card-header-title\">\r\n                    Clinic Details-Modify\r\n                </p>\r\n            </div>\r\n            <div className=\"card-content vscrollable\">\r\n           \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"field\">\r\n                    <label className=\"label is-small\"> Name\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                        <input className=\"input  is-small\" ref={register({ required: true })}  name=\"name\" type=\"text\" placeholder=\"Name\" />\r\n                        <span className=\"icon is-small is-left\">\r\n                            <i className=\"fas fa-hospital\"></i>\r\n                        </span>                    \r\n                    </p>\r\n                    </label>\r\n                    </div>\r\n                <div className=\"field\">\r\n                <label className=\"label is-small\">Location Type\r\n                    <p className=\"control has-icons-left has-icons-right\">\r\n                    <input className=\"input is-small \" ref={register({ required: true })} disabled name=\"ClinicType\" type=\"text\" placeholder=\"Clinic Type\" />\r\n                    <span className=\"icon is-small is-left\">\r\n                        <i className=\"fas fa-map-signs\"></i>\r\n                    </span>\r\n                    \r\n                </p>\r\n                </label>\r\n                </div>\r\n            {/* <div className=\"field\">\r\n            <label className=\"label is-small\">Profession\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"profession\" type=\"text\" placeholder=\"Profession\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Phone\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"phone\" type=\"text\" placeholder=\"Phone No\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-phone-alt\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                 </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Email\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"email\" type=\"email\" placeholder=\"Clinic Email\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-envelope\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Department\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"department\" type=\"text\" placeholder=\"Department\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-user-md\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                {errors.department && <span>This field is required</span>}\r\n                </div>\r\n            <div className=\"field\">\r\n            <label className=\"label is-small\">Departmental Unit\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"deptunit\" type=\"text\" placeholder=\"Departmental Unit\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-hospital-symbol\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n                </div> */}\r\n           {/*  <div className=\"field\">\r\n            <label className=\"label is-small\">Category\r\n                <p className=\"control has-icons-left\">\r\n                    <input className=\"input is-small\" ref={register({ required: true })} name=\"ClinicCategory\" type=\"text\" placeholder=\"Clinic Category\"/>\r\n                    <span className=\"icon is-small is-left\">\r\n                    <i className=\"fas fa-clinic-medical\"></i>\r\n                    </span>\r\n                </p>\r\n                </label>\r\n            </div> */}\r\n           \r\n           \r\n            </form>\r\n            \r\n            <div className=\"field  is-grouped mt-2\" >\r\n                <p className=\"control\">\r\n                    <button type=\"submit\" className=\"button is-success is-small\" onClick={handleSubmit(onSubmit)}>\r\n                        Save\r\n                    </button>\r\n                </p>\r\n                <p className=\"control\">\r\n                    <button className=\"button is-warning is-small\" onClick={handleCancel}>\r\n                        Cancel\r\n                    </button>\r\n                </p>\r\n                {/* <p className=\"control\">\r\n                    <button className=\"button is-danger is-small\" onClick={()=>handleDelete()} type=\"delete\">\r\n                       Delete\r\n                    </button>\r\n                </p> */}\r\n            </div>\r\n        </div>\r\n        </div>\r\n        </>\r\n    )\r\n   \r\n   \r\n                \r\n}   \r\n\r\nexport  function InputSearch({getSearchfacility,clear}) {\r\n    \r\n    const facilityServ=client.service('facility')\r\n    const [facilities,setFacilities]=useState([])\r\n     // eslint-disable-next-line\r\n     const [searchError, setSearchError] =useState(false)\r\n     // eslint-disable-next-line\r\n    const [showPanel, setShowPanel] =useState(false)\r\n     // eslint-disable-next-line\r\n   const [searchMessage, setSearchMessage] = useState(\"\") \r\n   // eslint-disable-next-line \r\n   const [simpa,setSimpa]=useState(\"\")\r\n   // eslint-disable-next-line \r\n   const [chosen,setChosen]=useState(false)\r\n   // eslint-disable-next-line \r\n   const [count,setCount]=useState(0)\r\n   const inputEl=useRef(null)\r\n\r\n\r\n   const handleRow= async(obj)=>{\r\n        await setChosen(true)\r\n        //alert(\"something is chaning\")\r\n       getSearchfacility(obj)\r\n       \r\n       await setSimpa(obj.facilityName)\r\n       \r\n        // setSelectedFacility(obj)\r\n        setShowPanel(false)\r\n        await setCount(2)\r\n        /* const    newfacilityModule={\r\n            selectedFacility:facility,\r\n            show :'detail'\r\n        }\r\n   await setState((prevstate)=>({...prevstate, facilityModule:newfacilityModule})) */\r\n   //console.log(state)\r\n}\r\n    const handleBlur=async(e)=>{\r\n         if (count===2){\r\n             console.log(\"stuff was chosen\")\r\n         }\r\n       \r\n       /*  console.log(\"blur\")\r\n         setShowPanel(false)\r\n        console.log(JSON.stringify(simpa))\r\n        if (simpa===\"\"){\r\n            console.log(facilities.length)\r\n            setSimpa(\"abc\")\r\n            setSimpa(\"\")\r\n            setFacilities([])\r\n            inputEl.current.setValue=\"\"\r\n        }\r\n        console.log(facilities.length)\r\n        console.log(inputEl.current) */\r\n    }\r\n    const handleSearch=async(val)=>{\r\n        \r\n        const field='facilityName' //field variable\r\n       \r\n        if (val.length>=3){\r\n            facilityServ.find({query: {     //service\r\n                 [field]: {\r\n                     $regex:val,\r\n                     $options:'i'\r\n                    \r\n                 },\r\n                 $limit:10,\r\n                 $sort: {\r\n                     createdAt: -1\r\n                   }\r\n                     }}).then((res)=>{\r\n              console.log(\"facility  fetched successfully\") \r\n                setFacilities(res.data)\r\n                 setSearchMessage(\" facility  fetched successfully\")\r\n                 setShowPanel(true)\r\n             })\r\n             .catch((err)=>{\r\n                 console.log(err)\r\n                 setSearchMessage(\"Error searching facility, probable network issues \"+ err )\r\n                 setSearchError(true)\r\n             })\r\n         }\r\n        else{\r\n            console.log(\"less than 3 \")\r\n            console.log(val)\r\n            setShowPanel(false)\r\n            await setFacilities([])\r\n            console.log(facilities)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n       if (clear){\r\n           setSimpa(\"\")\r\n       }\r\n        return () => {\r\n            \r\n        }\r\n    }, [clear] )\r\n    return (\r\n        <div>\r\n            <div className=\"field\">\r\n                <div className=\"control has-icons-left  \">\r\n                    <div className={`dropdown ${showPanel?\"is-active\":\"\"}`}>\r\n                        <div className=\"dropdown-trigger\">\r\n                            <DebounceInput className=\"input is-small \" \r\n                                type=\"text\" placeholder=\"Search Facilities\"\r\n                                value={simpa}\r\n                                minLength={1}\r\n                                debounceTimeout={400}\r\n                                onBlur={(e)=>handleBlur(e)}\r\n                                onChange={(e)=>handleSearch(e.target.value)}\r\n                                inputRef={inputEl}\r\n                                  />\r\n                            <span className=\"icon is-small is-left\">\r\n                                <i className=\"fas fa-search\"></i>\r\n                            </span>\r\n                        </div>\r\n                        {searchError&&<div>{searchMessage}</div>}\r\n                        <div className=\"dropdown-menu\" >\r\n                            <div className=\"dropdown-content\">\r\n                            {facilities.map((facility, i)=>(\r\n                                    \r\n                                    <div className=\"dropdown-item\" key={facility._id} onClick={()=>handleRow(facility)}>\r\n                                        \r\n                                        <span>{facility.facilityName}</span>\r\n                                        \r\n                                    </div>\r\n                                    \r\n                                    ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n          \r\n        </div>\r\n    )\r\n}","C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\Encounter.js",["313","314","315","316","317","318"],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\ClinicSetup.js",[],"C:\\Users\\simpa\\Documents\\healthstack\\frontend\\frontend\\src\\components\\Clinic\\EncounterRight.js",[],{"ruleId":"319","severity":1,"message":"320","line":106,"column":18,"nodeType":"321","messageId":"322","endLine":106,"endColumn":23},{"ruleId":"323","severity":1,"message":"324","line":127,"column":4,"nodeType":"325","endLine":127,"endColumn":6,"suggestions":"326"},{"ruleId":"319","severity":1,"message":"327","line":2,"column":40,"nodeType":"321","messageId":"322","endLine":2,"endColumn":44},{"ruleId":"319","severity":1,"message":"328","line":13,"column":12,"nodeType":"321","messageId":"322","endLine":13,"endColumn":16},{"ruleId":"319","severity":1,"message":"329","line":13,"column":17,"nodeType":"321","messageId":"322","endLine":13,"endColumn":24},{"ruleId":"319","severity":1,"message":"330","line":84,"column":16,"nodeType":"321","messageId":"322","endLine":84,"endColumn":20},{"ruleId":"323","severity":1,"message":"331","line":108,"column":7,"nodeType":"325","endLine":108,"endColumn":9,"suggestions":"332"},{"ruleId":"333","replacedBy":"334"},{"ruleId":"335","replacedBy":"336"},{"ruleId":"319","severity":1,"message":"337","line":43,"column":12,"nodeType":"321","messageId":"322","endLine":43,"endColumn":17},{"ruleId":"319","severity":1,"message":"338","line":45,"column":12,"nodeType":"321","messageId":"322","endLine":45,"endColumn":19},{"ruleId":"323","severity":1,"message":"339","line":416,"column":15,"nodeType":"325","endLine":416,"endColumn":17,"suggestions":"340"},{"ruleId":"323","severity":1,"message":"341","line":423,"column":12,"nodeType":"325","endLine":423,"endColumn":45,"suggestions":"342"},{"ruleId":"323","severity":1,"message":"341","line":546,"column":11,"nodeType":"325","endLine":546,"endColumn":22,"suggestions":"343"},{"ruleId":"319","severity":1,"message":"344","line":668,"column":53,"nodeType":"321","messageId":"322","endLine":668,"endColumn":59},{"ruleId":"323","severity":1,"message":"345","line":708,"column":11,"nodeType":"325","endLine":708,"endColumn":13,"suggestions":"346"},{"ruleId":"319","severity":1,"message":"347","line":731,"column":11,"nodeType":"321","messageId":"322","endLine":731,"endColumn":23},{"ruleId":"319","severity":1,"message":"337","line":45,"column":12,"nodeType":"321","messageId":"322","endLine":45,"endColumn":17},{"ruleId":"319","severity":1,"message":"338","line":47,"column":12,"nodeType":"321","messageId":"322","endLine":47,"endColumn":19},{"ruleId":"319","severity":1,"message":"348","line":63,"column":12,"nodeType":"321","messageId":"322","endLine":63,"endColumn":23},{"ruleId":"319","severity":1,"message":"349","line":72,"column":11,"nodeType":"321","messageId":"322","endLine":72,"endColumn":18},{"ruleId":"319","severity":1,"message":"350","line":74,"column":9,"nodeType":"321","messageId":"322","endLine":74,"endColumn":19},{"ruleId":"323","severity":1,"message":"351","line":215,"column":7,"nodeType":"325","endLine":215,"endColumn":13,"suggestions":"352"},{"ruleId":"353","severity":1,"message":"354","line":652,"column":21,"nodeType":"355","messageId":"356","endLine":652,"endColumn":36},{"ruleId":"323","severity":1,"message":"357","line":670,"column":15,"nodeType":"325","endLine":670,"endColumn":17,"suggestions":"358"},{"ruleId":"323","severity":1,"message":"341","line":678,"column":16,"nodeType":"325","endLine":678,"endColumn":49,"suggestions":"359"},{"ruleId":"319","severity":1,"message":"360","line":769,"column":11,"nodeType":"321","messageId":"322","endLine":769,"endColumn":21},{"ruleId":"319","severity":1,"message":"344","line":977,"column":53,"nodeType":"321","messageId":"322","endLine":977,"endColumn":59},{"ruleId":"319","severity":1,"message":"361","line":1358,"column":11,"nodeType":"321","messageId":"322","endLine":1358,"endColumn":27},{"ruleId":"319","severity":1,"message":"362","line":8,"column":37,"nodeType":"321","messageId":"322","endLine":8,"endColumn":42},{"ruleId":"319","severity":1,"message":"344","line":8,"column":44,"nodeType":"321","messageId":"322","endLine":8,"endColumn":50},{"ruleId":"319","severity":1,"message":"363","line":11,"column":11,"nodeType":"321","messageId":"322","endLine":11,"endColumn":19},{"ruleId":"333","replacedBy":"364"},{"ruleId":"335","replacedBy":"365"},{"ruleId":"323","severity":1,"message":"366","line":275,"column":7,"nodeType":"325","endLine":275,"endColumn":9,"suggestions":"367"},{"ruleId":"333","replacedBy":"368"},{"ruleId":"335","replacedBy":"369"},{"ruleId":"323","severity":1,"message":"370","line":81,"column":7,"nodeType":"325","endLine":81,"endColumn":13,"suggestions":"371"},{"ruleId":"323","severity":1,"message":"372","line":389,"column":15,"nodeType":"325","endLine":389,"endColumn":17,"suggestions":"373"},{"ruleId":"333","replacedBy":"374"},{"ruleId":"335","replacedBy":"375"},{"ruleId":"333","replacedBy":"376"},{"ruleId":"335","replacedBy":"377"},{"ruleId":"333","replacedBy":"378"},{"ruleId":"335","replacedBy":"379"},{"ruleId":"319","severity":1,"message":"337","line":44,"column":12,"nodeType":"321","messageId":"322","endLine":44,"endColumn":17},{"ruleId":"319","severity":1,"message":"338","line":46,"column":12,"nodeType":"321","messageId":"322","endLine":46,"endColumn":19},{"ruleId":"353","severity":1,"message":"354","line":537,"column":21,"nodeType":"355","messageId":"356","endLine":537,"endColumn":36},{"ruleId":"323","severity":1,"message":"357","line":555,"column":15,"nodeType":"325","endLine":555,"endColumn":17,"suggestions":"380"},{"ruleId":"323","severity":1,"message":"341","line":563,"column":16,"nodeType":"325","endLine":563,"endColumn":49,"suggestions":"381"},{"ruleId":"319","severity":1,"message":"360","line":654,"column":11,"nodeType":"321","messageId":"322","endLine":654,"endColumn":21},{"ruleId":"319","severity":1,"message":"344","line":862,"column":53,"nodeType":"321","messageId":"322","endLine":862,"endColumn":59},{"ruleId":"319","severity":1,"message":"382","line":1,"column":16,"nodeType":"321","messageId":"322","endLine":1,"endColumn":24},{"ruleId":"319","severity":1,"message":"383","line":1,"column":25,"nodeType":"321","messageId":"322","endLine":1,"endColumn":34},{"ruleId":"319","severity":1,"message":"384","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":13},{"ruleId":"319","severity":1,"message":"385","line":2,"column":17,"nodeType":"321","messageId":"322","endLine":2,"endColumn":26},{"ruleId":"319","severity":1,"message":"386","line":3,"column":9,"nodeType":"321","messageId":"322","endLine":3,"endColumn":20},{"ruleId":"319","severity":1,"message":"387","line":8,"column":11,"nodeType":"321","messageId":"322","endLine":8,"endColumn":27},{"ruleId":"333","replacedBy":"388"},{"ruleId":"335","replacedBy":"389"},{"ruleId":"319","severity":1,"message":"337","line":43,"column":12,"nodeType":"321","messageId":"322","endLine":43,"endColumn":17},{"ruleId":"319","severity":1,"message":"338","line":45,"column":12,"nodeType":"321","messageId":"322","endLine":45,"endColumn":19},{"ruleId":"323","severity":1,"message":"390","line":389,"column":15,"nodeType":"325","endLine":389,"endColumn":17,"suggestions":"391"},{"ruleId":"319","severity":1,"message":"344","line":620,"column":53,"nodeType":"321","messageId":"322","endLine":620,"endColumn":59},{"ruleId":"319","severity":1,"message":"337","line":43,"column":12,"nodeType":"321","messageId":"322","endLine":43,"endColumn":17},{"ruleId":"319","severity":1,"message":"338","line":45,"column":12,"nodeType":"321","messageId":"322","endLine":45,"endColumn":19},{"ruleId":"323","severity":1,"message":"392","line":392,"column":15,"nodeType":"325","endLine":392,"endColumn":17,"suggestions":"393"},{"ruleId":"319","severity":1,"message":"344","line":623,"column":53,"nodeType":"321","messageId":"322","endLine":623,"endColumn":59},{"ruleId":"319","severity":1,"message":"347","line":696,"column":11,"nodeType":"321","messageId":"322","endLine":696,"endColumn":23},{"ruleId":"319","severity":1,"message":"327","line":2,"column":40,"nodeType":"321","messageId":"322","endLine":2,"endColumn":44},{"ruleId":"319","severity":1,"message":"386","line":11,"column":9,"nodeType":"321","messageId":"322","endLine":11,"endColumn":20},{"ruleId":"319","severity":1,"message":"394","line":14,"column":18,"nodeType":"321","messageId":"322","endLine":14,"endColumn":26},{"ruleId":"323","severity":1,"message":"395","line":30,"column":12,"nodeType":"325","endLine":30,"endColumn":14,"suggestions":"396"},{"ruleId":"319","severity":1,"message":"362","line":7,"column":37,"nodeType":"321","messageId":"322","endLine":7,"endColumn":42},{"ruleId":"319","severity":1,"message":"344","line":7,"column":44,"nodeType":"321","messageId":"322","endLine":7,"endColumn":50},{"ruleId":"333","replacedBy":"397"},{"ruleId":"335","replacedBy":"398"},{"ruleId":"319","severity":1,"message":"327","line":2,"column":40,"nodeType":"321","messageId":"322","endLine":2,"endColumn":44},{"ruleId":"319","severity":1,"message":"337","line":43,"column":12,"nodeType":"321","messageId":"322","endLine":43,"endColumn":17},{"ruleId":"319","severity":1,"message":"399","line":44,"column":12,"nodeType":"321","messageId":"322","endLine":44,"endColumn":19},{"ruleId":"319","severity":1,"message":"338","line":45,"column":12,"nodeType":"321","messageId":"322","endLine":45,"endColumn":19},{"ruleId":"319","severity":1,"message":"400","line":56,"column":11,"nodeType":"321","messageId":"322","endLine":56,"endColumn":28},{"ruleId":"323","severity":1,"message":"401","line":392,"column":15,"nodeType":"325","endLine":392,"endColumn":17,"suggestions":"402"},{"ruleId":"319","severity":1,"message":"344","line":624,"column":53,"nodeType":"321","messageId":"322","endLine":624,"endColumn":59},{"ruleId":"319","severity":1,"message":"347","line":697,"column":11,"nodeType":"321","messageId":"322","endLine":697,"endColumn":23},{"ruleId":"319","severity":1,"message":"382","line":1,"column":16,"nodeType":"321","messageId":"322","endLine":1,"endColumn":24},{"ruleId":"319","severity":1,"message":"383","line":1,"column":25,"nodeType":"321","messageId":"322","endLine":1,"endColumn":34},{"ruleId":"319","severity":1,"message":"384","line":2,"column":8,"nodeType":"321","messageId":"322","endLine":2,"endColumn":13},{"ruleId":"319","severity":1,"message":"385","line":2,"column":17,"nodeType":"321","messageId":"322","endLine":2,"endColumn":26},{"ruleId":"319","severity":1,"message":"386","line":3,"column":9,"nodeType":"321","messageId":"322","endLine":3,"endColumn":20},{"ruleId":"319","severity":1,"message":"387","line":8,"column":11,"nodeType":"321","messageId":"322","endLine":8,"endColumn":27},{"ruleId":"333","replacedBy":"403"},{"ruleId":"335","replacedBy":"404"},{"ruleId":"319","severity":1,"message":"327","line":2,"column":40,"nodeType":"321","messageId":"322","endLine":2,"endColumn":44},{"ruleId":"319","severity":1,"message":"386","line":11,"column":9,"nodeType":"321","messageId":"322","endLine":11,"endColumn":20},{"ruleId":"319","severity":1,"message":"394","line":14,"column":18,"nodeType":"321","messageId":"322","endLine":14,"endColumn":26},{"ruleId":"323","severity":1,"message":"405","line":30,"column":12,"nodeType":"325","endLine":30,"endColumn":14,"suggestions":"406"},{"ruleId":"319","severity":1,"message":"337","line":43,"column":12,"nodeType":"321","messageId":"322","endLine":43,"endColumn":17},{"ruleId":"319","severity":1,"message":"338","line":45,"column":12,"nodeType":"321","messageId":"322","endLine":45,"endColumn":19},{"ruleId":"323","severity":1,"message":"339","line":416,"column":15,"nodeType":"325","endLine":416,"endColumn":17,"suggestions":"407"},{"ruleId":"323","severity":1,"message":"341","line":423,"column":12,"nodeType":"325","endLine":423,"endColumn":45,"suggestions":"408"},{"ruleId":"323","severity":1,"message":"341","line":546,"column":11,"nodeType":"325","endLine":546,"endColumn":22,"suggestions":"409"},{"ruleId":"319","severity":1,"message":"344","line":668,"column":53,"nodeType":"321","messageId":"322","endLine":668,"endColumn":59},{"ruleId":"323","severity":1,"message":"345","line":708,"column":11,"nodeType":"325","endLine":708,"endColumn":13,"suggestions":"410"},{"ruleId":"319","severity":1,"message":"347","line":731,"column":11,"nodeType":"321","messageId":"322","endLine":731,"endColumn":23},{"ruleId":"319","severity":1,"message":"337","line":44,"column":12,"nodeType":"321","messageId":"322","endLine":44,"endColumn":17},{"ruleId":"319","severity":1,"message":"338","line":46,"column":12,"nodeType":"321","messageId":"322","endLine":46,"endColumn":19},{"ruleId":"353","severity":1,"message":"354","line":537,"column":21,"nodeType":"355","messageId":"356","endLine":537,"endColumn":36},{"ruleId":"323","severity":1,"message":"357","line":555,"column":15,"nodeType":"325","endLine":555,"endColumn":17,"suggestions":"411"},{"ruleId":"323","severity":1,"message":"341","line":563,"column":16,"nodeType":"325","endLine":563,"endColumn":49,"suggestions":"412"},{"ruleId":"319","severity":1,"message":"360","line":654,"column":11,"nodeType":"321","messageId":"322","endLine":654,"endColumn":21},{"ruleId":"319","severity":1,"message":"344","line":862,"column":53,"nodeType":"321","messageId":"322","endLine":862,"endColumn":59},{"ruleId":"319","severity":1,"message":"337","line":40,"column":12,"nodeType":"321","messageId":"322","endLine":40,"endColumn":17},{"ruleId":"319","severity":1,"message":"399","line":41,"column":12,"nodeType":"321","messageId":"322","endLine":41,"endColumn":19},{"ruleId":"319","severity":1,"message":"338","line":42,"column":12,"nodeType":"321","messageId":"322","endLine":42,"endColumn":19},{"ruleId":"319","severity":1,"message":"400","line":53,"column":11,"nodeType":"321","messageId":"322","endLine":53,"endColumn":28},{"ruleId":"319","severity":1,"message":"413","line":504,"column":14,"nodeType":"321","messageId":"322","endLine":504,"endColumn":19},{"ruleId":"323","severity":1,"message":"414","line":628,"column":15,"nodeType":"325","endLine":628,"endColumn":17,"suggestions":"415"},{"ruleId":"319","severity":1,"message":"416","line":725,"column":11,"nodeType":"321","messageId":"322","endLine":725,"endColumn":17},{"ruleId":"319","severity":1,"message":"344","line":1051,"column":53,"nodeType":"321","messageId":"322","endLine":1051,"endColumn":59},{"ruleId":"319","severity":1,"message":"347","line":1189,"column":11,"nodeType":"321","messageId":"322","endLine":1189,"endColumn":23},{"ruleId":"319","severity":1,"message":"337","line":43,"column":12,"nodeType":"321","messageId":"322","endLine":43,"endColumn":17},{"ruleId":"319","severity":1,"message":"338","line":45,"column":12,"nodeType":"321","messageId":"322","endLine":45,"endColumn":19},{"ruleId":"323","severity":1,"message":"417","line":392,"column":15,"nodeType":"325","endLine":392,"endColumn":17,"suggestions":"418"},{"ruleId":"319","severity":1,"message":"344","line":623,"column":53,"nodeType":"321","messageId":"322","endLine":623,"endColumn":59},{"ruleId":"319","severity":1,"message":"347","line":696,"column":11,"nodeType":"321","messageId":"322","endLine":696,"endColumn":23},{"ruleId":"319","severity":1,"message":"419","line":4,"column":10,"nodeType":"321","messageId":"322","endLine":4,"endColumn":17},{"ruleId":"319","severity":1,"message":"420","line":8,"column":23,"nodeType":"321","messageId":"322","endLine":8,"endColumn":35},{"ruleId":"319","severity":1,"message":"421","line":8,"column":37,"nodeType":"321","messageId":"322","endLine":8,"endColumn":47},{"ruleId":"319","severity":1,"message":"422","line":12,"column":5,"nodeType":"321","messageId":"322","endLine":12,"endColumn":11},{"ruleId":"319","severity":1,"message":"423","line":18,"column":12,"nodeType":"321","messageId":"322","endLine":18,"endColumn":17},{"ruleId":"319","severity":1,"message":"361","line":155,"column":11,"nodeType":"321","messageId":"322","endLine":155,"endColumn":27},"no-unused-vars","'user1' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setUser' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["424"],"'Link' is defined but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","'resp' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'reAuth', 'setUser', and 'user'. Either include them or remove the dependency array.",["425"],"no-native-reassign",["426"],"no-negated-in-lhs",["427"],"'error' is assigned a value but never used.","'message' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'InventoryServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["428"],"React Hook useEffect has a missing dependency: 'getFacilities'. Either include it or remove the dependency array.",["429"],["430"],"'errors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleSetPrice'. Either include it or remove the dependency array.",["431"],"'handleDelete' is assigned a value but never used.","'inventoryId' is assigned a value but never used.","'inputEl' is assigned a value but never used.","'hidestatus' is defined but never used.","React Hook useEffect has missing dependencies: 'documentNo', 'quantity', 'sellingprice', 'source', 'totalamount', and 'type'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProductEntry' needs the current value of 'documentNo'.",["432"],"no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","React Hook useEffect has missing dependencies: 'ProductEntryServ', 'getFacilities', and 'state.StoreModule.selectedStore'. Either include them or remove the dependency array.",["433"],["434"],"'handleEdit' is assigned a value but never used.","'handleAddproduct' is assigned a value but never used.","'watch' is assigned a value but never used.","'userServ' is assigned a value but never used.",["426"],["427"],"React Hook useEffect has missing dependencies: 'facilityServ' and 'getFacilities'. Either include them or remove the dependency array.",["435"],["426"],["427"],"React Hook useEffect has a missing dependency: 'setValue'. Either include it or remove the dependency array.",["436"],"React Hook useEffect has missing dependencies: 'EmployeeServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["437"],["426"],["427"],["426"],["427"],["426"],["427"],["438"],["439"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'Store' is defined but never used.","'StoreList' is defined but never used.","'UserContext' is defined but never used.","'handleCloseModal' is assigned a value but never used.",["426"],["427"],"React Hook useEffect has missing dependencies: 'LocationServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["440"],"React Hook useEffect has missing dependencies: 'StoreServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["441"],"'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleChangeStore' and 'selectedStore'. Either include them or remove the dependency array.",["442"],["426"],["427"],"'success' is assigned a value but never used.","'getSearchfacility' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ProductServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["443"],["426"],["427"],"React Hook useEffect has missing dependencies: 'handleChangeClinic' and 'selectedClinic'. Either include them or remove the dependency array.",["444"],["445"],["446"],["447"],["448"],["449"],["450"],"'field' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ClientServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["451"],"'client' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ClinicServ', 'getFacilities', and 'user'. Either include them or remove the dependency array.",["452"],"'useForm' is defined but never used.","'ClientDetail' is defined but never used.","'ClientList' is defined but never used.","'random' is assigned a value but never used.","'state' is assigned a value but never used.",{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},"no-global-assign","no-unsafe-negation",{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"459","fix":"469"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"467","fix":"476"},{"desc":"459","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"457","fix":"488"},{"desc":"459","fix":"489"},{"desc":"461","fix":"490"},{"desc":"463","fix":"491"},{"desc":"467","fix":"492"},{"desc":"459","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},"Update the dependencies array to be: [setUser, user]",{"range":"498","text":"499"},"Update the dependencies array to be: [reAuth, setUser, user]",{"range":"500","text":"501"},"Update the dependencies array to be: [InventoryServ, getFacilities, user]",{"range":"502","text":"503"},"Update the dependencies array to be: [getFacilities, state.StoreModule.selectedStore]",{"range":"504","text":"505"},"Update the dependencies array to be: [Inventory, getFacilities]",{"range":"506","text":"507"},"Update the dependencies array to be: [handleSetPrice]",{"range":"508","text":"509"},"Update the dependencies array to be: [date, documentNo, quantity, sellingprice, source, totalamount, type]",{"range":"510","text":"511"},"Update the dependencies array to be: [ProductEntryServ, getFacilities, state.StoreModule.selectedStore]",{"range":"512","text":"513"},{"range":"514","text":"505"},"Update the dependencies array to be: [facilityServ, getFacilities]",{"range":"515","text":"516"},"Update the dependencies array to be: [setValue, user]",{"range":"517","text":"518"},"Update the dependencies array to be: [EmployeeServ, getFacilities, user]",{"range":"519","text":"520"},{"range":"521","text":"513"},{"range":"522","text":"505"},"Update the dependencies array to be: [LocationServ, getFacilities, user]",{"range":"523","text":"524"},"Update the dependencies array to be: [StoreServ, getFacilities, user]",{"range":"525","text":"526"},"Update the dependencies array to be: [handleChangeStore, selectedStore]",{"range":"527","text":"528"},"Update the dependencies array to be: [ProductServ, getFacilities, user]",{"range":"529","text":"530"},"Update the dependencies array to be: [handleChangeClinic, selectedClinic]",{"range":"531","text":"532"},{"range":"533","text":"503"},{"range":"534","text":"505"},{"range":"535","text":"507"},{"range":"536","text":"509"},{"range":"537","text":"513"},{"range":"538","text":"505"},"Update the dependencies array to be: [ClientServ, getFacilities, user]",{"range":"539","text":"540"},"Update the dependencies array to be: [ClinicServ, getFacilities, user]",{"range":"541","text":"542"},[2935,2937],"[setUser, user]",[3084,3086],"[reAuth, setUser, user]",[16336,16338],"[InventoryServ, getFacilities, user]",[16478,16511],"[getFacilities, state.StoreModule.selectedStore]",[22351,22362],"[Inventory, getFacilities]",[28049,28051],"[handleSetPrice]",[6766,6772],"[date, documentNo, quantity, sellingprice, source, totalamount, type]",[24858,24860],"[ProductEntryServ, getFacilities, state.StoreModule.selectedStore]",[25062,25095],[10381,10383],"[facilityServ, getFacilities]",[2746,2752],"[setValue, user]",[14951,14953],"[EmployeeServ, getFacilities, user]",[21183,21185],[21387,21420],[14869,14871],"[LocationServ, getFacilities, user]",[14893,14895],"[StoreServ, getFacilities, user]",[1149,1151],"[handleChangeStore, selectedStore]",[14978,14980],"[ProductServ, getFacilities, user]",[1095,1097],"[handleChangeClinic, selectedClinic]",[16336,16338],[16478,16511],[22351,22362],[28049,28051],[21181,21183],[21385,21418],[26460,26462],"[ClientServ, getFacilities, user]",[14953,14955],"[ClinicServ, getFacilities, user]"]
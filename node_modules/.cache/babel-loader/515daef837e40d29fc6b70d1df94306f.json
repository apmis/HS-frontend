{"ast":null,"code":"import { useAttribution } from './attribution.js';\nimport { useLeafletContext } from './context.js';\nimport { useEventHandlers } from './events.js';\nimport { withPane } from './pane.js';\nexport function createDivOverlayHook(useElement, useLifecycle) {\n  return function useDivOverlay(props, setOpen) {\n    var context = useLeafletContext();\n    var elementRef = useElement(withPane(props, context), context);\n    useAttribution(context.map, props.attribution);\n    useEventHandlers(elementRef.current, props.eventHandlers);\n    useLifecycle(elementRef.current, context, props, setOpen);\n    return elementRef;\n  };\n}","map":{"version":3,"sources":["/home/mfybaby/Documents/HealthStack2/HS-frontend/node_modules/@react-leaflet/core/lib/div-overlay.js"],"names":["useAttribution","useLeafletContext","useEventHandlers","withPane","createDivOverlayHook","useElement","useLifecycle","useDivOverlay","props","setOpen","context","elementRef","map","attribution","current","eventHandlers"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,OAAO,SAASC,oBAAT,CAA8BC,UAA9B,EAA0CC,YAA1C,EAAwD;AAC3D,SAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuC;AAC1C,QAAMC,OAAO,GAAGT,iBAAiB,EAAjC;AACA,QAAMU,UAAU,GAAGN,UAAU,CAACF,QAAQ,CAACK,KAAD,EAAQE,OAAR,CAAT,EAA2BA,OAA3B,CAA7B;AACAV,IAAAA,cAAc,CAACU,OAAO,CAACE,GAAT,EAAcJ,KAAK,CAACK,WAApB,CAAd;AACAX,IAAAA,gBAAgB,CAACS,UAAU,CAACG,OAAZ,EAAqBN,KAAK,CAACO,aAA3B,CAAhB;AACAT,IAAAA,YAAY,CAACK,UAAU,CAACG,OAAZ,EAAqBJ,OAArB,EAA8BF,KAA9B,EAAqCC,OAArC,CAAZ;AACA,WAAOE,UAAP;AACH,GAPD;AAQH","sourcesContent":["import { useAttribution } from './attribution.js';\nimport { useLeafletContext } from './context.js';\nimport { useEventHandlers } from './events.js';\nimport { withPane } from './pane.js';\nexport function createDivOverlayHook(useElement, useLifecycle) {\n    return function useDivOverlay(props, setOpen) {\n        const context = useLeafletContext();\n        const elementRef = useElement(withPane(props, context), context);\n        useAttribution(context.map, props.attribution);\n        useEventHandlers(elementRef.current, props.eventHandlers);\n        useLifecycle(elementRef.current, context, props, setOpen);\n        return elementRef;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}
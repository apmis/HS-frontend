{"ast":null,"code":"'use strict';\n\nvar lower = 'abcdefghijklmnopqrstuvwxyz',\n    upper = lower.toUpperCase(),\n    numeric = '0123456789',\n    types = {\n  lower: lower,\n  upper: upper,\n  numeric: numeric,\n  lowernumeric: \"\" + lower + numeric,\n  uppernumeric: \"\" + upper + numeric,\n  alphanumeric: \"\" + lower + upper + numeric\n},\n    tk = Object.keys(types);\n\nfunction random(length, type) {\n  switch (arguments.length) {\n    case 0:\n      length = 12;\n      type = 'alphanumeric';\n      break;\n\n    case 1:\n      if (typeof arguments[0] === 'string') {\n        length = 12;\n        type = arguments[0];\n      } else {\n        type = 'alphanumeric';\n      }\n\n      break;\n\n    case 2:\n    default:\n      break;\n  }\n\n  if (typeof length !== 'number') throw new Error('length must be a number, but you give a ' + typeof length + '.');\n\n  if (typeof type !== 'string') {\n    throw new Error('type must be a string, but you give a ' + typeof type + '.');\n  } else if (!~tk.indexOf(type) && !/^scoped:.+$/.test(type)) {\n    throw new Error('type must be one of ' + tk.join(', ') + ', scoped:*, but you not.');\n  }\n\n  var splitType = type.split(':').map(function (v) {\n    return v.trim();\n  });\n  var t = '';\n\n  if (splitType[0] !== 'scoped') {\n    t = types[type];\n  } else if (typeof splitType[1] === 'string' && splitType[1].length) {\n    t = splitType[1];\n  }\n\n  var str = '';\n  var l = t.length;\n\n  for (var i = 0; i < length; i++) {\n    str += t.charAt(Math.floor(Math.random() * l));\n  }\n\n  return str;\n}\n\nmodule.exports = random;","map":{"version":3,"sources":["/home/mfybaby/Documents/HealthStack2/HS-frontend/node_modules/random-string-generator/index.js"],"names":["lower","upper","toUpperCase","numeric","types","lowernumeric","uppernumeric","alphanumeric","tk","Object","keys","random","length","type","arguments","Error","indexOf","test","join","splitType","split","map","v","trim","t","str","l","i","charAt","Math","floor","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAG,4BAAZ;AAAA,IAA0CC,KAAK,GAAGD,KAAK,CAACE,WAAN,EAAlD;AAAA,IAAuEC,OAAO,GAAG,YAAjF;AAAA,IAA+FC,KAAK,GAAG;AACnGJ,EAAAA,KAAK,EAAEA,KAD4F;AAEnGC,EAAAA,KAAK,EAAEA,KAF4F;AAGnGE,EAAAA,OAAO,EAAEA,OAH0F;AAInGE,EAAAA,YAAY,EAAE,KAAKL,KAAL,GAAaG,OAJwE;AAKnGG,EAAAA,YAAY,EAAE,KAAKL,KAAL,GAAaE,OALwE;AAMnGI,EAAAA,YAAY,EAAE,KAAKP,KAAL,GAAaC,KAAb,GAAqBE;AANgE,CAAvG;AAAA,IAOGK,EAAE,GAAGC,MAAM,CAACC,IAAP,CAAYN,KAAZ,CAPR;;AAQA,SAASO,MAAT,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+B;AAC3B,UAAQC,SAAS,CAACF,MAAlB;AACI,SAAK,CAAL;AACIA,MAAAA,MAAM,GAAG,EAAT;AACAC,MAAAA,IAAI,GAAG,cAAP;AACA;;AACJ,SAAK,CAAL;AACI,UAAI,OAAOC,SAAS,CAAC,CAAD,CAAhB,KAAwB,QAA5B,EAAsC;AAClCF,QAAAA,MAAM,GAAG,EAAT;AACAC,QAAAA,IAAI,GAAGC,SAAS,CAAC,CAAD,CAAhB;AACH,OAHD,MAIK;AACDD,QAAAA,IAAI,GAAG,cAAP;AACH;;AACD;;AACJ,SAAK,CAAL;AACA;AACI;AAhBR;;AAkBA,MAAI,OAAOD,MAAP,KAAkB,QAAtB,EACI,MAAM,IAAIG,KAAJ,CAAU,6CAA6C,OAAOH,MAApD,GAA6D,GAAvE,CAAN;;AACJ,MAAI,OAAOC,IAAP,KAAgB,QAApB,EAA8B;AAC1B,UAAM,IAAIE,KAAJ,CAAU,2CAA2C,OAAOF,IAAlD,GAAyD,GAAnE,CAAN;AACH,GAFD,MAGK,IAAI,CAAC,CAACL,EAAE,CAACQ,OAAH,CAAWH,IAAX,CAAF,IAAsB,CAAC,cAAcI,IAAd,CAAmBJ,IAAnB,CAA3B,EAAqD;AACtD,UAAM,IAAIE,KAAJ,CAAU,yBAAyBP,EAAE,CAACU,IAAH,CAAQ,IAAR,CAAzB,GAAyC,0BAAnD,CAAN;AACH;;AACD,MAAIC,SAAS,GAAGN,IAAI,CAACO,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,UAAUC,CAAV,EAAa;AAAE,WAAOA,CAAC,CAACC,IAAF,EAAP;AAAkB,GAArD,CAAhB;AACA,MAAIC,CAAC,GAAG,EAAR;;AACA,MAAIL,SAAS,CAAC,CAAD,CAAT,KAAiB,QAArB,EAA+B;AAC3BK,IAAAA,CAAC,GAAGpB,KAAK,CAACS,IAAD,CAAT;AACH,GAFD,MAGK,IAAI,OAAOM,SAAS,CAAC,CAAD,CAAhB,KAAwB,QAAxB,IAAoCA,SAAS,CAAC,CAAD,CAAT,CAAaP,MAArD,EAA6D;AAC9DY,IAAAA,CAAC,GAAGL,SAAS,CAAC,CAAD,CAAb;AACH;;AACD,MAAIM,GAAG,GAAG,EAAV;AACA,MAAIC,CAAC,GAAGF,CAAC,CAACZ,MAAV;;AACA,OAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,MAApB,EAA4Be,CAAC,EAA7B,EAAiC;AAC7BF,IAAAA,GAAG,IAAID,CAAC,CAACI,MAAF,CAASC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAClB,MAAL,KAAgBe,CAA3B,CAAT,CAAP;AACH;;AACD,SAAOD,GAAP;AACH;;AAEDM,MAAM,CAACC,OAAP,GAAiBrB,MAAjB","sourcesContent":["'use strict';\n\nvar lower = 'abcdefghijklmnopqrstuvwxyz', upper = lower.toUpperCase(), numeric = '0123456789', types = {\n    lower: lower,\n    upper: upper,\n    numeric: numeric,\n    lowernumeric: \"\" + lower + numeric,\n    uppernumeric: \"\" + upper + numeric,\n    alphanumeric: \"\" + lower + upper + numeric\n}, tk = Object.keys(types);\nfunction random (length, type) {\n    switch (arguments.length) {\n        case 0:\n            length = 12;\n            type = 'alphanumeric';\n            break;\n        case 1:\n            if (typeof arguments[0] === 'string') {\n                length = 12;\n                type = arguments[0];\n            }\n            else {\n                type = 'alphanumeric';\n            }\n            break;\n        case 2:\n        default:\n            break;\n    }\n    if (typeof length !== 'number')\n        throw new Error('length must be a number, but you give a ' + typeof length + '.');\n    if (typeof type !== 'string') {\n        throw new Error('type must be a string, but you give a ' + typeof type + '.');\n    }\n    else if (!~tk.indexOf(type) && !/^scoped:.+$/.test(type)) {\n        throw new Error('type must be one of ' + tk.join(', ') + ', scoped:*, but you not.');\n    }\n    var splitType = type.split(':').map(function (v) { return v.trim(); });\n    var t = '';\n    if (splitType[0] !== 'scoped') {\n        t = types[type];\n    }\n    else if (typeof splitType[1] === 'string' && splitType[1].length) {\n        t = splitType[1];\n    }\n    var str = '';\n    var l = t.length;\n    for (var i = 0; i < length; i++) {\n        str += t.charAt(Math.floor(Math.random() * l));\n    }\n    return str;\n}\n\nmodule.exports = random;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { createElementObject, createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport var Popup = createOverlayComponent(function createPopup(props, context) {\n  var popup = new LeafletPopup(props, context.overlayContainer);\n  return createElementObject(popup, context);\n}, function usePopupLifecycle(element, context, _ref, setOpen) {\n  var position = _ref.position;\n  useEffect(function addPopup() {\n    var instance = element.instance;\n\n    function onPopupOpen(event) {\n      if (event.popup === instance) {\n        instance.update();\n        setOpen(true);\n      }\n    }\n\n    function onPopupClose(event) {\n      if (event.popup === instance) {\n        setOpen(false);\n      }\n    }\n\n    context.map.on({\n      popupopen: onPopupOpen,\n      popupclose: onPopupClose\n    });\n\n    if (context.overlayContainer == null) {\n      // Attach to a Map\n      if (position != null) {\n        instance.setLatLng(position);\n      }\n\n      instance.openOn(context.map);\n    } else {\n      // Attach to container component\n      context.overlayContainer.bindPopup(instance);\n    }\n\n    return function removePopup() {\n      var _context$overlayConta;\n\n      context.map.off({\n        popupopen: onPopupOpen,\n        popupclose: onPopupClose\n      });\n      (_context$overlayConta = context.overlayContainer) === null || _context$overlayConta === void 0 ? void 0 : _context$overlayConta.unbindPopup();\n      context.map.removeLayer(instance);\n    };\n  }, [element, context, setOpen, position]);\n});","map":{"version":3,"sources":["/home/mfybaby/Documents/HealthStack2/HS-frontend/node_modules/react-leaflet/lib/Popup.js"],"names":["createElementObject","createOverlayComponent","Popup","LeafletPopup","useEffect","createPopup","props","context","popup","overlayContainer","usePopupLifecycle","element","setOpen","position","addPopup","instance","onPopupOpen","event","update","onPopupClose","map","on","popupopen","popupclose","setLatLng","openOn","bindPopup","removePopup","off","unbindPopup","removeLayer"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,sBAA9B,QAA4D,qBAA5D;AACA,SAASC,KAAK,IAAIC,YAAlB,QAAsC,SAAtC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAO,IAAMF,KAAK,GAAGD,sBAAsB,CAAC,SAASI,WAAT,CAAqBC,KAArB,EAA4BC,OAA5B,EAAqC;AAC7E,MAAMC,KAAK,GAAG,IAAIL,YAAJ,CAAiBG,KAAjB,EAAwBC,OAAO,CAACE,gBAAhC,CAAd;AACA,SAAOT,mBAAmB,CAACQ,KAAD,EAAQD,OAAR,CAA1B;AACH,CAH0C,EAGxC,SAASG,iBAAT,CAA2BC,OAA3B,EAAoCJ,OAApC,QAA4DK,OAA5D,EAAqE;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AACpET,EAAAA,SAAS,CAAC,SAASU,QAAT,GAAoB;AAAA,QAClBC,QADkB,GACJJ,OADI,CAClBI,QADkB;;AAE1B,aAASC,WAAT,CAAqBC,KAArB,EAA4B;AACxB,UAAIA,KAAK,CAACT,KAAN,KAAgBO,QAApB,EAA8B;AAC1BA,QAAAA,QAAQ,CAACG,MAAT;AACAN,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH;AACJ;;AACD,aAASO,YAAT,CAAsBF,KAAtB,EAA6B;AACzB,UAAIA,KAAK,CAACT,KAAN,KAAgBO,QAApB,EAA8B;AAC1BH,QAAAA,OAAO,CAAC,KAAD,CAAP;AACH;AACJ;;AACDL,IAAAA,OAAO,CAACa,GAAR,CAAYC,EAAZ,CAAe;AACXC,MAAAA,SAAS,EAAEN,WADA;AAEXO,MAAAA,UAAU,EAAEJ;AAFD,KAAf;;AAIA,QAAIZ,OAAO,CAACE,gBAAR,IAA4B,IAAhC,EAAsC;AAClC;AACA,UAAII,QAAQ,IAAI,IAAhB,EAAsB;AAClBE,QAAAA,QAAQ,CAACS,SAAT,CAAmBX,QAAnB;AACH;;AACDE,MAAAA,QAAQ,CAACU,MAAT,CAAgBlB,OAAO,CAACa,GAAxB;AACH,KAND,MAMO;AACH;AACAb,MAAAA,OAAO,CAACE,gBAAR,CAAyBiB,SAAzB,CAAmCX,QAAnC;AACH;;AACD,WAAO,SAASY,WAAT,GAAuB;AAAA;;AAC1BpB,MAAAA,OAAO,CAACa,GAAR,CAAYQ,GAAZ,CAAgB;AACZN,QAAAA,SAAS,EAAEN,WADC;AAEZO,QAAAA,UAAU,EAAEJ;AAFA,OAAhB;AAIA,+BAAAZ,OAAO,CAACE,gBAAR,gFAA0BoB,WAA1B;AACAtB,MAAAA,OAAO,CAACa,GAAR,CAAYU,WAAZ,CAAwBf,QAAxB;AACH,KAPD;AAQH,GAnCQ,EAmCN,CACCJ,OADD,EAECJ,OAFD,EAGCK,OAHD,EAICC,QAJD,CAnCM,CAAT;AAyCH,CA7C0C,CAApC","sourcesContent":["import { createElementObject, createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n    const popup = new LeafletPopup(props, context.overlayContainer);\n    return createElementObject(popup, context);\n}, function usePopupLifecycle(element, context, { position  }, setOpen) {\n    useEffect(function addPopup() {\n        const { instance  } = element;\n        function onPopupOpen(event) {\n            if (event.popup === instance) {\n                instance.update();\n                setOpen(true);\n            }\n        }\n        function onPopupClose(event) {\n            if (event.popup === instance) {\n                setOpen(false);\n            }\n        }\n        context.map.on({\n            popupopen: onPopupOpen,\n            popupclose: onPopupClose\n        });\n        if (context.overlayContainer == null) {\n            // Attach to a Map\n            if (position != null) {\n                instance.setLatLng(position);\n            }\n            instance.openOn(context.map);\n        } else {\n            // Attach to container component\n            context.overlayContainer.bindPopup(instance);\n        }\n        return function removePopup() {\n            context.map.off({\n                popupopen: onPopupOpen,\n                popupclose: onPopupClose\n            });\n            context.overlayContainer?.unbindPopup();\n            context.map.removeLayer(instance);\n        };\n    }, [\n        element,\n        context,\n        setOpen,\n        position\n    ]);\n});\n"]},"metadata":{},"sourceType":"module"}